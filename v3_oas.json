{
    "components": {
        "parameters": {
            "DeviceUserAgentHeader": {
                "description": "Used to improve end-user's authentication experience based on device type.\nIf omitted, the `User-Agent` header will be used instead.\n",
                "in": "header",
                "name": "X-Device-User-Agent",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "IdempotencyKeyHeader": {
                "description": "An idempotency key to allow safe retrying without the operation being performed multiple times.\nThe value should be unique for each operation, e.g. a UUID, with the same key being sent on a retry of the same request.\n",
                "in": "header",
                "name": "Idempotency-Key",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "OptionalIdempotencyKeyHeader": {
                "description": "An idempotency key to allow safe retrying without the operation being performed multiple times.\nThe value should be unique for each operation (we strongly advise to use a UUID v4), with the same key being sent on a retry of the same request.\n",
                "in": "header",
                "name": "Idempotency-Key",
                "schema": {
                    "type": "string"
                }
            },
            "OptionalIdempotencyKeyHeaderNoAuth": {
                "description": "An idempotency key to allow safe retrying without the operation being performed multiple times.\nThe value should be unique for each operation (we strongly advise to use a UUID v4), with the same key being sent on a retry of the same request.\nIf a UUID can't be used, we advise to also include your client id in the idempotency key.\n",
                "in": "header",
                "name": "Idempotency-Key",
                "schema": {
                    "type": "string"
                }
            },
            "PsuIpAddressHeader": {
                "description": "Used to collect and record end-user IP address.\nThe first IP address in the [list](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) will be used as the end-user IP address.\n",
                "in": "header",
                "name": "X-Forwarded-For",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "SignatureHeader": {
                "description": "A JWS with detached content, signed with your private key.\nSee [Request Signing](https://docs.truelayer.com/docs/sign-your-requests)\n",
                "in": "header",
                "name": "Tl-Signature",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "SignatureHeaderConditional": {
                "description": "A JWS with detached content, signed with your private key.\nSee [Request Signing](https://docs.truelayer.com/docs/sign-your-requests).\n\nRequired with a OAuth2 token.\n",
                "in": "header",
                "name": "Tl-Signature",
                "schema": {
                    "type": "string"
                }
            },
            "WebhookSignatureHeader": {
                "description": "A JWS with detached content, verifiable with our public key.\nSee [Webhook Request Signing](/docs/configure-webhooks-for-your-integration#validate-the-signature-of-received-webhooks)\n",
                "in": "header",
                "name": "Tl-Signature",
                "required": true,
                "schema": {
                    "type": "string"
                }
            }
        },
        "schemas": {
            "AccountIdentifier": {
                "description": "A unique scheme identifier for an external account.\n",
                "discriminator": {
                    "mapping": {
                        "iban": "#/components/schemas/AccountIdentifierIban",
                        "nrb": "#/components/schemas/AccountIdentifierNrb",
                        "sort_code_account_number": "#/components/schemas/AccountIdentifierScan"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AccountIdentifierScan"
                    },
                    {
                        "$ref": "#/components/schemas/AccountIdentifierIban"
                    },
                    {
                        "$ref": "#/components/schemas/AccountIdentifierNrb"
                    }
                ],
                "title": "Account Identifier"
            },
            "AccountIdentifierBban": {
                "description": "Basic bank account number.\n",
                "properties": {
                    "bban": {
                        "description": "Valid Basic Bank Account Number (no spaces). Consists of up to 30 alphanumeric characters, with a fixed length per country. Forms the latter part of the IBAN as described above.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of scheme identifier.",
                        "enum": [
                            "bban"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "bban"
                ],
                "title": "BBAN",
                "type": "object"
            },
            "AccountIdentifierIban": {
                "description": "The international bank account number.",
                "properties": {
                    "iban": {
                        "description": "Valid International Bank Account Number (no spaces). Consists of a 2 letter country code, followed by 2 check digits, and then by up to 30 alphanumeric characters (also known as the BBAN). pattern: `^[A-Z]{2}[0-9]{2}[A-Z0-9]{11,30}$`",
                        "example": "GB32CLRB04066800012315",
                        "maxLength": 34,
                        "minLength": 15,
                        "pattern": "^[A-Z]{2}[0-9]{2}[A-Z0-9]{11,30}$",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of scheme identifier.",
                        "enum": [
                            "iban"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "iban"
                ],
                "title": "IBAN",
                "type": "object"
            },
            "AccountIdentifierNrb": {
                "description": "The scheme identifier for a bank account participating in Poland's payment schemes.\n",
                "properties": {
                    "nrb": {
                        "description": "Valid Polish NRB (no spaces). Consists of 2 check digits, followed by an 8 digit bank branch number, and then by a 16 digit bank account number. Equivalent to a Polish IBAN with the country code removed.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of scheme identifier.",
                        "enum": [
                            "nrb"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "nrb"
                ],
                "title": "NRB",
                "type": "object"
            },
            "AccountIdentifierScan": {
                "description": "The scheme identifier for a bank account participating in UK payment schemes.",
                "properties": {
                    "account_number": {
                        "description": "8 digit account number. pattern: `^[0-9]{8}$`",
                        "example": 26207729,
                        "maxLength": 8,
                        "minLength": 8,
                        "pattern": "^[0-9]{8}$",
                        "type": "string"
                    },
                    "sort_code": {
                        "description": "6 digit sort code (no spaces or dashes). pattern: `^[0-9]{6}$`",
                        "example": 560029,
                        "maxLength": 6,
                        "minLength": 6,
                        "pattern": "^[0-9]{6}$",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of scheme identifier.",
                        "enum": [
                            "sort_code_account_number"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "sort_code",
                    "account_number"
                ],
                "title": "Sort Code + Account Number",
                "type": "object"
            },
            "ActionSpecAdditionalInput": {
                "discriminator": {
                    "mapping": {
                        "select": "#/components/schemas/SelectAdditionalInput",
                        "text": "#/components/schemas/TextAdditionalInput",
                        "text_with_image": "#/components/schemas/TextWithImageAdditionalInput"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/TextAdditionalInput"
                    },
                    {
                        "$ref": "#/components/schemas/TextWithImageAdditionalInput"
                    },
                    {
                        "$ref": "#/components/schemas/SelectAdditionalInput"
                    }
                ]
            },
            "ActionSpecConsent": {
                "properties": {
                    "requirements": {
                        "$ref": "#/components/schemas/ConsentRequirements"
                    },
                    "subsequent_action_hint": {
                        "enum": [
                            "redirect",
                            "form",
                            "wait"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "consent"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "subsequent_action_hint",
                    "type",
                    "requirements"
                ],
                "title": "Consent",
                "type": "object"
            },
            "ActionSpecConsent-2": {
                "properties": {
                    "subsequent_action_hint": {
                        "enum": [
                            "redirect"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "consent"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "subsequent_action_hint",
                    "type"
                ],
                "title": "Consent",
                "type": "object"
            },
            "ActionSpecForm": {
                "description": "Form action represents the PSU action of entering further details into the UI.\n",
                "properties": {
                    "inputs": {
                        "description": "The inputs to be presented to the PSU in the UI.",
                        "items": {
                            "$ref": "#/components/schemas/ActionSpecAdditionalInput"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "type": {
                        "enum": [
                            "form"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "inputs"
                ],
                "title": "Form",
                "type": "object"
            },
            "ActionSpecProviderSelection": {
                "description": "Provider selection represents the PSU action of selecting a provider\n",
                "properties": {
                    "providers": {
                        "description": "List of providers to be presented to the PSU",
                        "items": {
                            "$ref": "#/components/schemas/Provider"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "provider_selection"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "providers"
                ],
                "title": "Provider Selection",
                "type": "object"
            },
            "ActionSpecRedirect": {
                "properties": {
                    "type": {
                        "enum": [
                            "redirect"
                        ],
                        "type": "string"
                    },
                    "uri": {
                        "description": "URL the end user must be redirected to.\n",
                        "format": "url",
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "uri"
                ],
                "title": "Redirect",
                "type": "object"
            },
            "ActionSpecRetry": {
                "properties": {
                    "retry_options": {
                        "description": "List of retry options available",
                        "items": {
                            "$ref": "#/components/schemas/RetryOption"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "retry"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "retry_options"
                ],
                "title": "Retry",
                "type": "object"
            },
            "ActionSpecSchemeSelection": {
                "description": "Scheme selection represents the PSU action of selecting a scheme\n",
                "properties": {
                    "schemes": {
                        "description": "List of schemes to be presented to the PSU",
                        "items": {
                            "$ref": "#/components/schemas/Scheme"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "scheme_selection"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "schemes"
                ],
                "title": "Scheme Selection",
                "type": "object"
            },
            "ActionSpecUserAccountSelection": {
                "description": "Provides the end user with a list of previously saved user accounts for reuse.\n",
                "properties": {
                    "type": {
                        "enum": [
                            "user_account_selection"
                        ],
                        "type": "string"
                    },
                    "user_accounts": {
                        "description": "List of user accounts to be presented to the PSU",
                        "items": {
                            "$ref": "#/components/schemas/UserAccountDetails"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "type",
                    "user_accounts"
                ],
                "title": "User Account Selection",
                "type": "object"
            },
            "ActionSpecWaitForOutcome": {
                "description": "Indication that there are currently no actions to perform.\nClients must poll the GET '/v3/payment/{id}' endpoint until the status changes, or the next action is available.\n",
                "properties": {
                    "display_message": {
                        "$ref": "#/components/schemas/DisplayText",
                        "description": "An optional message to be displayed to the end user while they are waiting."
                    },
                    "type": {
                        "enum": [
                            "wait"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Wait for Outcome",
                "type": "object"
            },
            "ActionSpecWaitForOutcome-2": {
                "description": "Indication that there are currently no actions to perform.\n",
                "properties": {
                    "async_outcome": {
                        "description": "It indicates that the user flow can continue and you can check the mandate status later. You don't need to wait synchronously for the status to change at this point.",
                        "type": "object"
                    },
                    "display_message": {
                        "$ref": "#/components/schemas/DisplayText",
                        "description": "An optional message to be displayed to the end user while they are waiting."
                    },
                    "type": {
                        "enum": [
                            "wait"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Wait for Outcome",
                "type": "object"
            },
            "AdditionalInputCommon": {
                "properties": {
                    "description": {
                        "$ref": "#/components/schemas/DisplayText",
                        "description": "Additional text that provides more information about the input and the value that the PSU is expected to provide."
                    },
                    "display_text": {
                        "$ref": "#/components/schemas/DisplayText",
                        "description": "The text to be used as a label for the input, to be rendered in the UI somewhere alongside the input itself."
                    },
                    "id": {
                        "description": "The identifier for the additional input, to be used when submitting the user's value back to the API.",
                        "type": "string"
                    },
                    "mandatory": {
                        "description": "Whether or not a value for this input must be provided when the form is submitted.",
                        "example": true,
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "mandatory",
                    "display_text"
                ],
                "type": "object"
            },
            "AdditionalInputType": {
                "description": "Possible input types for the `form` action:\n * `text` - The end user must enter some text\n * `text_with_image` - The end user must enter some text with an accompanying image (e.g. QR code)\n * `select` - The end user must select an option\n",
                "enum": [
                    "text",
                    "text_with_image",
                    "select"
                ],
                "type": "string"
            },
            "Address": {
                "properties": {
                    "address_line1": {
                        "description": "The full street address including house number and street name.\npattern: `^.{1,50}$``\n",
                        "example": "40 Finsbury Square",
                        "maxLength": 50,
                        "pattern": "^.{1,50}$",
                        "type": "string"
                    },
                    "address_line2": {
                        "description": "Further details like building name, suite, apartment number, etc.\npattern: `^.{1,50}$`\n",
                        "example": "The Gilbert",
                        "maxLength": 50,
                        "pattern": "^.{1,50}$",
                        "type": "string"
                    },
                    "city": {
                        "description": "Name of the city / locality.\npattern: `^.{1,50}$`\n",
                        "example": "London",
                        "maxLength": 50,
                        "pattern": "^.{1,50}$",
                        "type": "string"
                    },
                    "country_code": {
                        "description": "The country code according to [ISO-3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)",
                        "example": "GB",
                        "maxLength": 2,
                        "minLength": 2,
                        "type": "string"
                    },
                    "state": {
                        "description": "Name of the county / state.\npattern: `^.{1,50}$`\n",
                        "example": "London",
                        "maxLength": 50,
                        "pattern": "^.{1,50}$",
                        "type": "string"
                    },
                    "zip": {
                        "description": "Zip code or postal code.\npattern: `^.{1,20}$`\n",
                        "example": "EC2A 1PX",
                        "maxLength": 20,
                        "pattern": "^.{1,20}$",
                        "type": "string"
                    }
                },
                "required": [
                    "address_line1",
                    "city",
                    "zip",
                    "country_code"
                ],
                "title": "Address",
                "type": "object"
            },
            "AdjacentActions": {
                "description": "Actions that can be submitted alongside the next action",
                "properties": {
                    "consent": {
                        "properties": {
                            "requirements": {
                                "$ref": "#/components/schemas/ConsentRequirements"
                            }
                        },
                        "required": [
                            "requirements"
                        ],
                        "type": "object"
                    }
                },
                "title": "Adjacent Actions",
                "type": "object"
            },
            "AdjacentActionsSubmission": {
                "description": "Optionally submit adjacent actions",
                "properties": {
                    "consent": {
                        "description": "Indicate consent was captured alongside this action",
                        "properties": {
                            "captured": {
                                "$ref": "#/components/schemas/AdjacentConsentCaptured"
                            }
                        },
                        "required": [
                            "captured"
                        ],
                        "title": "Consent Captured",
                        "type": "object"
                    }
                },
                "title": "Adjacent Actions",
                "type": "object"
            },
            "AdjacentConsentCaptured": {
                "description": "The details of the consents captured from the user.\n",
                "properties": {
                    "ais": {
                        "$ref": "#/components/schemas/ConsentCapturedAis"
                    },
                    "pis": {
                        "$ref": "#/components/schemas/ConsentCapturedPis"
                    }
                },
                "required": [
                    "pis"
                ],
                "title": "Adjacent Consent Captured",
                "type": "object"
            },
            "AisScope": {
                "enum": [
                    "accounts",
                    "balance"
                ],
                "title": "AIS Scope",
                "type": "string"
            },
            "AutomatedVerification": {
                "description": "In an automated verification, Truelayer will perform additional checks on the remitter. You can only perform additional checks for one of name or date of birth, not both.",
                "properties": {
                    "remitter_date_of_birth": {
                        "description": "Enable verification for the remitter date of birth.",
                        "type": "boolean"
                    },
                    "remitter_name": {
                        "description": "Enable verification for the remitter name.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The type of verification.",
                        "enum": [
                            "automated"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "automated",
                "type": "object"
            },
            "AvailableBalance": {
                "description": "The balance immediately available to perform payouts and transfers, expressed in the smallest denomination of the account's currency.\n\nThe available balance does also take into consideration transactions that are not yet in a final state.\n",
                "type": "integer"
            },
            "BankTransferProviderSelection": {
                "description": "Provider Selection",
                "discriminator": {
                    "mapping": {
                        "preselected": "#/components/schemas/ProviderSelectionPreselected",
                        "user_selected": "#/components/schemas/ProviderSelectionUserSelected"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ProviderSelectionUserSelected"
                    },
                    {
                        "$ref": "#/components/schemas/ProviderSelectionPreselected"
                    }
                ],
                "title": "Provider Selection",
                "type": "object"
            },
            "BankTransferProviderSelectionResponse": {
                "description": "Provider Selection",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ProviderSelectionUserSelectedResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ProviderSelectionPreselectedResponse"
                    }
                ],
                "title": "Provider Selection",
                "type": "object"
            },
            "BankTransferRetry": {
                "description": "Include this parameter to support retries (only available for GBP payments)",
                "type": "object"
            },
            "BankTransferRetryResponse": {
                "description": "This parameter indicate that the payment support retries (only available for GBP payments)",
                "type": "object"
            },
            "ConfirmationOfFunds": {
                "properties": {
                    "confirmed": {
                        "description": "Whether the funds are confirmed",
                        "type": "boolean"
                    },
                    "confirmed_at": {
                        "description": "The date and time the funds were confirmed at",
                        "format": "datetime",
                        "type": "string"
                    }
                },
                "required": [
                    "confirmed",
                    "confirmed_at"
                ],
                "title": "Confirmation of funds",
                "type": "object"
            },
            "ConsentCaptured": {
                "description": "The details of the consents captured from the user.\nIf omitted it is assumed a standard PIS consent was captured.\n",
                "properties": {
                    "ais": {
                        "$ref": "#/components/schemas/ConsentCapturedAis"
                    },
                    "pis": {
                        "$ref": "#/components/schemas/ConsentCapturedPis"
                    }
                },
                "required": [
                    "pis"
                ],
                "title": "Consent Captured",
                "type": "object"
            },
            "ConsentCapturedAis": {
                "properties": {
                    "scopes": {
                        "items": {
                            "$ref": "#/components/schemas/AisScope"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "scopes"
                ],
                "title": "AIS Consent",
                "type": "object"
            },
            "ConsentCapturedPis": {
                "title": "PIS Consent",
                "type": "object"
            },
            "ConsentRequirements": {
                "description": "The details of the consents required to be captured from the user.",
                "properties": {
                    "ais": {
                        "$ref": "#/components/schemas/ConsentRequirementsAis"
                    },
                    "pis": {
                        "$ref": "#/components/schemas/ConsentRequirementsPis"
                    }
                },
                "title": "Consent Requirements",
                "type": "object"
            },
            "ConsentRequirementsAis": {
                "properties": {
                    "optional_scopes": {
                        "items": {
                            "$ref": "#/components/schemas/AisScope"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "required_scopes": {
                        "items": {
                            "$ref": "#/components/schemas/AisScope"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "required_scopes",
                    "optional_scopes"
                ],
                "title": "AIS Consent",
                "type": "object"
            },
            "ConsentRequirementsPis": {
                "title": "PIS Consent",
                "type": "object"
            },
            "ConsentSupported": {
                "description": "The details of the consents supported to be captured from the user.",
                "properties": {
                    "ais": {
                        "$ref": "#/components/schemas/ConsentSupportedAis"
                    },
                    "pis": {
                        "$ref": "#/components/schemas/ConsentSupportedPis"
                    }
                },
                "required": [
                    "pis"
                ],
                "title": "Consent Requirements",
                "type": "object"
            },
            "ConsentSupportedAis": {
                "properties": {
                    "scopes": {
                        "items": {
                            "$ref": "#/components/schemas/AisScope"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "scopes"
                ],
                "title": "AIS Consent",
                "type": "object"
            },
            "ConsentSupportedPis": {
                "title": "PIS Consent",
                "type": "object"
            },
            "CountryCode": {
                "enum": [
                    "AT",
                    "BE",
                    "DE",
                    "DK",
                    "ES",
                    "FI",
                    "FR",
                    "GB",
                    "IE",
                    "IT",
                    "LT",
                    "NL",
                    "NO",
                    "PL",
                    "PT",
                    "RO"
                ],
                "type": "string"
            },
            "CreateDDRemitter": {
                "discriminator": {
                    "mapping": {
                        "payment_source_provided": "#/components/schemas/DDPaymentSourceProvidedRemitter",
                        "preselected": "#/components/schemas/DDPreselectedRemitter"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/DDPreselectedRemitter"
                    },
                    {
                        "$ref": "#/components/schemas/DDPaymentSourceProvidedRemitter"
                    }
                ],
                "title": "Direct Debit Remitter",
                "type": "object"
            },
            "CreatedPayment": {
                "discriminator": {
                    "mapping": {
                        "authorization_required": "#/components/schemas/PaymentCreatedAuthorizationRequired",
                        "authorized": "#/components/schemas/PaymentCreatedAuthorized",
                        "authorizing": "#/components/schemas/PaymentCreatedAuthorizing",
                        "failed": "#/components/schemas/PaymentCreatedFailed"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCreatedAuthorizationRequired"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentCreatedAuthorizing"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentCreatedAuthorized"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentCreatedFailed"
                    }
                ]
            },
            "CreatedPaymentLink": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/PaymentLinkId"
                    },
                    "uri": {
                        "description": "Link to HPP checkout page.",
                        "example": "https://payment.truelayer.com/checkout/aKiW35RWSyF",
                        "type": "string"
                    }
                },
                "required": [
                    "uri",
                    "id"
                ],
                "title": "Create payment link Response",
                "type": "object"
            },
            "CreateMandate": {
                "allOf": [
                    {
                        "properties": {
                            "constraints": {
                                "$ref": "#/components/schemas/VRPConstraints"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/CurrencyCode"
                            },
                            "mandate": {
                                "$ref": "#/components/schemas/Mandate"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "related_products": {
                                "$ref": "#/components/schemas/RelatedProducts"
                            },
                            "user": {
                                "$ref": "#/components/schemas/PaymentUserCreate"
                            }
                        },
                        "required": [
                            "mandate",
                            "currency",
                            "user"
                        ],
                        "type": "object"
                    }
                ],
                "title": "CreateMandate"
            },
            "CreatePayment": {
                "properties": {
                    "amount_in_minor": {
                        "description": "A 'cent' value representing the amount. eg 100 = 1GBP or 100 = 1EUR",
                        "example": 1,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "authorization_flow": {
                        "$ref": "#/components/schemas/StartPaymentAuthorizationFlow",
                        "description": "This object contains a declaration of your UI's capabilities. The API adjusts the flow based on this parameter and filters out unsupported providers. If you provide this parameter, you don't need to call the [**Start authorization flow** endpoint](/reference/start-payment-authorization-flow)."
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CurrencyCode"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "payment_method": {
                        "$ref": "#/components/schemas/PaymentMethod"
                    },
                    "related_products": {
                        "$ref": "#/components/schemas/RelatedProducts"
                    },
                    "risk_assessment": {
                        "$ref": "#/components/schemas/RiskAssessment"
                    },
                    "sub_merchants": {
                        "$ref": "#/components/schemas/PaymentSubMerchants"
                    },
                    "user": {
                        "$ref": "#/components/schemas/PaymentUserCreate"
                    }
                },
                "required": [
                    "amount_in_minor",
                    "currency",
                    "payment_method",
                    "user"
                ],
                "title": "Create payment",
                "type": "object"
            },
            "CreatePaymentLink": {
                "properties": {
                    "expires_at": {
                        "description": "The date and time the payment link will expire at.\nIf this property isn't specified, the payment link will expire 24 hours after its creation.\n",
                        "example": "2023-01-22T07:30:53.527Z",
                        "format": "datetime",
                        "type": "string"
                    },
                    "payment_configuration": {
                        "$ref": "#/components/schemas/PaymentDetails",
                        "description": "Configuration of the payment to be created when using the link.\nThis follows the same structure as the create payment request in payments v3 with a couple of distinctions:\n* This configuration only supports `bank_transfer` payment method.\n* This configuration won't allow `data_access_token`.\n"
                    },
                    "product_items": {
                        "description": "List of items associated to this link.",
                        "items": {
                            "$ref": "#/components/schemas/ProductItem"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "reference": {
                        "description": "Reference for the payment link. This reference will be shown in the link's UI.\nThis reference won't be shared with the provider or any other third-party.\n",
                        "example": "TABLES_R_US_LINK_42",
                        "type": "string"
                    },
                    "return_uri": {
                        "description": "This URL determines where the end user will be redirected back once they successfully completed\nthe authorization flow of a payment attempt.\nIf no URL is provided, the end user won't be redirected anywhere, \nbut will instead be shown a TrueLayer's page notifying success.\n",
                        "example": "https://tablesrus.com/thank-you-for-your-order",
                        "format": "url",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the Payment link",
                        "enum": [
                            "single_payment"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "payment_configuration",
                    "type"
                ],
                "title": "Create payment link",
                "type": "object"
            },
            "CreatePaymentRefund": {
                "properties": {
                    "amount_in_minor": {
                        "description": "A 'cent' value representing the amount. eg 100 == 1GBP.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "reference": {
                        "description": "A reference for the refund.",
                        "type": "string"
                    }
                },
                "required": [
                    "reference"
                ],
                "title": "Create payment refund",
                "type": "object"
            },
            "CreatePayout": {
                "properties": {
                    "amount_in_minor": {
                        "description": "A 'cent' value representing the amount. eg 100 == 1GBP",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "beneficiary": {
                        "$ref": "#/components/schemas/PayoutIncomingDestination"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/MerchantAccountCurrencyCode"
                    },
                    "merchant_account_id": {
                        "$ref": "#/components/schemas/MerchantAccountId"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "scheme_selection": {
                        "$ref": "#/components/schemas/PayoutIncomingSchemeSelection"
                    },
                    "sub_merchants": {
                        "$ref": "#/components/schemas/PayoutIncomingSubmerchants"
                    }
                },
                "required": [
                    "merchant_account_id",
                    "amount_in_minor",
                    "currency",
                    "beneficiary"
                ],
                "title": "Create payout",
                "type": "object"
            },
            "CreatePayout-2": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCreatedRegular"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutCreatedUserDetermined"
                    }
                ]
            },
            "CreditableAt": {
                "description": "The date and time that TrueLayer determined that the payment was ready to be credited.",
                "example": "2023-06-13T15:00:00.000Z",
                "format": "datetime",
                "type": "string"
            },
            "CurrencyCode": {
                "enum": [
                    "GBP",
                    "EUR"
                ],
                "example": "GBP",
                "type": "string"
            },
            "CurrentBalance": {
                "description": "The current balance, expressed in the smallest denomination of the account's currency.\n\nThe current balance does not take into consideration transactions that are not yet in a final state.\n",
                "type": "integer"
            },
            "Cursor": {
                "description": "cursor used for pagination purposes that represents the first item of the page.\nReturned as `next_cursor` in the response payload of endpoints supporting pagination.\nNot required to access the first page of items.\n",
                "example": "bWFuZGF0ZXM6MmUwNDk0MTMK",
                "title": "cursor",
                "type": "string"
            },
            "DDBeneficiary": {
                "description": "The details of the account that will be receiving the payments.",
                "discriminator": {
                    "mapping": {
                        "merchant_account": "#/components/schemas/MandateDestinationMerchantAccount"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MandateDestinationMerchantAccount"
                    }
                ],
                "type": "object"
            },
            "DDInitialPayment": {
                "properties": {
                    "amount_in_minor": {
                        "description": "A 'cent' value representing the amount. eg 100 == 1GBP or 100 = 1EUR",
                        "example": 1,
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "amount_in_minor"
                ],
                "title": "Initial Payment",
                "type": "object"
            },
            "DDPaymentSourceProvidedRemitter": {
                "properties": {
                    "initial_payment": {
                        "$ref": "#/components/schemas/DDInitialPayment"
                    },
                    "provider_selection": {
                        "$ref": "#/components/schemas/BankTransferProviderSelection"
                    },
                    "type": {
                        "enum": [
                            "payment_source_provided"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "initial_payment",
                    "provider_selection"
                ],
                "title": "Payment Source Provided Remitter",
                "type": "object"
            },
            "DDPreselectedRemitter": {
                "allOf": [
                    {
                        "properties": {
                            "address": {
                                "$ref": "#/components/schemas/Address"
                            },
                            "type": {
                                "enum": [
                                    "preselected"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/Remitter",
                        "required": [
                            "type"
                        ]
                    }
                ],
                "title": "Preselected Remitter"
            },
            "DisplayText": {
                "properties": {
                    "default": {
                        "description": "A value that can be used as a default to show to the user, if the key cannot be used to look up a relevant value.",
                        "example": "Please enter your IBAN",
                        "type": "string"
                    },
                    "key": {
                        "description": "A key that is intended to be used as a translation key to look up and render localised text. If a key is not provided, it indicates that this value cannot be localised and that the `default` value should always be preferred.",
                        "example": "remitter_iban_display_label",
                        "type": "string"
                    }
                },
                "required": [
                    "default"
                ],
                "title": "Display Text",
                "type": "object"
            },
            "DisputedAt": {
                "description": "The date and time that TrueLayer received an indemnity claim for the payment.",
                "example": "2023-06-13T15:00:00.000Z",
                "format": "datetime",
                "type": "string"
            },
            "DisputedReason": {
                "description": "The reason that the indemnity claim was made against the payment.",
                "type": "string"
            },
            "GetConstraints": {
                "properties": {
                    "maximum_individual_amount": {
                        "description": "A 'cent' value representing the maximum amount that can be specified in a payment instruction",
                        "type": "integer"
                    },
                    "periodic_limits": {
                        "description": "The state of the constraints utilisation within each periodic limit defined in the mandate creation.\nThere will always be at least 1 period state defined\n",
                        "properties": {
                            "day": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodState"
                                    },
                                    {
                                        "description": "Utilisation of this mandate within the current day"
                                    }
                                ]
                            },
                            "fortnight": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodState"
                                    },
                                    {
                                        "description": "Utilisation of this mandate within the current fortnight period"
                                    }
                                ]
                            },
                            "half_year": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodState"
                                    },
                                    {
                                        "description": "Utilisation of this mandate within the current half-year period"
                                    }
                                ]
                            },
                            "month": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodState"
                                    },
                                    {
                                        "description": "Utilisation of this mandate within the current month period"
                                    }
                                ]
                            },
                            "week": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodState"
                                    },
                                    {
                                        "description": "Utilisation of this mandate within the current week period"
                                    }
                                ]
                            },
                            "year": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodState"
                                    },
                                    {
                                        "description": "Utilisation of this mandate within the current year period"
                                    }
                                ]
                            }
                        },
                        "title": "Period States",
                        "type": "object"
                    },
                    "valid_from": {
                        "description": "Start date time for which the consent remains valid using format `YYYY-MM-DDTHH:mm:ss.sssZ`\n",
                        "example": "2022-01-01T00:00:00.000Z",
                        "format": "datetime",
                        "type": "string"
                    },
                    "valid_to": {
                        "description": "End date time for which the consent remains valid using format `YYYY-MM-DDTHH:mm:ss.sssZ`\n",
                        "example": "2022-12-31T23:59:59.999Z",
                        "format": "datetime",
                        "type": "string"
                    }
                },
                "required": [
                    "maximum_individual_amount",
                    "periodic_limits"
                ],
                "title": "Constraints State",
                "type": "object"
            },
            "GetDDMandate": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "direct_debit"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "authorization_required": "#/components/schemas/GetDDMandateAuthorizationRequired",
                                "authorized": "#/components/schemas/GetDDMandateAuthorized",
                                "authorizing": "#/components/schemas/GetDDMandateAuthorizing",
                                "failed": "#/components/schemas/GetDDMandateFailed",
                                "revoked": "#/components/schemas/GetDDMandateRevoked"
                            },
                            "propertyName": "status"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetDDMandateAuthorizationRequired"
                            },
                            {
                                "$ref": "#/components/schemas/GetDDMandateAuthorizing"
                            },
                            {
                                "$ref": "#/components/schemas/GetDDMandateAuthorized"
                            },
                            {
                                "$ref": "#/components/schemas/GetDDMandateFailed"
                            },
                            {
                                "$ref": "#/components/schemas/GetDDMandateRevoked"
                            }
                        ]
                    }
                ],
                "title": "Direct Debits"
            },
            "GetDDMandateAuthorizationRequired": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetDDMandateCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorization_required"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A mandate yet to be authorized.\n\nThis is the first status for a mandate that requires further actions to be authorized.\n",
                "title": "Authorization Required"
            },
            "GetDDMandateAuthorized": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetDDMandateCommon"
                    },
                    {
                        "properties": {
                            "authorized_at": {
                                "description": "The date and time the mandate was authorized at.",
                                "format": "datetime",
                                "type": "string"
                            },
                            "statement_reference": {
                                "description": "Reference set on the mandate.",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "authorized"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "authorized_at",
                            "statement_reference"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorized"
            },
            "GetDDMandateAuthorizing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetDDMandateCommon"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MandateAuthorizationFlow"
                                    },
                                    {
                                        "properties": {
                                            "configuration": {
                                                "$ref": "#/components/schemas/MandateAuthorizationFlowConfiguration"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "status": {
                                "enum": [
                                    "authorizing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorizing"
            },
            "GetDDMandateCommon": {
                "allOf": [
                    {
                        "properties": {
                            "beneficiary": {
                                "$ref": "#/components/schemas/DDBeneficiary"
                            },
                            "created_at": {
                                "description": "The date and time the mandate was created at.",
                                "format": "datetime",
                                "type": "string"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/CurrencyCode"
                            },
                            "id": {
                                "$ref": "#/components/schemas/MandateId"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "remitter": {
                                "$ref": "#/components/schemas/GetDDRemitter"
                            },
                            "user": {
                                "$ref": "#/components/schemas/PaymentUser"
                            }
                        },
                        "required": [
                            "id",
                            "currency",
                            "remitter",
                            "beneficiary",
                            "created_at"
                        ],
                        "type": "object"
                    }
                ]
            },
            "GetDDMandateFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetDDMandateCommon"
                    },
                    {
                        "properties": {
                            "failed_at": {
                                "description": "The date and time the mandate authorization failed at.",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/MandateFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/MandateFailureStage"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "failed_at",
                            "failure_stage",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Failed"
            },
            "GetDDMandateRevoked": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetDDMandateCommon"
                    },
                    {
                        "properties": {
                            "authorized_at": {
                                "description": "The date and time the mandate was authorized at.",
                                "format": "datetime",
                                "type": "string"
                            },
                            "revocation_reason": {
                                "description": "The reason that the mandate was revoked.",
                                "type": "string"
                            },
                            "revocation_source": {
                                "$ref": "#/components/schemas/RevocationSource"
                            },
                            "revoked_at": {
                                "description": "The date and time the mandate was revoked at.",
                                "format": "datetime",
                                "type": "string"
                            },
                            "statement_reference": {
                                "description": "Reference set on the mandate.",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "revoked"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "revocation_source",
                            "authorized_at",
                            "revoked_at",
                            "statement_reference"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Revoked"
            },
            "GetDDRemitter": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "preselected"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/Remitter"
                    }
                ],
                "description": "Details of the individual for whom the DD is being created.",
                "title": "Direct Debit Remitter"
            },
            "GetMandate": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "commercial": "#/components/schemas/GetMandateWithUserDetails",
                                "direct_debit": "#/components/schemas/GetDDMandate",
                                "sweeping": "#/components/schemas/GetMandateWithUserDetails"
                            },
                            "propertyName": "type"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetMandateWithUserDetails"
                            },
                            {
                                "$ref": "#/components/schemas/GetDDMandate"
                            }
                        ]
                    }
                ]
            },
            "GetMandateBeneficiaryReference": {
                "description": "The auto-generated reference for the mandate. Read more about references [here](https://docs.truelayer.com/docs/recurring-payment-references-reconciliation)",
                "title": "Reference",
                "type": "string"
            },
            "GetMandateDestinationExternalAccount": {
                "description": "The routing information for an external bank account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder.\n",
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/PaymentAccountIdentifier"
                    },
                    "reference": {
                        "$ref": "#/components/schemas/GetMandateBeneficiaryReference"
                    },
                    "type": {
                        "description": "The type of destination.",
                        "enum": [
                            "external_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "account_holder_name",
                    "account_identifier"
                ],
                "title": "External Account",
                "type": "object"
            },
            "GetMandateDestinationMerchantAccount": {
                "description": "The identifier for a TrueLayer's merchant account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the beneficiary, which displays in the remitter's bank statement.\nIf unspecified, the API uses the account owner name associated with the selected merchant account.\n",
                        "type": "string"
                    },
                    "merchant_account_id": {
                        "$ref": "#/components/schemas/MerchantAccountId",
                        "description": "The unique identifier of a TrueLayer merchant account.\n"
                    },
                    "reference": {
                        "$ref": "#/components/schemas/GetMandateBeneficiaryReference"
                    },
                    "type": {
                        "description": "The type of destination.",
                        "enum": [
                            "merchant_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "merchant_account_id"
                ],
                "title": "Merchant Account",
                "type": "object"
            },
            "GetMandateWithUserDetails": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "sweeping",
                                    "commercial"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "authorization_required": "#/components/schemas/GetVRPMandateAuthorizationRequiredWithUserDetails",
                                "authorized": "#/components/schemas/GetVRPMandateAuthorizedWithUserDetails",
                                "authorizing": "#/components/schemas/GetVRPMandateAuthorizingWithUserDetails",
                                "failed": "#/components/schemas/GetVRPMandateFailedWithUserDetails",
                                "revoked": "#/components/schemas/GetVRPMandateRevokedWithUserDetails"
                            },
                            "propertyName": "status"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GetVRPMandateAuthorizationRequiredWithUserDetails"
                            },
                            {
                                "$ref": "#/components/schemas/GetVRPMandateAuthorizingWithUserDetails"
                            },
                            {
                                "$ref": "#/components/schemas/GetVRPMandateAuthorizedWithUserDetails"
                            },
                            {
                                "$ref": "#/components/schemas/GetVRPMandateFailedWithUserDetails"
                            },
                            {
                                "$ref": "#/components/schemas/GetVRPMandateRevokedWithUserDetails"
                            }
                        ]
                    }
                ],
                "title": "Mandate"
            },
            "GetPayment": {
                "discriminator": {
                    "mapping": {
                        "attempt_failed": "#/components/schemas/PaymentAttemptFailed",
                        "authorization_required": "#/components/schemas/PaymentAuthorizationRequired",
                        "authorized": "#/components/schemas/PaymentAuthorized",
                        "authorizing": "#/components/schemas/PaymentAuthorizing",
                        "executed": "#/components/schemas/PaymentExecuted",
                        "failed": "#/components/schemas/PaymentFailed",
                        "settled": "#/components/schemas/PaymentSettled"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentAuthorizationRequired"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentAuthorizing"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentAuthorized"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentExecuted"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentSettled"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentFailed"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentAttemptFailed"
                    }
                ]
            },
            "GetPaymentLink": {
                "discriminator": {
                    "mapping": {
                        "disabled": "#/components/schemas/PaymentLinkDisabled",
                        "disabling": "#/components/schemas/PaymentLinkDisabling",
                        "enabled": "#/components/schemas/PaymentLinkEnabled"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentLinkEnabled"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentLinkDisabling"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentLinkDisabled"
                    }
                ]
            },
            "GetPaymentLinkPayments": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/PaymentLinkPayment"
                        },
                        "type": "array"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "GetPaymentRefunds": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/PaymentRefund"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "GetPayoutAuthorizationFlowResponse": {
                "discriminator": {
                    "mapping": {
                        "completed": "#/components/schemas/PayoutAuthorizationFlowCompleted",
                        "created": "#/components/schemas/PayoutAuthorizationFlowCreated",
                        "started": "#/components/schemas/PayoutAuthorizationFlowStarted"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutAuthorizationFlowCreated"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutAuthorizationFlowStarted"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutAuthorizationFlowCompleted"
                    }
                ]
            },
            "GetTransactions": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Transaction"
                        },
                        "type": "array"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    }
                },
                "required": [
                    "items",
                    "pagination"
                ],
                "type": "object"
            },
            "GetVRPMandateAuthorizationRequiredWithUserDetails": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetVRPMandateCommonWithUserDetails"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorization_required"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A mandate yet to be authorized.\n\nThis is the first status for a mandate that requires further actions\nto be authorized.\n",
                "title": "Authorization Required"
            },
            "GetVRPMandateAuthorizedWithUserDetails": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetVRPMandateCommonWithUserDetails"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/MandateAuthorizationFlowFrozen"
                            },
                            "authorized_at": {
                                "description": "The date and time the mandate was authorized at",
                                "format": "datetime",
                                "type": "string"
                            },
                            "remitter": {
                                "$ref": "#/components/schemas/VRPPaymentRemitter"
                            },
                            "status": {
                                "enum": [
                                    "authorized"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "authorization_flow"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorized"
            },
            "GetVRPMandateAuthorizingWithUserDetails": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetVRPMandateCommonWithUserDetails"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MandateAuthorizationFlow"
                                    },
                                    {
                                        "properties": {
                                            "configuration": {
                                                "$ref": "#/components/schemas/MandateAuthorizationFlowConfiguration"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "status": {
                                "enum": [
                                    "authorizing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "authorization_flow"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorizing"
            },
            "GetVRPMandateCommonWithUserDetails": {
                "allOf": [
                    {
                        "properties": {
                            "beneficiary": {
                                "$ref": "#/components/schemas/GetVRPPaymentDestination"
                            },
                            "constraints": {
                                "$ref": "#/components/schemas/VRPConstraints"
                            },
                            "created_at": {
                                "description": "The date and time the mandate was created at.",
                                "format": "datetime",
                                "type": "string"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/CurrencyCode"
                            },
                            "id": {
                                "$ref": "#/components/schemas/MandateId"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "provider_selection": {
                                "$ref": "#/components/schemas/MandateProviderSelectionResponse"
                            },
                            "reference": {
                                "deprecated": true,
                                "description": "Reference set on the mandate. This field is deprecated. Please use the `statement_reference` field instead.",
                                "type": "string"
                            },
                            "statement_reference": {
                                "description": "Reference set on the mandate.",
                                "type": "string"
                            },
                            "user": {
                                "$ref": "#/components/schemas/PaymentUser"
                            }
                        },
                        "required": [
                            "id",
                            "currency",
                            "source",
                            "created_at",
                            "constraints",
                            "beneficiary",
                            "reference",
                            "provider_selection"
                        ],
                        "type": "object"
                    }
                ]
            },
            "GetVRPMandateFailedWithUserDetails": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetVRPMandateCommonWithUserDetails"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/MandateAuthorizationFlowFrozen"
                            },
                            "failed_at": {
                                "description": "The date and time the mandate authorization was failed at",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/MandateFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/MandateFailureStage"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "failure_stage",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Failed"
            },
            "GetVRPMandateRevokedWithUserDetails": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GetVRPMandateCommonWithUserDetails"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/MandateAuthorizationFlowFrozen"
                            },
                            "authorized_at": {
                                "description": "The date and time the mandate was authorized at",
                                "format": "datetime",
                                "type": "string"
                            },
                            "revocation_source": {
                                "$ref": "#/components/schemas/RevocationSource"
                            },
                            "revoked_at": {
                                "description": "The date and time the mandate was revoked at",
                                "format": "datetime",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "revoked"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "revocation_source",
                            "authorization_flow"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Revoked"
            },
            "GetVRPPaymentDestination": {
                "discriminator": {
                    "mapping": {
                        "external_account": "#/components/schemas/GetMandateDestinationExternalAccount",
                        "merchant_account": "#/components/schemas/GetMandateDestinationMerchantAccount"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/GetMandateDestinationMerchantAccount"
                    },
                    {
                        "$ref": "#/components/schemas/GetMandateDestinationExternalAccount"
                    }
                ]
            },
            "Icon": {
                "properties": {
                    "type": {
                        "description": "Configuration for the type of icon. Available options are:\n- `default`: Default icon with no background (SVG).\n- `extended`: Extended as a square with an appropriate background colour (SVG).\n- `extended_small`: Extended icon with 192x192 px size (JPEG).\n- `extended_medium`: Extended icon with 432x432 px size (JPEG).\n- `extended_large`: Extended icon jpeg with 864x864 px size (JPEG).\n",
                        "enum": [
                            "default",
                            "extended",
                            "extended_small",
                            "extended_medium",
                            "extended_large"
                        ],
                        "type": "string"
                    }
                },
                "title": "Icon",
                "type": "object"
            },
            "Image": {
                "oneOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "uri"
                                ],
                                "type": "string"
                            },
                            "uri": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "uri"
                        ],
                        "title": "URI",
                        "type": "object"
                    },
                    {
                        "properties": {
                            "data": {
                                "type": "string"
                            },
                            "media_type": {
                                "type": "string"
                            },
                            "type": {
                                "enum": [
                                    "base64"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "data",
                            "media_type"
                        ],
                        "title": "Base 64",
                        "type": "object"
                    }
                ]
            },
            "Limit": {
                "default": 25,
                "description": "Maximum number of items included in the returned window. Should be greater than 0 and less than 50. If not set, \na default of 25 is considered.\n",
                "example": 30,
                "maximum": 50,
                "minimum": 1,
                "type": "integer"
            },
            "ListMandates": {
                "properties": {
                    "items": {
                        "items": {
                            "allOf": [
                                {
                                    "properties": {
                                        "type": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type"
                                    ],
                                    "type": "object"
                                },
                                {
                                    "discriminator": {
                                        "mapping": {
                                            "commercial": "#/components/schemas/GetMandateWithUserDetails",
                                            "direct_debit": "#/components/schemas/GetDDMandate",
                                            "sweeping": "#/components/schemas/GetMandateWithUserDetails"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/GetMandateWithUserDetails"
                                        },
                                        {
                                            "$ref": "#/components/schemas/GetDDMandate"
                                        }
                                    ]
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    }
                },
                "required": [
                    "items",
                    "pagination"
                ],
                "type": "object"
            },
            "ListMerchantAccounts": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/MerchantAccount"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "Mandate": {
                "discriminator": {
                    "mapping": {
                        "commercial": "#/components/schemas/MandateVRPCommercial",
                        "direct_debit": "#/components/schemas/MandateDirectDebit",
                        "sweeping": "#/components/schemas/MandateVRPSweeping"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MandateVRPSweeping"
                    },
                    {
                        "$ref": "#/components/schemas/MandateVRPCommercial"
                    },
                    {
                        "$ref": "#/components/schemas/MandateDirectDebit"
                    }
                ],
                "title": "Mandate"
            },
            "MandateAuthorizationFailureStage": {
                "description": "The status the mandate was in when it failed.\n",
                "enum": [
                    "authorization_required",
                    "authorizing",
                    "authorized"
                ],
                "example": "authorizing",
                "type": "string"
            },
            "MandateAuthorizationFlow": {
                "description": "Contains information regarding the nature and the state of the authorization flow\n",
                "properties": {
                    "actions": {
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/MandateNextAction"
                            }
                        },
                        "required": [
                            "next"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "actions"
                ],
                "title": "Authorization Flow",
                "type": "object"
            },
            "MandateAuthorizationFlowAuthorizationFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MandateAuthorizationStatus"
                    },
                    {
                        "properties": {
                            "failure_reason": {
                                "$ref": "#/components/schemas/MandateFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/MandateAuthorizationFailureStage"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ]
                            }
                        },
                        "required": [
                            "failure_stage",
                            "failure_reason",
                            "status"
                        ],
                        "type": "object"
                    }
                ]
            },
            "MandateAuthorizationFlowAuthorizing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MandateAuthorizationStatus"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/MandateAuthorizationFlow"
                            },
                            "status": {
                                "enum": [
                                    "authorizing"
                                ]
                            }
                        },
                        "required": [
                            "authorization_flow"
                        ],
                        "type": "object"
                    }
                ]
            },
            "MandateAuthorizationFlowConfiguration": {
                "properties": {
                    "provider_selection": {
                        "description": "Can the UI render a provider selection screen?\n\nConfiguration options are available to constrain which providers should be shown.\n",
                        "type": "object"
                    },
                    "redirect": {
                        "description": "Can the UI redirect the end user to a third-party page?\n\nConfiguration options are available to constrain if TrueLayer's Hosted\nPayment Page should be leveraged.\n",
                        "properties": {
                            "return_uri": {
                                "description": "During the authorization flow the end user might be redirected\nto another page (e.g. bank website, TrueLayer's Hosted Payment Page).\nThis URL determines where they will be redirected back once they completed\nthe flow on the third-party's website.\n\nThis field is optional - if left unspecified, the end user will be redirected\nback to the default URI specified in your client settings in TrueLayer's Console.\n\n`return_uri`, if specified, must be one of the allowed `return_uri`s registered\nin TrueLayer's Console.\n",
                                "format": "url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "return_uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "provider_selection",
                    "redirect"
                ],
                "title": "Configuration",
                "type": "object"
            },
            "MandateAuthorizationFlowFrozen": {
                "description": "Information about the authorization flow the mandate went through.\n\nIf the mandate transitioned immediately to `authorized` or `failed`,\nthis field will be null.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/components/schemas/MandateAuthorizationFlowConfiguration"
                    }
                },
                "required": [
                    "configuration"
                ],
                "title": "Authorization Flow",
                "type": "object"
            },
            "MandateAuthorizationStatus": {
                "discriminator": {
                    "propertyName": "status"
                },
                "properties": {
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "MandateCreated": {
                "discriminator": {
                    "mapping": {
                        "authorization_required": "#/components/schemas/MandateCreatedAuthorizationRequired",
                        "authorizing": "#/components/schemas/MandateCreatedAuthorizing"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MandateCreatedAuthorizationRequired"
                    },
                    {
                        "$ref": "#/components/schemas/MandateCreatedAuthorizing"
                    }
                ]
            },
            "MandateCreatedAuthorizationRequired": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MandateCreatedCommon"
                    },
                    {
                        "properties": {
                            "resource_token": {
                                "description": "Token to use with `/mandate` endpoints.\n\nIt can be safely shared with a front end channel.\n",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "authorization_required"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "resource_token"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorization Required"
            },
            "MandateCreatedAuthorizing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MandateCreatedCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorizing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorizing"
            },
            "MandateCreatedCommon": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/MandateId"
                    },
                    "user": {
                        "description": "Details on the user of the created mandate.\n\nIf you didn't pass the `user_id` in the request body when you created the mandate, an ID is generated and returned in this response.\n",
                        "properties": {
                            "id": {
                                "description": "ID of the user",
                                "example": "b8d4dda0-ff2c-4d77-a6da-4615e4bad941",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "id",
                    "user"
                ],
                "type": "object"
            },
            "MandateDestinationExternalAccount": {
                "description": "The routing information for an external bank account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder. This should not be more than 18 characters and shouldn’t contain [special characters](https://docs.truelayer.com/docs/character-limitations-in-payments#special-characters)\n",
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/PaymentAccountIdentifier"
                    },
                    "type": {
                        "description": "The type of destination.",
                        "enum": [
                            "external_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "account_holder_name",
                    "account_identifier"
                ],
                "title": "External Account",
                "type": "object"
            },
            "MandateDestinationMerchantAccount": {
                "description": "The identifier for a TrueLayer's merchant account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the beneficiary, which displays in the remitter's bank statement.\nIf unspecified, the API uses the account owner name associated with the selected merchant account.\n",
                        "type": "string"
                    },
                    "merchant_account_id": {
                        "$ref": "#/components/schemas/MerchantAccountId",
                        "description": "The unique identifier of a TrueLayer merchant account.\n"
                    },
                    "type": {
                        "description": "The type of destination.",
                        "enum": [
                            "merchant_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "merchant_account_id"
                ],
                "title": "Merchant Account",
                "type": "object"
            },
            "MandateDirectDebit": {
                "properties": {
                    "beneficiary": {
                        "$ref": "#/components/schemas/DDBeneficiary"
                    },
                    "remitter": {
                        "$ref": "#/components/schemas/CreateDDRemitter"
                    },
                    "type": {
                        "description": "The type of mandate that will be created.\n\n> 📘\n>\n> Direct debits are in beta. Please contact us to learn more.\n",
                        "enum": [
                            "direct_debit"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "remitter",
                    "beneficiary"
                ],
                "title": "Direct Debit"
            },
            "MandateFailureReason": {
                "description": "A readable detail for why the mandate failed.\nExample values to expect:\n- `authorization_failed`\n- `provider_error`\n- `provider_rejected`\n- `internal_server_error`\n- `invalid_sort_code`\n- `invalid_request`\n- `expired`\n- `unknown_error`\n",
                "example": "authorization_failed",
                "type": "string"
            },
            "MandateFailureStage": {
                "description": "The status the mandate was in when it failed.\n",
                "enum": [
                    "authorization_required",
                    "authorized",
                    "authorizing",
                    "revoked"
                ],
                "example": "authorizing",
                "type": "string"
            },
            "MandateId": {
                "description": "Unique ID for the mandate",
                "example": "be6db706-68f1-4e9c-ab09-b83d8e3ea60d",
                "type": "string"
            },
            "MandateInitialPayment": {
                "properties": {
                    "created_at": {
                        "description": "Date and time the payment was created",
                        "example": "2021-12-25T15:00:00.000Z",
                        "format": "datetime",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique ID of the payment",
                        "example": "be6db706-68f1-4e9c-ab09-b83d8e3ea60d",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "created_at"
                ],
                "title": "Initial Payment",
                "type": "object"
            },
            "MandateNextAction": {
                "description": "The next action can be performed via `POST /v3/mandate/{id}/authorization_flow/action/{action_name}` -\ncheck its documentation for relevant examples.\n",
                "discriminator": {
                    "mapping": {
                        "consent": "#/components/schemas/ActionSpecConsent-2",
                        "provider_selection": "#/components/schemas/ActionSpecProviderSelection",
                        "redirect": "#/components/schemas/ActionSpecRedirect",
                        "wait": "#/components/schemas/ActionSpecWaitForOutcome-2"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ActionSpecProviderSelection"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecRedirect"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecWaitForOutcome-2"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecConsent-2"
                    }
                ]
            },
            "MandateProviderSelection": {
                "description": "Provider Selection",
                "discriminator": {
                    "mapping": {
                        "preselected": "#/components/schemas/MandateProviderSelectionPreselected",
                        "user_selected": "#/components/schemas/MandateProviderSelectionUserSelected"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MandateProviderSelectionUserSelected"
                    },
                    {
                        "$ref": "#/components/schemas/MandateProviderSelectionPreselected"
                    }
                ],
                "title": "Provider Selection",
                "type": "object"
            },
            "MandateProviderSelectionAction": {
                "discriminator": {
                    "mapping": {
                        "authorizing": "#/components/schemas/MandateAuthorizationFlowAuthorizing",
                        "failed": "#/components/schemas/MandateAuthorizationFlowAuthorizationFailed"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MandateAuthorizationFlowAuthorizing"
                    },
                    {
                        "$ref": "#/components/schemas/MandateAuthorizationFlowAuthorizationFailed"
                    }
                ]
            },
            "MandateProviderSelectionPreselected": {
                "description": "Preselected provider. Indicates that the provider for this payment is preselected.",
                "properties": {
                    "provider_id": {
                        "description": "The provider Id the PSU will use for this payment.",
                        "example": [
                            "eg-provider"
                        ],
                        "type": "string"
                    },
                    "remitter": {
                        "$ref": "#/components/schemas/Remitter"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "preselected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "provider_id"
                ],
                "title": "Preselected",
                "type": "object"
            },
            "MandateProviderSelectionResponse": {
                "description": "Provider Selection",
                "discriminator": {
                    "mapping": {
                        "preselected": "#/components/schemas/MandateProviderSelectionPreselected",
                        "user_selected": "#/components/schemas/MandateProviderSelectionUserSelectedResponse"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MandateProviderSelectionUserSelectedResponse"
                    },
                    {
                        "$ref": "#/components/schemas/MandateProviderSelectionPreselected"
                    }
                ],
                "title": "Provider Selection",
                "type": "object"
            },
            "MandateProviderSelectionUserSelected": {
                "description": "Indicates that the provider is to be selected from a collection",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/ProviderFilter"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "user_selected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "User selected",
                "type": "object"
            },
            "MandateProviderSelectionUserSelectedResponse": {
                "description": "Indicates that the provider is to be selected from a collection",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/ProviderFilter"
                    },
                    "provider_id": {
                        "description": "The provider Id the PSU will use for this payment. Will be populated when the provider selection has been submitted.",
                        "example": [
                            "eg-provider"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "user_selected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "User selected",
                "type": "object"
            },
            "MandateVRPCommercial": {
                "properties": {
                    "beneficiary": {
                        "$ref": "#/components/schemas/VRPPaymentDestination"
                    },
                    "provider_selection": {
                        "$ref": "#/components/schemas/MandateProviderSelection"
                    },
                    "reference": {
                        "deprecated": true,
                        "description": "A custom reference for the mandate, available for regulated customers only.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]{1,18}$`.\nIf not specified, one is automatically set to be the clients name, adjusted as needed.\nThis field is deprecated. Please use the `statement_reference` field instead.\n",
                        "example": "mandate-ref",
                        "maxLength": 18,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]{1,18}$",
                        "type": "string"
                    },
                    "statement_reference": {
                        "description": "A custom reference for the mandate, available for regulated customers only.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]{1,18}$`.\nIf not specified, one is automatically set to be the clients name, adjusted as needed.\n",
                        "example": "mandate-ref",
                        "maxLength": 18,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]{1,18}$",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of VRP mandate that will be created.\n",
                        "enum": [
                            "commercial"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "beneficiary",
                    "provider_selection"
                ],
                "title": "VRP Commercial"
            },
            "MandateVRPSweeping": {
                "properties": {
                    "beneficiary": {
                        "$ref": "#/components/schemas/VRPPaymentDestination"
                    },
                    "provider_selection": {
                        "$ref": "#/components/schemas/MandateProviderSelection"
                    },
                    "reference": {
                        "deprecated": true,
                        "description": "A custom reference for the mandate, available for regulated customers only.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]{1,18}$`.\nIf not specified, one is automatically set to be the clients name, adjusted as needed.\nThis field is deprecated. Please use the `statement_reference` field instead.\n",
                        "example": "mandate-ref",
                        "maxLength": 18,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]{1,18}$",
                        "type": "string"
                    },
                    "statement_reference": {
                        "description": "A custom reference for the mandate, available for regulated customers only.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]{1,18}$`.\nIf not specified, one is automatically set to be the clients name, adjusted as needed.\n",
                        "example": "mandate-ref",
                        "maxLength": 18,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]{1,18}$",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of VRP mandate that will be created.\n",
                        "enum": [
                            "sweeping"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "beneficiary",
                    "provider_selection"
                ],
                "title": "VRP Sweeping"
            },
            "MerchantAccount": {
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the account holder.\n\nIt must match your organisation's legal name.\n",
                        "type": "string"
                    },
                    "account_identifiers": {
                        "description": "The different identifiers you can use to route payments into this account\nover various payment schemes.\n\nThese identifiers can be used as beneficiary details if you need\nto deposit funds into your merchant account via manual bank\ntransfers.\n\nAll end users payments into your account should be authorized via\na payment with `merchant_account` as destination type.\n",
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "available_balance_in_minor": {
                        "$ref": "#/components/schemas/AvailableBalance"
                    },
                    "currency": {
                        "description": "The ISO 4217 code of the currency associated with the merchant account.\n\nMerchant accounts can only hold funds in a single currency.\n",
                        "enum": [
                            "GBP",
                            "EUR",
                            "PLN"
                        ],
                        "type": "string"
                    },
                    "current_balance_in_minor": {
                        "$ref": "#/components/schemas/CurrentBalance"
                    },
                    "id": {
                        "$ref": "#/components/schemas/MerchantAccountId"
                    }
                },
                "required": [
                    "id",
                    "currency",
                    "account_identifiers",
                    "available_balance_in_minor",
                    "current_balance_in_minor",
                    "account_holder_name"
                ],
                "type": "object"
            },
            "MerchantAccountCurrencyCode": {
                "enum": [
                    "GBP",
                    "EUR",
                    "PLN"
                ],
                "example": "GBP",
                "type": "string"
            },
            "MerchantAccountId": {
                "description": "Unique ID for the Merchant Account",
                "example": "AB8FA060-3F1B-4AE8-9692-4AA3131020D0",
                "format": "uuid",
                "type": "string"
            },
            "MerchantAccountIdResponse": {
                "description": "Unique ID for the Merchant Account\n    \n_**Note:** This field is required when OAuth2 token is used._\n",
                "type": "string"
            },
            "Metadata": {
                "additionalProperties": {
                    "maxLength": 500,
                    "type": "string"
                },
                "description": "Optional field for adding custom key-value data to a resource. This object can contain a maximum of 10 key-value pairs, each with a key with a maximum length of 40 characters and a non-null value with a maximum length of 500 characters.",
                "example": {
                    "prop1": "value1",
                    "prop2": "value2"
                },
                "maxProperties": 10,
                "type": "object"
            },
            "NextAction": {
                "description": "The next action can be performed via `POST /v3/payments/{id}/authorization_flow/action/{action_name}` -\ncheck its documentation for relevant examples.\n",
                "discriminator": {
                    "mapping": {
                        "consent": "#/components/schemas/ActionSpecConsent",
                        "form": "#/components/schemas/ActionSpecForm",
                        "provider_selection": "#/components/schemas/ActionSpecProviderSelection",
                        "redirect": "#/components/schemas/ActionSpecRedirect",
                        "retry": "#/components/schemas/ActionSpecRetry",
                        "scheme_selection": "#/components/schemas/ActionSpecSchemeSelection",
                        "user_account_selection": "#/components/schemas/ActionSpecUserAccountSelection",
                        "wait": "#/components/schemas/ActionSpecWaitForOutcome"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ActionSpecProviderSelection"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecSchemeSelection"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecRedirect"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecWaitForOutcome"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecForm"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecConsent"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecUserAccountSelection"
                    },
                    {
                        "$ref": "#/components/schemas/ActionSpecRetry"
                    }
                ]
            },
            "NextCursor": {
                "description": "cursor to be used as `cursor` query parameter to fetch the _next page_ in pagination-ready endpoints.",
                "example": "bWFuZGF0ZXM6MmUwNDk0MTMtN2I5Yi00OTFiLWE1OTgtNjkwMzU4NjNjNDJhCg==",
                "title": "next_cursor",
                "type": "string"
            },
            "OutboundPaymentFailureReason": {
                "description": "The reason the outbound payment failed.\nExample values to expect:\n- `insufficient_funds`\n- `scheme_error`\n- `server_error`\n- `blocked`\n- `returned`\n- `account_not_valid`: the bank account(s) associated to the given AIS consent is/are not valid. Note that this error is only relevant for `user_determined` beneficiaries.\n- `verification_name_mismatch`: the name provided as part of a payout verification does not match the one available on the connected bank account\n- `verification_transaction_not_found`: the transaction details provided as part of a payout verification are not found within the associated bank account's transactions\n\nClients should handle unexpected values gracefully as a unknown failure.\n",
                "example": "insufficient_funds",
                "type": "string"
            },
            "Pagination": {
                "description": "pagination object.\nOptional next cursor to use as query parameters to fetch the page next to the one fetched.\n",
                "example": {
                    "next_cursor": "bWFuZGF0ZXM6MmUwNDk0MTMK"
                },
                "properties": {
                    "next_cursor": {
                        "$ref": "#/components/schemas/NextCursor"
                    }
                },
                "title": "pagination",
                "type": "object"
            },
            "PaymentAccountIdentifier": {
                "description": "A unique account identifier for an external account.",
                "discriminator": {
                    "mapping": {
                        "bban": "#/components/schemas/AccountIdentifierBban",
                        "iban": "#/components/schemas/AccountIdentifierIban",
                        "nrb": "#/components/schemas/AccountIdentifierNrb",
                        "sort_code_account_number": "#/components/schemas/AccountIdentifierScan"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AccountIdentifierScan"
                    },
                    {
                        "$ref": "#/components/schemas/AccountIdentifierIban"
                    },
                    {
                        "$ref": "#/components/schemas/AccountIdentifierBban"
                    },
                    {
                        "$ref": "#/components/schemas/AccountIdentifierNrb"
                    }
                ],
                "title": "Account Identifier"
            },
            "PaymentAccountIdentifierResponse": {
                "description": "A unique account identifier for an external account.\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                "discriminator": {
                    "mapping": {
                        "iban": "#/components/schemas/AccountIdentifierIban",
                        "nrb": "#/components/schemas/AccountIdentifierNrb",
                        "sort_code_account_number": "#/components/schemas/AccountIdentifierScan"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AccountIdentifierScan"
                    },
                    {
                        "$ref": "#/components/schemas/AccountIdentifierIban"
                    },
                    {
                        "$ref": "#/components/schemas/AccountIdentifierNrb"
                    }
                ],
                "title": "Account Identifier"
            },
            "PaymentAttemptFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCommon"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PaymentAuthorizationFlow"
                                    },
                                    {
                                        "properties": {
                                            "configuration": {
                                                "$ref": "#/components/schemas/PaymentAuthorizationFlowConfiguration"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "failed_at": {
                                "description": "The date and time the payment was marked as failed.\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/PaymentFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/PaymentFailureStage"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/PaymentSource"
                            },
                            "status": {
                                "enum": [
                                    "attempt_failed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "failure_stage",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A failed payment attempt - it was authorized successfully, but the money did not move.\n",
                "title": "Attempt Failed"
            },
            "PaymentAuthorizationFlow": {
                "description": "Contains information regarding the nature and the state of the authorization flow \n",
                "properties": {
                    "actions": {
                        "properties": {
                            "adjacent": {
                                "$ref": "#/components/schemas/AdjacentActions"
                            },
                            "next": {
                                "$ref": "#/components/schemas/NextAction"
                            }
                        },
                        "required": [
                            "next"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "actions"
                ],
                "title": "Authorization Flow",
                "type": "object"
            },
            "PaymentAuthorizationFlowAuthorizationFailed": {
                "allOf": [
                    {
                        "properties": {
                            "failure_reason": {
                                "$ref": "#/components/schemas/PaymentFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/PaymentFailureStage"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "failure_stage",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Failed"
            },
            "PaymentAuthorizationFlowAuthorizing": {
                "allOf": [
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/PaymentAuthorizationFlow"
                            }
                        },
                        "required": [
                            "authorization_flow"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorizing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorizing"
            },
            "PaymentAuthorizationFlowConfiguration": {
                "properties": {
                    "consent": {
                        "description": "Can your UI capture the user's consent?\n\nThis parameter states whether your UI can explicitly capture and report the end user's consent for initiating the payment.\n\nIf you omit this, the API may restrict the available providers if explicit consent is required.\n",
                        "properties": {
                            "action_type": {
                                "description": "How you will capture consent as part of the authorisation flow:\n- `explicit` (default): The authorisation flow returns an explicit `consent` action for you to respond to at an appropriate moment in the flow.\n- `adjacent`: You provide the consent information alongside other actions in the flow. This enables the UI to combine capturing consent alongside with other actions, if you indicate consent is gathered when you respond to those actions. Note this is currently only supported on `form` actions.\n",
                                "enum": [
                                    "explicit",
                                    "adjacent"
                                ],
                                "type": "string"
                            },
                            "requirements": {
                                "$ref": "#/components/schemas/ConsentSupported"
                            }
                        },
                        "type": "object"
                    },
                    "form": {
                        "description": "Can your UI render form inputs for the user to interact with?\n\nSome providers require additional inputs, such as the remitter name and account details, to be provided before or during payment authorization. To facilitate this, the API may return a `form` action as part of the authorization flow, which means your UI must be able to collect the required inputs.\n\nThis parameter states whether your UI supports the `form` action. If you omit this parameter, the API returns only providers that don't require additional inputs. \n\nIf the provider has been preselected and requires additional inputs, this field is required.\n",
                        "properties": {
                            "input_types": {
                                "description": "The types of input that your UI can render a form to collect.",
                                "example": [
                                    "text"
                                ],
                                "items": {
                                    "$ref": "#/components/schemas/AdditionalInputType"
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "required": [
                            "input_types"
                        ],
                        "type": "object"
                    },
                    "provider_selection": {
                        "description": "Can your UI render a provider selection screen?\n\nIn payments where you set `provider_selection` as `user_selected`, your UI must be able to render a screen where the user can select their payments provider. Use the `provider_selection.filter` parameter to determine which providers display in your UI.\n\nThis parameter is required for payments with `user_selected` provider selection. For `preselected` provider selection, it's optional.\n",
                        "type": "object"
                    },
                    "redirect": {
                        "description": "Can your UI redirect the user to a third-party page?\n\nFor most providers, the user authorises the payment after they're redirected to their chosen provider's page. There, they can sign in with their credentials and approve the payment. This parameter states whether your UI can handle such a redirect.\n",
                        "properties": {
                            "direct_return_uri": {
                                "description": "Only applicable if you're regulated and have a direct return URI registered with UK providers.\n\nIf you're regulated, you can specify a `direct_return_uri` to attempt the authorization flow via a direct redirect from the provider authorization page to your without going via TrueLayer.\n\nWe recommend that your `return_uri` is a URI that can handle a non-direct return scenario. This ensures that if the `direct_return_uri` isn't registered with the user's chosen provider, the payment can still be authorized through a Truelayer domain.\n",
                                "format": "url",
                                "type": "string"
                            },
                            "return_uri": {
                                "description": "During the authorization flow the end user might be redirected to another page, such as a bank website or TrueLayer's Hosted Payment Page.\n\nThis URL determines where the API redirects the user to after they complete the flow on the third-party's website. You must register the `return_uri` in your [settings in Console](/docs/app-settings#allowed-redirect-uris).\n",
                                "format": "url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "return_uri"
                        ],
                        "type": "object"
                    },
                    "scheme_selection": {
                        "description": "Can your UI render a scheme selection screen?\n\nFor payments where you set `scheme_selection` as `user_selected`, your UI must be able to render a screen where the user can select their payments scheme.\n\nThis field is required for payments with `user_selected` scheme selection. For other scheme selection types, it's optional.\n",
                        "type": "object"
                    },
                    "user_account_selection": {
                        "description": "Can your UI render a user account selection screen?\n\nIf the user has previously consented to saving their bank account details with TrueLayer, they can choose from their saved accounts to speed up following payments.\n\nThis field states whether your UI can render a selection screen for these saved accounts. If you omit this, the user isn't presented with this option.\n",
                        "type": "object"
                    }
                },
                "title": "Configuration",
                "type": "object"
            },
            "PaymentAuthorizationFlowFrozen": {
                "description": "Information about the authorization flow the payment went through.\n\nIf the payment transitioned immediately to `authorized` or `failed`,\nthis field will be null.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/components/schemas/PaymentAuthorizationFlowConfiguration"
                    }
                },
                "required": [
                    "configuration"
                ],
                "title": "Authorization Flow",
                "type": "object"
            },
            "PaymentAuthorizationRequired": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorization_required"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A payment yet to be authorized.\n\nThis is the first status for a payment that requires further actions\nto be authorized.\n",
                "title": "Authorization Required"
            },
            "PaymentAuthorized": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCommon"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/PaymentAuthorizationFlowFrozen"
                            },
                            "creditable_at": {
                                "$ref": "#/components/schemas/CreditableAt"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/PaymentSource"
                            },
                            "status": {
                                "enum": [
                                    "authorized"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "An authorized payment - no more actions required, waiting for outcome.\n",
                "title": "Authorized"
            },
            "PaymentAuthorizing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCommon"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PaymentAuthorizationFlow"
                                    },
                                    {
                                        "properties": {
                                            "configuration": {
                                                "$ref": "#/components/schemas/PaymentAuthorizationFlowConfiguration"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "status": {
                                "enum": [
                                    "authorizing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "authorization_flow"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A payment yet to be authorized.\n\nThis is the first status for a payment that requires further actions\nto be authorized.\n",
                "title": "Authorizing"
            },
            "PaymentCommon": {
                "properties": {
                    "amount_in_minor": {
                        "minimum": 1,
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "The date and time the payment was created at.\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                        "format": "datetime",
                        "type": "string"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CurrencyCode"
                    },
                    "id": {
                        "$ref": "#/components/schemas/PaymentId"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "payment_method": {
                        "$ref": "#/components/schemas/PaymentMethodResponse"
                    },
                    "related_products": {
                        "$ref": "#/components/schemas/RelatedProducts"
                    },
                    "sub_merchants": {
                        "$ref": "#/components/schemas/PaymentSubMerchants"
                    },
                    "user": {
                        "$ref": "#/components/schemas/PaymentUser"
                    }
                },
                "required": [
                    "id",
                    "amount_in_minor",
                    "currency",
                    "beneficiary",
                    "payment_method"
                ],
                "type": "object"
            },
            "PaymentCreatedAuthorizationRequired": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCreatedCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorization_required"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorization Required"
            },
            "PaymentCreatedAuthorized": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCreatedCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorized"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorized"
            },
            "PaymentCreatedAuthorizing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCreatedCommon"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/PaymentAuthorizationFlow",
                                "description": "Contains information regarding the nature and the state of the authorization flow. This object will have a value only if in the request body the authorization_flow field was specified."
                            },
                            "status": {
                                "enum": [
                                    "authorizing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "authorization_flow"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorizing"
            },
            "PaymentCreatedCommon": {
                "properties": {
                    "id": {
                        "description": "ID of the payment",
                        "example": "0cd1b0f7-71bc-4d24-b209-95259dadcc20",
                        "type": "string"
                    },
                    "resource_token": {
                        "description": "A payment token in JWT format, with a limited scope that is authorised to be used with a single payment",
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/PaymentUser",
                        "description": "Details on the user of the created payment. If the user_id was not passed in the request body while creating\nthe payment, an ID will be generated and returned in this response\n"
                    }
                },
                "required": [
                    "id",
                    "user",
                    "resource_token"
                ],
                "title": "Newly created payment",
                "type": "object"
            },
            "PaymentCreatedFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCreatedCommon"
                    },
                    {
                        "properties": {
                            "failure_reason": {
                                "$ref": "#/components/schemas/PaymentFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/PaymentFailureStage"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "failure_stage",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Failed"
            },
            "PaymentDestination": {
                "discriminator": {
                    "mapping": {
                        "external_account": "#/components/schemas/PaymentDestinationExternalAccount",
                        "merchant_account": "#/components/schemas/PaymentDestinationMerchantAccount"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentDestinationMerchantAccount"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentDestinationExternalAccount"
                    }
                ]
            },
            "PaymentDestinationExternalAccount": {
                "description": "The routing information for an external bank account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder. Note that some providers have an 18-character upper limit for this.\npattern: `^[^\\(\\)]+$`\n",
                        "example": "Ben Eficiary",
                        "maxLength": 40,
                        "pattern": "^[^\\(\\)]+$",
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/PaymentAccountIdentifier"
                    },
                    "reference": {
                        "description": "A reference for the payment.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$`\n",
                        "example": "payment-ref",
                        "maxLength": 18,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of destination.",
                        "enum": [
                            "external_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "account_holder_name",
                    "account_identifier",
                    "reference"
                ],
                "title": "External Account",
                "type": "object"
            },
            "PaymentDestinationExternalAccountResponse": {
                "description": "The routing information for an external bank account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder.\n",
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/PaymentAccountIdentifierResponse"
                    },
                    "reference": {
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of destination.",
                        "enum": [
                            "external_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "account_holder_name",
                    "reference"
                ],
                "title": "External Account",
                "type": "object"
            },
            "PaymentDestinationMerchantAccount": {
                "description": "The identifier for a TrueLayer merchant account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the beneficiary, which displays in the remitter's bank statement.\nIf unspecified, the API uses the account owner name associated with the selected merchant account.\npattern: `^[^\\(\\)]+$`\n",
                        "example": "Ben Eficiary",
                        "maxLength": 40,
                        "pattern": "^[^\\(\\)]+$",
                        "type": "string"
                    },
                    "merchant_account_id": {
                        "$ref": "#/components/schemas/MerchantAccountId",
                        "description": "The unique identifier of a TrueLayer merchant account."
                    },
                    "reference": {
                        "description": "A reference for the payment. Not visible to the remitter.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$`\n",
                        "example": "payment-ref",
                        "maxLength": 100,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$",
                        "type": "string"
                    },
                    "statement_reference": {
                        "description": "Payment reference that should be set on the end user's statement. Not all banks support setting such a reference, this value will be used wherever possible.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$`\n",
                        "example": "payment-ref",
                        "maxLength": 18,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of destination.",
                        "enum": [
                            "merchant_account"
                        ],
                        "type": "string"
                    },
                    "verification": {
                        "$ref": "#/components/schemas/Verification",
                        "description": "The verification of the remitter info. If specified, the API performs additional checks on the remitter information.\n"
                    }
                },
                "required": [
                    "type",
                    "merchant_account_id"
                ],
                "title": "Merchant Account",
                "type": "object"
            },
            "PaymentDestinationMerchantAccountResponse": {
                "description": "The identifier for a TrueLayer's merchant account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the beneficiary, which displays in the remitter's bank statement.\nIf unspecified, the API uses the account owner name associated with the selected merchant account.\n",
                        "type": "string"
                    },
                    "merchant_account_id": {
                        "$ref": "#/components/schemas/MerchantAccountIdResponse",
                        "description": "The unique identifier of a TrueLayer merchant account.\n\n_**Note:** This field is required when OAuth2 token is used._\n"
                    },
                    "reference": {
                        "description": "A reference for the payment. Not visible to the remitter.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$`\n",
                        "example": "payment-ref",
                        "maxLength": 100,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$",
                        "type": "string"
                    },
                    "statement_reference": {
                        "description": "Payment reference that should be set on the end user's statement. Not all banks support setting such a reference, this value will be used wherever possible.\npattern: `^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$`\n",
                        "example": "payment-ref",
                        "maxLength": 18,
                        "pattern": "^[a-zA-Z0-9-:()\\.,'\\+ \\?\\/]+$",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of destination.",
                        "enum": [
                            "merchant_account"
                        ],
                        "type": "string"
                    },
                    "verification": {
                        "$ref": "#/components/schemas/Verification",
                        "description": "The verification of the remitter info. If specified, the API performs additional checks on the remitter information. \n"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Merchant Account",
                "type": "object"
            },
            "PaymentDestinationResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentDestinationMerchantAccountResponse"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentDestinationExternalAccountResponse"
                    }
                ]
            },
            "PaymentDetails": {
                "properties": {
                    "amount_in_minor": {
                        "description": "A 'cent' value representing the amount. eg 100 == 1GBP or 100 = 1EUR",
                        "example": 1,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CurrencyCode"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "payment_method": {
                        "$ref": "#/components/schemas/PaymentLinkMethod"
                    },
                    "user": {
                        "$ref": "#/components/schemas/PaymentLinkUserCreate"
                    }
                },
                "required": [
                    "amount_in_minor",
                    "currency",
                    "payment_method",
                    "user"
                ],
                "title": "Payment Details",
                "type": "object"
            },
            "PaymentExecuted": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCommon"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/PaymentAuthorizationFlowFrozen"
                            },
                            "creditable_at": {
                                "$ref": "#/components/schemas/CreditableAt"
                            },
                            "disputed_at": {
                                "$ref": "#/components/schemas/DisputedAt"
                            },
                            "disputed_reason": {
                                "$ref": "#/components/schemas/DisputedReason"
                            },
                            "executed_at": {
                                "description": "The date and time the payment executed at.\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                                "format": "datetime",
                                "type": "string"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/PaymentSource"
                            },
                            "settlement_stalled_at": {
                                "$ref": "#/components/schemas/SettlementStalledAt"
                            },
                            "status": {
                                "enum": [
                                    "executed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "An executed payment.\n",
                "title": "Executed"
            },
            "PaymentFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCommon"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/PaymentAuthorizationFlowFrozen"
                            },
                            "creditable_at": {
                                "$ref": "#/components/schemas/CreditableAt"
                            },
                            "failed_at": {
                                "description": "The date and time the payment was marked as failed.\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/PaymentFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/PaymentFailureStage"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/PaymentSource"
                            },
                            "reversal_reason": {
                                "$ref": "#/components/schemas/ReversalReason"
                            },
                            "reversed_at": {
                                "$ref": "#/components/schemas/ReversedAt"
                            },
                            "settlement_stalled_at": {
                                "$ref": "#/components/schemas/SettlementStalledAt"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "failure_stage",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A failed payment - it was authorized successfully, but the money did not move.\n",
                "title": "Failed"
            },
            "PaymentFailureReason": {
                "description": "The <a href=\"https://docs.truelayer.com/docs/single-payment-statuses#failure-reasons\" target=\"_blank\">reason</a> that the payment failed.\n",
                "example": "provider_rejected",
                "type": "string"
            },
            "PaymentFailureStage": {
                "description": "The status the payment was in when it failed.\n",
                "enum": [
                    "authorization_required",
                    "authorizing",
                    "authorized",
                    "executed"
                ],
                "example": "authorizing",
                "type": "string"
            },
            "PaymentId": {
                "description": "Unique ID for the Payment",
                "example": "0afd1f6a-f611-48ce-9488-321129bb3a70",
                "type": "string"
            },
            "PaymentLinkBankTransferProviderSelection": {
                "description": "Provider Selection",
                "discriminator": {
                    "mapping": {
                        "preselected": "#/components/schemas/PaymentLinkProviderSelectionPreselected",
                        "user_selected": "#/components/schemas/ProviderSelectionUserSelected"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ProviderSelectionUserSelected"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentLinkProviderSelectionPreselected"
                    }
                ],
                "title": "Provider Selection",
                "type": "object"
            },
            "PaymentLinkCommon": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/PaymentLinkId"
                    },
                    "type": {
                        "description": "The type of the Payment link",
                        "enum": [
                            "single_payment"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "type": "object"
            },
            "PaymentLinkDisabled": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentLinkCommon"
                    },
                    {
                        "properties": {
                            "disabled_reason": {
                                "$ref": "#/components/schemas/PaymentLinkDisabledReason"
                            },
                            "status": {
                                "enum": [
                                    "disabled"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "disabled_reason"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A disabled payment link.\n\nThis is the final status for a payment link.\nNo more payments can be made.\n",
                "title": "Disabled"
            },
            "PaymentLinkDisabledReason": {
                "description": "The reason the payment link is disabled.\nExample values to expect:\n- `expired`\n- `fulfilled`\n\nClients should handle unexpected values gracefully.\n",
                "example": "expired",
                "type": "string"
            },
            "PaymentLinkDisabling": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentLinkCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "disabling"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A payment link that can't be used anymore.\nThe link will likely transition to disabled soon.\n\nA link reaching this status is condition based.\nNot every link will reach this status.\nThis status would come after enabled, and before disabled.\n",
                "title": "Disabling"
            },
            "PaymentLinkEnabled": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentLinkCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "enabled"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "An enabled payment link.\n\nThis is the first status for a payment link.\n",
                "title": "Enabled"
            },
            "PaymentLinkId": {
                "description": "Unique ID for the Payment Link",
                "example": "aKiW35RWSyF",
                "type": "string"
            },
            "PaymentLinkMethod": {
                "discriminator": {
                    "mapping": {
                        "bank_transfer": "#/components/schemas/PaymentLinkPaymentMethodBankTransfer"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentLinkPaymentMethodBankTransfer"
                    }
                ],
                "title": "Payment Method",
                "type": "object"
            },
            "PaymentLinkPayment": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentLinkPaymentPending"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentLinkPaymentSucceeded"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentLinkPaymentFailed"
                    }
                ]
            },
            "PaymentLinkPaymentFailed": {
                "allOf": [
                    {
                        "properties": {
                            "created_at": {
                                "description": "The date and time the payment was created at.\n",
                                "format": "datetime",
                                "type": "string"
                            },
                            "id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ],
                "required": [
                    "id",
                    "status",
                    "created_at"
                ],
                "title": "Failed",
                "type": "object"
            },
            "PaymentLinkPaymentMethodBankTransfer": {
                "properties": {
                    "beneficiary": {
                        "$ref": "#/components/schemas/PaymentDestination"
                    },
                    "provider_selection": {
                        "$ref": "#/components/schemas/PaymentLinkBankTransferProviderSelection"
                    },
                    "type": {
                        "description": "The type of payment method.",
                        "enum": [
                            "bank_transfer"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "provider_selection",
                    "beneficiary"
                ],
                "title": "Bank Transfer",
                "type": "object"
            },
            "PaymentLinkPaymentPending": {
                "properties": {
                    "created_at": {
                        "description": "The date and time the payment was created at.\n",
                        "format": "datetime",
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/PaymentId"
                    },
                    "status": {
                        "enum": [
                            "pending"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "created_at"
                ],
                "title": "Pending",
                "type": "object"
            },
            "PaymentLinkPaymentSucceeded": {
                "properties": {
                    "created_at": {
                        "description": "The date and time the payment was created at.\n",
                        "format": "datetime",
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/PaymentId"
                    },
                    "status": {
                        "enum": [
                            "succeeded"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "created_at"
                ],
                "title": "Succeeded",
                "type": "object"
            },
            "PaymentLinkProviderSelectionPreselected": {
                "description": "Preselected provider. Indicates that the provider for this payment is preselected.",
                "properties": {
                    "provider_id": {
                        "description": "The provider Id the PSU will use for this payment.",
                        "example": "eg-provider",
                        "type": "string"
                    },
                    "remitter": {
                        "$ref": "#/components/schemas/Remitter"
                    },
                    "scheme_id": {
                        "description": "The id of the scheme to make the payment over.",
                        "example": "faster_payments_service",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "preselected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "provider_id",
                    "scheme_id"
                ],
                "title": "Preselected",
                "type": "object"
            },
            "PaymentLinkUserCreate": {
                "description": "Details of the end user who is making the payment.",
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/Address",
                        "description": "The physical address of your end user.\nOnly one of `address`/`user_input_config.address` can be provided.\n"
                    },
                    "date_of_birth": {
                        "description": "The date of birth of your end user, in YYYY-MM-DD format.\n",
                        "example": "1990-01-31",
                        "format": "date",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of your end user according to [RFC 2822](https://www.rfc-editor.org/rfc/rfc2822).\none of `email`/`phone`/`user_input_config.email`/`user_input_config.phone`is required.\n",
                        "example": "remi.terr@aol.com",
                        "format": "email",
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/UserId",
                        "description": "A unique identifier for the user. If you don’t provide this, TrueLayer generates a value in the response. You can use the same value for multiple payments to indicate a returning user."
                    },
                    "name": {
                        "description": "This is the full first and last name of your end user (not initials).\none of `name`/`user_input_config.name` is required.\npattern: `^[^\\(\\)]+$`\n",
                        "example": "Remi Terr",
                        "pattern": "^[^\\(\\)]+$",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The phone number of your end user in formats recommended by [ITU](https://www.itu.int/oth/T0202.aspx?parent=T0202). The country calling code must be included and prefixed with a `+`.\none of `email`/`phone`/`user_input_config.email`/`user_input_config.phone`is required.\n",
                        "example": "+447777777777",
                        "format": "phone",
                        "type": "string"
                    }
                },
                "title": "User",
                "type": "object"
            },
            "PaymentMethod": {
                "discriminator": {
                    "mapping": {
                        "bank_transfer": "#/components/schemas/PaymentMethodBankTransfer",
                        "mandate": "#/components/schemas/PaymentMethodMandate"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentMethodBankTransfer"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentMethodMandate"
                    }
                ],
                "title": "Payment Method",
                "type": "object"
            },
            "PaymentMethodBankTransfer": {
                "properties": {
                    "beneficiary": {
                        "$ref": "#/components/schemas/PaymentDestination"
                    },
                    "provider_selection": {
                        "$ref": "#/components/schemas/BankTransferProviderSelection"
                    },
                    "retry": {
                        "$ref": "#/components/schemas/BankTransferRetry"
                    },
                    "type": {
                        "description": "The type of payment method.",
                        "enum": [
                            "bank_transfer"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "provider_selection",
                    "beneficiary"
                ],
                "title": "Bank Transfer",
                "type": "object"
            },
            "PaymentMethodBankTransferResponse": {
                "properties": {
                    "beneficiary": {
                        "$ref": "#/components/schemas/PaymentDestinationResponse"
                    },
                    "provider_selection": {
                        "$ref": "#/components/schemas/BankTransferProviderSelectionResponse"
                    },
                    "retry": {
                        "$ref": "#/components/schemas/BankTransferRetryResponse"
                    },
                    "type": {
                        "description": "The type of payment method.",
                        "enum": [
                            "bank_transfer"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "provider_selection",
                    "beneficiary"
                ],
                "title": "Bank Transfer",
                "type": "object"
            },
            "PaymentMethodBankTransferWebhook": {
                "properties": {
                    "provider_id": {
                        "description": "The provider Id the PSU will use for this payment. Can be `null` if the payment failed before successful provider selection.",
                        "example": [
                            "eg-provider"
                        ],
                        "type": "string"
                    },
                    "scheme_id": {
                        "description": "The id of the scheme to make the payment over. Can be `null` if the payment failed before successful provider selection.",
                        "example": [
                            "payment_scheme"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of payment method.",
                        "enum": [
                            "bank_transfer"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Bank Transfer",
                "type": "object"
            },
            "PaymentMethodMandate": {
                "properties": {
                    "mandate_id": {
                        "description": "The identifier of the mandate.\n",
                        "type": "string"
                    },
                    "reference": {
                        "description": "Useful for reconciliation needs, it can only be set for mandates with a `beneficiary` type of `external_account`. Recommended max 18 alphanumeric characters.\n",
                        "type": "string"
                    },
                    "retry": {
                        "$ref": "#/components/schemas/Retry"
                    },
                    "type": {
                        "description": "The type of payment method.",
                        "enum": [
                            "mandate"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "mandate_id"
                ],
                "title": "Mandate",
                "type": "object"
            },
            "PaymentMethodResponse": {
                "discriminator": {
                    "mapping": {
                        "bank_transfer": "#/components/schemas/PaymentMethodBankTransferResponse",
                        "mandate": "#/components/schemas/PaymentMethodMandate"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentMethodBankTransferResponse"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentMethodMandate"
                    }
                ],
                "title": "Payment Method",
                "type": "object"
            },
            "PaymentMethodWebhook": {
                "discriminator": {
                    "mapping": {
                        "bank_transfer": "#/components/schemas/PaymentMethodBankTransferWebhook",
                        "mandate": "#/components/schemas/PaymentMethodMandate"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentMethodBankTransferWebhook"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentMethodMandate"
                    }
                ],
                "title": "Payment Method",
                "type": "object"
            },
            "PaymentRefund": {
                "discriminator": {
                    "mapping": {
                        "authorized": "#/components/schemas/PaymentRefundAuthorized",
                        "executed": "#/components/schemas/PaymentRefundExecuted",
                        "failed": "#/components/schemas/PaymentRefundFailed",
                        "pending": "#/components/schemas/PaymentRefundPending"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentRefundPending"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentRefundAuthorized"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentRefundExecuted"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentRefundFailed"
                    }
                ]
            },
            "PaymentRefundAuthorized": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentRefundCommon"
                    },
                    {
                        "properties": {
                            "created_at": {
                                "description": "The date and time the refund was created",
                                "format": "datetime",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "authorized"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "created_at"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The refund has been authorized (i.e. there are enough funds) and\nit has been submitted to the payment scheme for execution.\n",
                "title": "Authorized",
                "type": "object"
            },
            "PaymentRefundCommon": {
                "properties": {
                    "amount_in_minor": {
                        "description": "A 'cent' value representing the amount. eg 100 == 1GBP",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CurrencyCode"
                    },
                    "id": {
                        "$ref": "#/components/schemas/PaymentRefundId"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "reference": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "amount_in_minor",
                    "currency",
                    "reference"
                ],
                "type": "object"
            },
            "PaymentRefundCreated": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/PaymentRefundId"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "PaymentRefundExecuted": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentRefundCommon"
                    },
                    {
                        "properties": {
                            "created_at": {
                                "description": "The date and time the refund was created",
                                "format": "datetime",
                                "type": "string"
                            },
                            "executed_at": {
                                "description": "The date and time the refund transitioned to `executed`",
                                "format": "datetime",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "executed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "created_at",
                            "executed_at"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The refund was executed - the funds have left your merchant account.\n",
                "title": "Executed",
                "type": "object"
            },
            "PaymentRefundFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentRefundCommon"
                    },
                    {
                        "properties": {
                            "created_at": {
                                "description": "The date and time the refund was created",
                                "format": "datetime",
                                "type": "string"
                            },
                            "executed_at": {
                                "description": "The date and time the refund transitioned to `executed`",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failed_at": {
                                "description": "The date and time the refund transitioned to `failed`",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/OutboundPaymentFailureReason"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "created_at",
                            "failed_at",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The refund failed - the funds have not left your merchant account.\n",
                "title": "Failed",
                "type": "object"
            },
            "PaymentRefundId": {
                "description": "Unique ID for the refund",
                "example": "43d12d0f-d775-410f-aaff-482200c17017",
                "type": "string"
            },
            "PaymentRefundPending": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentRefundCommon"
                    },
                    {
                        "properties": {
                            "created_at": {
                                "description": "The date and time the refund was created",
                                "format": "datetime",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "pending"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "created_at"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The refund has been created against TrueLayer's API but\nit has not yet been authorized and sent to the payment scheme for execution.\n",
                "title": "Pending",
                "type": "object"
            },
            "PaymentScheme": {
                "enum": [
                    "faster_payments_service",
                    "sepa_credit_transfer",
                    "sepa_credit_transfer_instant",
                    "polish_domestic_standard",
                    "polish_domestic_express",
                    "norwegian_domestic_credit_transfer"
                ],
                "type": "string"
            },
            "PaymentSettled": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentCommon"
                    },
                    {
                        "properties": {
                            "authorization_flow": {
                                "$ref": "#/components/schemas/PaymentAuthorizationFlowFrozen"
                            },
                            "creditable_at": {
                                "$ref": "#/components/schemas/CreditableAt"
                            },
                            "disputed_at": {
                                "$ref": "#/components/schemas/DisputedAt"
                            },
                            "disputed_reason": {
                                "$ref": "#/components/schemas/DisputedReason"
                            },
                            "executed_at": {
                                "description": "Date and time the payment executed.\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                                "format": "datetime",
                                "type": "string"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/SettledPaymentSource",
                                "description": "Source of funds.\n\n_**Note:** This field is required when OAuth2 token is used._\n"
                            },
                            "reversal_reason": {
                                "$ref": "#/components/schemas/ReversalReason"
                            },
                            "reversed_at": {
                                "$ref": "#/components/schemas/ReversedAt"
                            },
                            "settled_at": {
                                "description": "Date and time the payment settled.\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                                "format": "datetime",
                                "type": "string"
                            },
                            "settlement_stalled_at": {
                                "$ref": "#/components/schemas/SettlementStalledAt"
                            },
                            "status": {
                                "enum": [
                                    "settled"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "executed_at"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A settled payment. i.e. the funds have settled into the beneficiary account. Status only available for payments into merchant accounts.\n",
                "title": "Settled"
            },
            "PaymentSource": {
                "description": "Information about the source of funds,  if available from the remitter's bank. Account identifiers will be those provided by the bank.",
                "properties": {
                    "account_holder_name": {
                        "type": "string"
                    },
                    "account_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "account_holder_name",
                    "account_identifiers"
                ],
                "title": "Payment source",
                "type": "object"
            },
            "PaymentsProvider": {
                "properties": {
                    "bg_color": {
                        "description": "pattern: `^#[A-F0-9]{6}$`",
                        "example": "#000000",
                        "pattern": "^#[A-F0-9]{6}$",
                        "type": "string"
                    },
                    "bin_ranges": {
                        "$ref": "#/components/schemas/ProviderBins"
                    },
                    "capabilities": {
                        "$ref": "#/components/schemas/ProviderCapabilities"
                    },
                    "country_code": {
                        "$ref": "#/components/schemas/CountryCode"
                    },
                    "display_name": {
                        "example": "Bank Name",
                        "type": "string"
                    },
                    "icon_uri": {
                        "example": "https://truelayer-provider-assets.s3.amazonaws.com/global/icon/generic.svg",
                        "format": "uri",
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/ProviderId"
                    },
                    "logo_uri": {
                        "example": "https://truelayer-provider-assets.s3.amazonaws.com/global/logos/generic.svg",
                        "format": "uri",
                        "type": "string"
                    },
                    "swift_code": {
                        "description": "ISO 9362 international standard for Business Identifier Codes (BIC)",
                        "example": "MOCKGB01XXX",
                        "pattern": "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "capabilities"
                ],
                "type": "object"
            },
            "PaymentsProvidersCapabilities": {
                "description": "Describes the capabilities of this provider.\nBy default, will only display capabilities in `general_availability` or `public beta`.\nIf `client_id` is available, will display capabilities available to the client.\n",
                "properties": {
                    "mandates": {
                        "description": "Recurring payment mandate creation capabilities.",
                        "properties": {
                            "vrp_commercial": {
                                "description": "Mandates for the commercial use case.",
                                "properties": {
                                    "availability": {
                                        "$ref": "#/components/schemas/ProviderAvailability",
                                        "description": "Provider availability"
                                    },
                                    "release_channel": {
                                        "$ref": "#/components/schemas/ProviderReleaseChannel",
                                        "description": "Release channel of the provider and capability."
                                    }
                                },
                                "required": [
                                    "release_channel"
                                ],
                                "type": "object"
                            },
                            "vrp_sweeping": {
                                "description": "Mandates for the sweeping use case.",
                                "properties": {
                                    "availability": {
                                        "$ref": "#/components/schemas/ProviderAvailability",
                                        "description": "Provider availability"
                                    },
                                    "release_channel": {
                                        "$ref": "#/components/schemas/ProviderReleaseChannel",
                                        "description": "Release channel of the provider and capability."
                                    }
                                },
                                "required": [
                                    "release_channel"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "payments": {
                        "description": "Single payment initiation capabilities.",
                        "properties": {
                            "bank_transfer": {
                                "description": "Bank transfer capability.",
                                "properties": {
                                    "availability": {
                                        "$ref": "#/components/schemas/ProviderAvailability",
                                        "description": "Provider availability"
                                    },
                                    "release_channel": {
                                        "$ref": "#/components/schemas/ProviderReleaseChannel",
                                        "description": "Release channel of the provider and capability."
                                    },
                                    "schemes": {
                                        "description": "List of payment schemes supported by this provider.",
                                        "items": {
                                            "$ref": "#/components/schemas/PaymentsProvidersScheme"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "release_channel",
                                    "schemes"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PaymentsProviderScheme": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/SchemeId"
                    }
                },
                "required": [
                    "id"
                ],
                "title": "Scheme",
                "type": "object"
            },
            "PaymentsProvidersProvider": {
                "properties": {
                    "bg_color": {
                        "description": "pattern: `^#[A-F0-9]{6}$`",
                        "example": "#000000",
                        "pattern": "^#[A-F0-9]{6}$",
                        "type": "string"
                    },
                    "bin_ranges": {
                        "$ref": "#/components/schemas/ProviderBins"
                    },
                    "capabilities": {
                        "$ref": "#/components/schemas/PaymentsProvidersCapabilities"
                    },
                    "country_code": {
                        "$ref": "#/components/schemas/CountryCode"
                    },
                    "display_name": {
                        "example": "Bank Name",
                        "type": "string"
                    },
                    "icon_uri": {
                        "example": "https://truelayer-provider-assets.s3.amazonaws.com/global/icon/generic.svg",
                        "format": "uri",
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/ProviderId"
                    },
                    "logo_uri": {
                        "example": "https://truelayer-provider-assets.s3.amazonaws.com/global/logos/generic.svg",
                        "format": "uri",
                        "type": "string"
                    },
                    "swift_code": {
                        "description": "ISO 9362 international standard for Business Identifier Codes (BIC)",
                        "example": "MOCKGB01XXX",
                        "pattern": "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "capabilities"
                ],
                "type": "object"
            },
            "PaymentsProvidersScheme": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/SchemeId"
                    },
                    "requirements": {
                        "items": {
                            "$ref": "#/components/schemas/PaymentsProvidersSchemeRequirements"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "requirements"
                ],
                "title": "Scheme",
                "type": "object"
            },
            "PaymentsProvidersSchemeRequirements": {
                "properties": {
                    "account_identifier_types": {
                        "items": {
                            "enum": [
                                "iban",
                                "bban",
                                "sort_code_account_number",
                                "nrb"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "currencies": {
                        "items": {
                            "$ref": "#/components/schemas/CurrencyCode"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "account_identifier_types",
                    "currencies"
                ],
                "title": "Requirement",
                "type": "object"
            },
            "PaymentSubMerchants": {
                "description": "The details related to any applicable sub-merchants, for example an underlying division of the overall business.",
                "properties": {
                    "ultimate_counterparty": {
                        "$ref": "#/components/schemas/PaymentUltimateCounterparty"
                    }
                },
                "required": [
                    "ultimate_counterparty"
                ],
                "title": "Sub Merchants",
                "type": "object"
            },
            "PaymentUltimateCounterparty": {
                "discriminator": {
                    "mapping": {
                        "business_client": "#/components/schemas/UltimateCounterpartyBusinessClient",
                        "business_division": "#/components/schemas/UltimateCounterpartyBusinessDivision"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/UltimateCounterpartyBusinessDivision"
                    },
                    {
                        "$ref": "#/components/schemas/UltimateCounterpartyBusinessClient"
                    }
                ]
            },
            "PaymentUser": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    }
                },
                "required": [
                    "id"
                ],
                "title": "User",
                "type": "object"
            },
            "PaymentUserCreate": {
                "description": "Details of the end user who is making the payment. If you are using your own PISP licence, these fields are not required.\n\nPayments over a mandate don't need user information as this was collected at mandate creation.\n",
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/Address",
                        "description": "The physical address of your end user."
                    },
                    "date_of_birth": {
                        "description": "The date of birth of your end user, in YYYY-MM-DD format.",
                        "example": "1990-01-31",
                        "format": "date",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of your end user according to [RFC 2822](https://www.rfc-editor.org/rfc/rfc2822).\nIf you are using your own PISP licence this field is optional, otherwise one of `email`/`phone` is required.\n",
                        "example": "remi.terr@aol.com",
                        "format": "email",
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/UserId",
                        "description": "A unique identifier for the user. If you don’t provide this, TrueLayer generates a value in the response. You can use the same value for multiple payments to indicate a returning user."
                    },
                    "name": {
                        "description": "This is the full first and last name of your end user (not initials).\nIf you are using your own PISP licence this field is optional, otherwise it is required.\npattern: `^[^\\(\\)]+$`\n",
                        "example": "Remi Terr",
                        "pattern": "^[^\\(\\)]+$",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The phone number of your end user in formats recommended by [ITU](https://www.itu.int/oth/T0202.aspx?parent=T0202). The country calling code must be included and prefixed with a `+`.\nIf you are using your own PISP licence this field is optional, otherwise one of `email`/`phone` is required.\n",
                        "example": "+447777777777",
                        "format": "phone",
                        "type": "string"
                    },
                    "political_exposure": {
                        "description": "The user's political exposure (PEP), if known this field should be set to `current` otherwise to `none`.\n\nIf not known this field can be ignored or a `null` value can be sent.\n",
                        "enum": [
                            "current",
                            "none"
                        ],
                        "example": "current",
                        "type": "string"
                    }
                },
                "title": "User",
                "type": "object"
            },
            "Payout": {
                "discriminator": {
                    "mapping": {
                        "authorization_required": "#/components/schemas/PayoutAuthorizationRequired",
                        "authorized": "#/components/schemas/PayoutAuthorized",
                        "authorizing": "#/components/schemas/PayoutAuthorizing",
                        "executed": "#/components/schemas/PayoutExecuted",
                        "failed": "#/components/schemas/PayoutFailed",
                        "pending": "#/components/schemas/PayoutPending"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutPending"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutAuthorizationRequired"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutAuthorizing"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutAuthorized"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutExecuted"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutFailed"
                    }
                ]
            },
            "PayoutAuthorizationFlowCompleted": {
                "allOf": [
                    {
                        "properties": {
                            "failure_reason": {
                                "description": "Possible failure reasons:\n- `account_not_valid` - Either none or more than one personal account have been connected\n- `internal_error` - An internal error happened\n",
                                "enum": [
                                    "account_not_valid",
                                    "internal_error"
                                ],
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "completed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ]
            },
            "PayoutAuthorizationFlowCreated": {
                "allOf": [
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "created"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ]
            },
            "PayoutAuthorizationFlowNextAction": {
                "description": "The next action to be performed on the payout authorization flow\n",
                "discriminator": {
                    "mapping": {
                        "redirect": "#/components/schemas/ActionSpecRedirect"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ActionSpecRedirect"
                    }
                ]
            },
            "PayoutAuthorizationFlowStarted": {
                "properties": {
                    "actions": {
                        "description": "Object representing the next actions, if any. Present when the authorization flow is yet to be completed",
                        "properties": {
                            "next": {
                                "$ref": "#/components/schemas/PayoutAuthorizationFlowNextAction"
                            }
                        },
                        "required": [
                            "next"
                        ],
                        "type": "object"
                    },
                    "status": {
                        "enum": [
                            "authorizing"
                        ]
                    }
                },
                "required": [
                    "status",
                    "actions"
                ],
                "type": "object"
            },
            "PayoutAuthorizationRequired": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorization_required"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The payout has been created against TrueLayer's API but it needs an action from the end user to proceed to next stages.\n",
                "title": "Authorization required",
                "type": "object"
            },
            "PayoutAuthorized": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorized"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The payout has been authorized (i.e. there are enough funds) and\nit has been submitted to the payment scheme for execution.\n",
                "title": "Authorized",
                "type": "object"
            },
            "PayoutAuthorizing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "authorizing"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The payout has been created against TrueLayer's API and the associated authorization flow in progress. \n",
                "title": "Authorizing",
                "type": "object"
            },
            "PayoutBeneficiaryVerification": {
                "description": "Object that describes the verification checks that were request for the payout.",
                "properties": {
                    "transaction_search_criteria": {
                        "$ref": "#/components/schemas/PayoutBeneficiaryVerificationTransactionSearchCriteria"
                    },
                    "verify_name": {
                        "description": "Whether to verify the account holder name. \n",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "PayoutBeneficiaryVerificationTransactionSearchCriteria": {
                "description": "An object describing the search criteria to use to look for a transaction in the transaction history\nof the bank account connected to the end user\n",
                "properties": {
                    "amount_in_minor": {
                        "description": "A 'cent' value representing the amount. eg 100 == 1GBP",
                        "example": 115,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "The date the transaction was created at. eg `\"2024-05-07\"`",
                        "format": "date",
                        "type": "string"
                    },
                    "currency": {
                        "description": "The currency that the payout will be in.",
                        "enum": [
                            "GBP"
                        ],
                        "type": "string"
                    },
                    "tokens": {
                        "description": "A list of tokens to look for as transaction reference. \nThe size of this array can vary between 1 and 5 items. \nEach item should present minimum 3 and maximum 50 characters, including spaces.\neg `[\"18db38\", \"Betropolis LTD\", \"LC Betropolis\"]`\n",
                        "example": [
                            "18db38",
                            "Betropolis LTD",
                            "LC Betropolis"
                        ],
                        "items": {
                            "maxLength": 50,
                            "minLength": 3,
                            "type": "string"
                        },
                        "maxItems": 5,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "tokens",
                    "amount_in_minor",
                    "currency",
                    "created_at"
                ],
                "type": "object"
            },
            "PayoutCommon": {
                "properties": {
                    "amount_in_minor": {
                        "description": "A 'cent' value representing the amount. eg 100 == 1GBP",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "beneficiary": {
                        "$ref": "#/components/schemas/PayoutDestination"
                    },
                    "created_at": {
                        "description": "The date and time the payout was created at",
                        "format": "date-time",
                        "type": "string"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/MerchantAccountCurrencyCode"
                    },
                    "id": {
                        "$ref": "#/components/schemas/PayoutId"
                    },
                    "merchant_account_id": {
                        "$ref": "#/components/schemas/MerchantAccountId"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "scheme_id": {
                        "$ref": "#/components/schemas/PaymentScheme",
                        "description": "The id of the scheme used to execute the payout"
                    }
                },
                "required": [
                    "id",
                    "merchant_account_id",
                    "amount_in_minor",
                    "currency",
                    "beneficiary",
                    "created_at"
                ],
                "type": "object"
            },
            "PayoutCreatedCommon": {
                "properties": {
                    "id": {
                        "description": "ID of the payout",
                        "example": "0cd1b0f7-71bc-4d24-b209-95259dadcc20",
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "title": "Newly created payout",
                "type": "object"
            },
            "PayoutCreatedRegular": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCreatedCommon"
                    }
                ],
                "title": "Regular payout"
            },
            "PayoutCreatedUserDetermined": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCreatedCommon"
                    },
                    {
                        "properties": {
                            "resource_token": {
                                "description": "A payout token in JWT format, with a limited scope that is authorized to be used with a single payout\n\nOnly available in payouts with `user_determined` beneficiary type.\n",
                                "format": "application/jwt",
                                "type": "string"
                            },
                            "status": {
                                "description": "Status of the created payout.\n\n🚧 Currently, this exists exclusively for `user_determined` payouts, and `authorization_required` is the only possible value;\nhowever, future standard payout scenarios may introduce additional statuses.\n",
                                "enum": [
                                    "authorization_required"
                                ],
                                "type": "string"
                            },
                            "user": {
                                "$ref": "#/components/schemas/PaymentUser",
                                "description": "Details on the user of the created payout.\n\nOnly available in payouts with `user_determined` beneficiary type.\n"
                            }
                        },
                        "required": [
                            "status",
                            "resource_token",
                            "user"
                        ],
                        "type": "object"
                    }
                ],
                "title": "User determined payout"
            },
            "PayoutDestination": {
                "discriminator": {
                    "mapping": {
                        "business_account": "#/components/schemas/PayoutDestinationBusinessAccount",
                        "external_account": "#/components/schemas/PayoutDestinationExternalAccount",
                        "payment_source": "#/components/schemas/PayoutDestinationPaymentSource",
                        "user_determined": "#/components/schemas/PayoutDestinationUserDetermined"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutDestinationExternalAccount"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutDestinationPaymentSource"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutDestinationBusinessAccount"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutDestinationUserDetermined"
                    }
                ]
            },
            "PayoutDestinationBusinessAccount": {
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder.\n",
                        "type": "string"
                    },
                    "account_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "reference": {
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"business_account\"",
                        "enum": [
                            "business_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "account_holder_name",
                    "account_identifiers",
                    "reference"
                ],
                "title": "Business Account",
                "type": "object"
            },
            "PayoutDestinationExternalAccount": {
                "description": "The routing information for an external bank account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder.\n",
                        "type": "string"
                    },
                    "account_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "reference": {
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"external_account\"",
                        "enum": [
                            "external_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "account_holder_name",
                    "account_identifier",
                    "reference"
                ],
                "title": "External Account",
                "type": "object"
            },
            "PayoutDestinationPaymentSource": {
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the account holder.\n",
                        "type": "string"
                    },
                    "account_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "payment_source_id": {
                        "description": "ID of the external account which has become a payment source",
                        "type": "string"
                    },
                    "reference": {
                        "description": "Reference for the payout",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"payment_source\"",
                        "enum": [
                            "payment_source"
                        ],
                        "type": "string"
                    },
                    "user_id": {
                        "description": "ID of the owning user of the external account",
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "user_id",
                    "payment_source_id",
                    "reference",
                    "account_identifiers",
                    "account_holder_name"
                ],
                "title": "Payment Source",
                "type": "object"
            },
            "PayoutDestinationUserDetermined": {
                "description": "User determined beneficiary details",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the account holder.\n",
                        "type": "string"
                    },
                    "account_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "reference": {
                        "description": "The reference for the payout, which displays in the beneficiary's bank statement.\n\nFor SEPA payments, the maximum length is **140 characters**. The format must respect the requirements specified [here](https://www.europeanpaymentscouncil.eu/document-library/guidance-documents/sepa-requirements-extended-character-set-unicode-subset-best).\n\nFor FPS payments, the maximum length is **18 characters**. The format must respect this regex: `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;{@\\r\\n]*$`\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"user_determined\"",
                        "enum": [
                            "user_determined"
                        ],
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/PaymentUser"
                    },
                    "verification": {
                        "$ref": "#/components/schemas/PayoutBeneficiaryVerification"
                    }
                },
                "required": [
                    "type",
                    "reference",
                    "user"
                ],
                "title": "User Determined",
                "type": "object"
            },
            "PayoutExecuted": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCommon"
                    },
                    {
                        "properties": {
                            "executed_at": {
                                "description": "The date and time the payout transitioned to `executed`",
                                "format": "datetime",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "executed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "executed_at"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The payout was executed - the funds have left your merchant\naccount.\n",
                "title": "Executed",
                "type": "object"
            },
            "PayoutFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCommon"
                    },
                    {
                        "properties": {
                            "executed_at": {
                                "description": "The date and time the payout transitioned to `executed`",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failed_at": {
                                "description": "The date and time the payout transitioned to `failed`",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/OutboundPaymentFailureReason"
                            },
                            "status": {
                                "enum": [
                                    "failed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "failed_at",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The payout failed - the funds have not left your merchant account.\n",
                "title": "Failed",
                "type": "object"
            },
            "PayoutId": {
                "description": "Unique ID for the Payout",
                "example": "0cd1b0f7-71bc-4d24-b209-95259dadcc20",
                "type": "string"
            },
            "PayoutIncomingBeneficiaryVerification": {
                "description": "Object that describes the verification checks to run on the payout. At least one between `account_holder_name` and `transaction_search_criteria` must be specified.",
                "properties": {
                    "transaction_search_criteria": {
                        "$ref": "#/components/schemas/PayoutBeneficiaryVerificationTransactionSearchCriteria"
                    },
                    "verify_name": {
                        "description": "Enable verification for the account holder name.\n\n_**Note:** This is expected to always be `true`. In future this will be made optional to support verification types that don't involve checking account holder names._\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "verify_name"
                ],
                "type": "object"
            },
            "PayoutIncomingDestination": {
                "discriminator": {
                    "mapping": {
                        "business_account": "#/components/schemas/PayoutIncomingDestinationBusinessAccount",
                        "external_account": "#/components/schemas/PayoutIncomingDestinationExternalAccount",
                        "payment_source": "#/components/schemas/PayoutIncomingDestinationPaymentSource",
                        "user_determined": "#/components/schemas/PayoutIncomingDestinationUserDetermined"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutIncomingDestinationExternalAccount"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutIncomingDestinationPaymentSource"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutIncomingDestinationBusinessAccount"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutIncomingDestinationUserDetermined"
                    }
                ]
            },
            "PayoutIncomingDestinationBusinessAccount": {
                "properties": {
                    "reference": {
                        "description": "A reference for the payout.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"business_account\" payed to a preconfigured business IBAN.",
                        "enum": [
                            "business_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "reference"
                ],
                "title": "Business Account",
                "type": "object"
            },
            "PayoutIncomingDestinationExternalAccount": {
                "description": "The routing information for an external bank account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder.\n\nFor SEPA payments, the maximum length is **70 characters**. The format must respect the requirements specified [here](https://www.europeanpaymentscouncil.eu/document-library/guidance-documents/sepa-requirements-extended-character-set-unicode-subset-best).\n\nFor FPS payments, the maximum length is **140 characters**. The format must respect this regex: `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;{@\\r\\n]*$`\n\nFor Elixir payments, the maximum length is **70 characters**. The format must respect this regex: `^[a-zA-Z0-9\\/\\-?:().,'+\\s]*$`\n",
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/AccountIdentifier"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address",
                        "description": "If the client's transactions are subject to sanctions screening, they must provide the `address`, otherwise it is optional."
                    },
                    "date_of_birth": {
                        "description": "If the client's transactions are subject to sanctions screening, they must provide the `date_of_birth` (in YYYY-MM-DD format), otherwise it is optional.",
                        "example": "1990-01-31",
                        "format": "date",
                        "type": "string"
                    },
                    "reference": {
                        "description": "The reference for the payout, which displays in the beneficiary's bank statement.\n\nFor SEPA payments, the maximum length is **140 characters**. The format must respect the requirements specified [here](https://www.europeanpaymentscouncil.eu/document-library/guidance-documents/sepa-requirements-extended-character-set-unicode-subset-best).\n\nFor FPS payments, the maximum length is **18 characters**. The format must respect this regex: `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;{@\\r\\n]*$`\n\nFor Elixir payments, the maximum length is **20 characters**. The format must respect this regex: `^[a-zA-Z0-9\\/\\-?:().,'+\\s]*$`\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"external_account\"",
                        "enum": [
                            "external_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "account_holder_name",
                    "account_identifier",
                    "reference"
                ],
                "title": "External Account",
                "type": "object"
            },
            "PayoutIncomingDestinationPaymentSource": {
                "properties": {
                    "payment_source_id": {
                        "description": "ID of the external account which has become a payment source.",
                        "type": "string"
                    },
                    "reference": {
                        "description": "A reference for the payout.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"payment_source\"",
                        "enum": [
                            "payment_source"
                        ],
                        "type": "string"
                    },
                    "user_id": {
                        "description": "ID of the owning user of the external account.",
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "user_id",
                    "payment_source_id",
                    "reference"
                ],
                "title": "Payment Source",
                "type": "object"
            },
            "PayoutIncomingDestinationUserDetermined": {
                "description": "Beneficiary details of type User Determined",
                "properties": {
                    "provider_selection": {
                        "$ref": "#/components/schemas/PayoutProviderSelection"
                    },
                    "reference": {
                        "description": "The reference for the payout, which displays in the beneficiary's bank statement.\n\nFor SEPA payments, the maximum length is **140 characters**. The format must respect the requirements specified [here](https://www.europeanpaymentscouncil.eu/document-library/guidance-documents/sepa-requirements-extended-character-set-unicode-subset-best).\n\nFor FPS payments, the maximum length is **18 characters**. The format must respect this regex: `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;{@\\r\\n]*$`\n\nFor Elixir payments, the maximum length is **20 characters**. The format must respect this regex: `^[a-zA-Z0-9\\/\\-?:().,'+\\s]*$`\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Represents a beneficiary that is specified by the end-user.",
                        "enum": [
                            "user_determined"
                        ],
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/PayoutUserCreate"
                    },
                    "verification": {
                        "$ref": "#/components/schemas/PayoutIncomingBeneficiaryVerification",
                        "description": "Object that represents the verification process associated to the payout. Used in _Verified Payouts_.\n\n_**Note:** This field might be made optional in future to support multiple `User Determined` use cases._\n"
                    }
                },
                "required": [
                    "type",
                    "reference",
                    "user",
                    "verification",
                    "provider_selection"
                ],
                "title": "User Determined",
                "type": "object"
            },
            "PayoutIncomingSchemeSelection": {
                "discriminator": {
                    "mapping": {
                        "instant_only": "#/components/schemas/PayoutIncomingSchemeSelectionInstantOnly",
                        "instant_preferred": "#/components/schemas/PayoutIncomingSchemeSelectionInstantPreferred",
                        "preselected": "#/components/schemas/PayoutIncomingSchemeSelectionPreselected"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutIncomingSchemeSelectionInstantPreferred"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutIncomingSchemeSelectionInstantOnly"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutIncomingSchemeSelectionPreselected"
                    }
                ]
            },
            "PayoutIncomingSchemeSelectionInstantOnly": {
                "properties": {
                    "type": {
                        "description": "Automatically select a payment scheme that supports instant payments based on currency and geography.\nThis is optimal when quick settlement is essential.\n",
                        "enum": [
                            "instant_only"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Instant Only",
                "type": "object"
            },
            "PayoutIncomingSchemeSelectionInstantPreferred": {
                "properties": {
                    "type": {
                        "description": "Automatically select a payment scheme that supports instant payments based on currency and geography,\nwith a fallback to a non-instant scheme if instant payment is unavailable.\nThe `payout_executed` webhook will specify the actual scheme used.\nThis is optimal when slow settlement is not a concern. This is used by default if no `scheme_selection` is provided.\n",
                        "enum": [
                            "instant_preferred"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Instant Preferred",
                "type": "object"
            },
            "PayoutIncomingSchemeSelectionPreselected": {
                "properties": {
                    "scheme_id": {
                        "description": "Select a payment scheme compatible with the currency and geographic region to avoid payout failures after submission.\nThis helps with payouts by selecting the better-performing scheme between two similar options in a region, based on various criteria.\n",
                        "enum": [
                            "faster_payments_service",
                            "sepa_credit_transfer_instant",
                            "sepa_credit_transfer",
                            "polish_domestic_standard",
                            "polish_domestic_express"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "description": "Specify",
                        "enum": [
                            "preselected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "scheme_id"
                ],
                "title": "Preselected",
                "type": "object"
            },
            "PayoutIncomingSubmerchants": {
                "description": "The details related to any applicable sub-merchants, for example a partner you are working with.",
                "properties": {
                    "ultimate_counterparty": {
                        "$ref": "#/components/schemas/PayoutIncomingUltimateCounterparty"
                    }
                },
                "title": "Sub merchants",
                "type": "object"
            },
            "PayoutIncomingUltimateCounterparty": {
                "discriminator": {
                    "mapping": {
                        "business_client": "#/components/schemas/UltimateCounterpartyBusinessClient"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/UltimateCounterpartyBusinessClient"
                    }
                ]
            },
            "PayoutPending": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PayoutCommon"
                    },
                    {
                        "properties": {
                            "status": {
                                "enum": [
                                    "pending"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "description": "The payout has been created against TrueLayer's API but it has not yet been authorized and sent to the payment scheme for execution.\n",
                "title": "Pending",
                "type": "object"
            },
            "PayoutProviderSelection": {
                "description": "Provider Selection used for `User Determined` beneficiaries",
                "discriminator": {
                    "mapping": {
                        "preselected": "#/components/schemas/PayoutProviderSelectionPreselected",
                        "user_selected": "#/components/schemas/PayoutProviderSelectionUserSelected"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutProviderSelectionUserSelected"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutProviderSelectionPreselected"
                    }
                ],
                "title": "Payout provider Selection",
                "type": "object"
            },
            "PayoutProviderSelectionPreselected": {
                "description": "Preselected provider. Indicates that the provider for this payment is preselected.",
                "properties": {
                    "provider_id": {
                        "description": "The provider Id the PSU will use for this payment.",
                        "example": "eg-provider",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "preselected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "provider_id"
                ],
                "title": "Preselected",
                "type": "object"
            },
            "PayoutProviderSelectionUserSelected": {
                "description": "Indicates that the provider is to be selected from a collection",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/ProviderFilter-2"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "user_selected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "User selected",
                "type": "object"
            },
            "PayoutUserCreate": {
                "description": "Details of the beneficiary of the payment.\n",
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/Address",
                        "description": "The physical address of your end user."
                    },
                    "date_of_birth": {
                        "description": "The date of birth of your end user, in YYYY-MM-DD format.",
                        "example": "1990-01-31",
                        "format": "date",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of your end user according to [RFC 2822](https://www.rfc-editor.org/rfc/rfc2822).\nIf you are using your own PISP licence this field is optional, otherwise one of `email`/`phone` is required.\n",
                        "example": "remi.terr@aol.com",
                        "format": "email",
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/UserId",
                        "description": "A unique identifier for the user. If you don’t provide this, TrueLayer generates a value in the response. You can use the same value for multiple payments to indicate a returning user."
                    },
                    "name": {
                        "description": "This is the full first and last name of your end user (not initials).\nThis field is required if at least one of the following conditions is met: \n- your client id is not regulated;\n- `verification.verify_name` is set to `true`\n",
                        "example": "Remi Terr",
                        "pattern": "^[^\\(\\)]+$",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The phone number of your end user in formats recommended by [ITU](https://www.itu.int/oth/T0202.aspx?parent=T0202). The country calling code must be included and prefixed with a `+`.\nIf you are using your own PISP licence this field is optional, otherwise one of `email`/`phone` is required.\n",
                        "example": "+447777777777",
                        "format": "phone",
                        "type": "string"
                    }
                },
                "title": "User",
                "type": "object"
            },
            "PerformActionProviderSelection": {
                "properties": {
                    "provider_id": {
                        "example": "mock-payments-gb-redirect",
                        "type": "string"
                    }
                },
                "required": [
                    "provider_id"
                ],
                "title": "Provider selection",
                "type": "object"
            },
            "PerformActionSchemeSelection": {
                "properties": {
                    "scheme_id": {
                        "description": "The id of the scheme to make the payment over.",
                        "example": "faster_payments_service",
                        "type": "string"
                    }
                },
                "required": [
                    "scheme_id"
                ],
                "title": "Scheme selection",
                "type": "object"
            },
            "PerformPaymentAction": {
                "discriminator": {
                    "mapping": {
                        "authorizing": "#/components/schemas/PaymentAuthorizationFlowAuthorizing",
                        "failed": "#/components/schemas/PaymentAuthorizationFlowAuthorizationFailed"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaymentAuthorizationFlowAuthorizing"
                    },
                    {
                        "$ref": "#/components/schemas/PaymentAuthorizationFlowAuthorizationFailed"
                    }
                ]
            },
            "ProblemDetailsConcurrencyConflict": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "The resource is already used by another request.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            409
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Concurrency Conflict"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#concurrency-conflict"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Concurrency Conflict",
                "type": "object"
            },
            "ProblemDetailsForbidden": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "The token used for Authorization is not authorized to perform the request.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            403
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Forbidden"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#forbidden"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Forbidden",
                "type": "object"
            },
            "ProblemDetailsIdempotencyKeyConcurrencyConflict": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "The Idempotency-Key value is being used for a concurrent request.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            409
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Idempotency-Key Concurrency Conflict"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#idempotency-key-concurrency-conflict"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Idempotency-Key Conflict",
                "type": "object"
            },
            "ProblemDetailsIdempotencyKeyReuse": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "The Idempotency-Key value has already been used for a different request.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            422
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Idempotency-Key Reuse"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#idempotency-key-reuse"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Idempotency-Key Reuse",
                "type": "object"
            },
            "ProblemDetailsInvalidParameters": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "The request body was invalid.",
                        "type": "string"
                    },
                    "errors": {
                        "additionalProperties": {
                            "items": {
                                "type": "string"
                            },
                            "minItems": 1,
                            "type": "array"
                        },
                        "example": {
                            "beneficiary.type": [
                                "Must be either merchant_account or external_account"
                            ]
                        },
                        "type": "object"
                    },
                    "status": {
                        "enum": [
                            400
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Invalid Parameters"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#invalid-parameters"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail",
                    "errors"
                ],
                "title": "Invalid Parameters",
                "type": "object"
            },
            "ProblemDetailsInvalidState": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "Status of the payment does not allow this action to be executed.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            400
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Invalid State"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#invalid_state"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Invalid State",
                "type": "object"
            },
            "ProblemDetailsNotFound": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "Resource could not be found.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            404
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Not Found"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#not-found"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Not Found",
                "type": "object"
            },
            "ProblemDetailsProviderError": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "Provider is temporarily unavailable, please retry.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            502
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Provider Error"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#provider-error"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Provider Error",
                "type": "object"
            },
            "ProblemDetailsRateLimitExceeded": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "Too many API requests have been received within the allowed time frame.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            429
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Rate Limit Exceeded"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#rate-limit-exceeded"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Rate Limit Exceeded",
                "type": "object"
            },
            "ProblemDetailsUnauthenticated": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "A Bearer token must be provided in the Authorization header.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            401
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Unauthenticated"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#unauthenticated"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Unauthenticated",
                "type": "object"
            },
            "ProblemDetailsUnknownError": {
                "properties": {
                    "detail": {
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n",
                        "example": "An error occurred. Please contact customer support.",
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            500
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "title": {
                        "enum": [
                            "Unknown Error"
                        ],
                        "type": "string"
                    },
                    "trace_id": {
                        "description": "The TrueLayer trace identifier for the request",
                        "example": "96ce50247f87f540bb2d86771b3728b8",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "https://docs.truelayer.com/docs/payments-api-errors#unknown-error"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "title",
                    "status",
                    "trace_id",
                    "detail"
                ],
                "title": "Unknown Error",
                "type": "object"
            },
            "ProductItem": {
                "allOf": [
                    {
                        "properties": {
                            "name": {
                                "description": "Name of the product.",
                                "example": "Oak Table",
                                "type": "string"
                            },
                            "price_in_minor": {
                                "description": "A 'cent' value representing the price of the product. eg 100 == 1GBP or 100 = 1EUR",
                                "example": 1,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "quantity": {
                                "description": "The product item quantity",
                                "example": 1,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "url": {
                                "description": "Url of the product.",
                                "example": "https://tablesrus.com/oak-table-42",
                                "format": "url",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ],
                "description": "Product details",
                "required": [
                    "name",
                    "price_in_minor",
                    "quantity"
                ],
                "title": "Product Item",
                "type": "object"
            },
            "Provider": {
                "properties": {
                    "availability": {
                        "$ref": "#/components/schemas/ProviderAvailability",
                        "description": "Whether the provider is currently available.\n> 🚧 This feature is in beta\n"
                    },
                    "bg_color": {
                        "description": "pattern: `^#[A-F0-9]{6}$`",
                        "example": "#000000",
                        "pattern": "^#[A-F0-9]{6}$",
                        "type": "string"
                    },
                    "country_code": {
                        "$ref": "#/components/schemas/CountryCode"
                    },
                    "display_name": {
                        "example": "Bank Name",
                        "type": "string"
                    },
                    "icon_uri": {
                        "example": "https://truelayer-provider-assets.s3.amazonaws.com/global/icon/generic.svg",
                        "format": "uri",
                        "type": "string"
                    },
                    "id": {
                        "$ref": "#/components/schemas/ProviderId"
                    },
                    "logo_uri": {
                        "example": "https://truelayer-provider-assets.s3.amazonaws.com/global/logos/generic.svg",
                        "format": "uri",
                        "type": "string"
                    },
                    "schemes": {
                        "description": "List of schemes supported by the provider.",
                        "items": {
                            "$ref": "#/components/schemas/PaymentsProviderScheme"
                        },
                        "type": "array"
                    },
                    "search_aliases": {
                        "description": "Alternative search terms that should be used to help users find this provider.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ProviderAvailability": {
                "description": "Whether the provider is currently available.\n> 🚧 This feature is in beta\n",
                "properties": {
                    "recommended_status": {
                        "$ref": "#/components/schemas/ProviderStatus"
                    },
                    "updated_at": {
                        "description": "The point in time when this data was collected. Value is in UTC.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "recommended_status",
                    "updated_at"
                ],
                "title": "Provider Availability",
                "type": "object"
            },
            "ProviderBins": {
                "description": "A list of BIN (Bank Identification Numbers) ranges supported by the provider.\nBased on the ISO/IEC 7812-1:2017 BIN refers to the first eight numbers on a payment card, identifying the financial institution that issues the card.\n",
                "items": {
                    "description": "A range of valid BINs that determine the inclusive starting and ending numbers.\n",
                    "properties": {
                        "from": {
                            "description": "The starting number of the BIN range (inclusive).\nA valid integer must represent the first eight digits of a payment card number.\n",
                            "example": 51685900,
                            "format": "int32",
                            "type": "integer"
                        },
                        "to": {
                            "description": "The ending number of the BIN range (inclusive).\nA valid integer must represent the first eight digits of a payment card number.\n",
                            "example": 51685999,
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "from",
                        "to"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "ProviderCapabilities": {
                "description": "Describes the capabilities of this provider.\nBy default, will only display capabilities in `general_availability` or `public beta`.\nIf `client_id` is available, will display capabilities available to the client.\n",
                "properties": {
                    "mandates": {
                        "description": "Recurring payment mandate creation capabilities.",
                        "properties": {
                            "vrp_commercial": {
                                "description": "Mandates for the commercial use case.",
                                "properties": {
                                    "release_channel": {
                                        "$ref": "#/components/schemas/ProviderReleaseChannel",
                                        "description": "Release channel of the provider and capability."
                                    }
                                },
                                "required": [
                                    "release_channel"
                                ],
                                "type": "object"
                            },
                            "vrp_sweeping": {
                                "description": "Mandates for the sweeping use case.",
                                "properties": {
                                    "release_channel": {
                                        "$ref": "#/components/schemas/ProviderReleaseChannel",
                                        "description": "Release channel of the provider and capability."
                                    }
                                },
                                "required": [
                                    "release_channel"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "payments": {
                        "description": "Single payment initiation capabilities.",
                        "properties": {
                            "bank_transfer": {
                                "description": "Bank transfer capability.",
                                "properties": {
                                    "availability": {
                                        "$ref": "#/components/schemas/ProviderAvailability",
                                        "description": "Whether the provider is currently available.\n> 🚧 This feature is in beta\n"
                                    },
                                    "release_channel": {
                                        "$ref": "#/components/schemas/ProviderReleaseChannel",
                                        "description": "Release channel of the provider and capability."
                                    },
                                    "schemes": {
                                        "description": "List of payment schemes supported by this provider.",
                                        "items": {
                                            "$ref": "#/components/schemas/PaymentsProviderScheme"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "release_channel",
                                    "schemes"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ProviderFilter": {
                "description": "Configuration options to constrain which providers should be available\nduring the `provider_selection` action.\n",
                "properties": {
                    "countries": {
                        "description": "Only providers from the specified countries will be returned.",
                        "example": [
                            "GB"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/CountryCode"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "customer_segments": {
                        "default": [
                            "retail"
                        ],
                        "description": "The customer segments that providers cater to that should be returned. By default, returns retail only.",
                        "example": [
                            "retail"
                        ],
                        "items": {
                            "enum": [
                                "retail",
                                "business",
                                "corporate"
                            ],
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "excludes": {
                        "description": "Options to exclude providers included by the filters",
                        "properties": {
                            "provider_ids": {
                                "description": "IDs of providers to explicitly exclude from those returned.",
                                "example": [
                                    "ob-exclude-this-bank"
                                ],
                                "items": {
                                    "type": "string"
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "type": "object"
                    },
                    "provider_ids": {
                        "description": "IDs of providers to include in those returned.",
                        "example": [
                            "mock-payments-gb-redirect"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "release_channel": {
                        "default": "general_availability",
                        "description": "The lowest stability release stage of a provider that should be returned.\n\nNote that many EUR providers are in `public_beta` or `private_beta`.\n",
                        "enum": [
                            "general_availability",
                            "public_beta",
                            "private_beta"
                        ],
                        "example": "general_availability",
                        "type": "string"
                    }
                },
                "title": "Provider Filter",
                "type": "object"
            },
            "ProviderFilter-2": {
                "description": "Configuration options to constrain which providers should be available\nduring the `provider_selection` action.\n",
                "properties": {
                    "countries": {
                        "description": "Only providers from the specified countries will be returned.",
                        "example": [
                            "GB"
                        ],
                        "items": {
                            "enum": [
                                "GB"
                            ],
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "excludes": {
                        "description": "Options to exclude providers included by the filters",
                        "properties": {
                            "provider_ids": {
                                "description": "IDs of providers to explicitly exclude from those returned.",
                                "example": [
                                    "ob-exclude-this-bank"
                                ],
                                "items": {
                                    "type": "string"
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "type": "object"
                    },
                    "provider_ids": {
                        "description": "IDs of providers to include in those returned.",
                        "example": [
                            "mock-payments-gb-redirect"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "release_channel": {
                        "default": "general_availability",
                        "description": "The lowest stability release stage of a provider that should be returned.",
                        "enum": [
                            "general_availability",
                            "public_beta",
                            "private_beta"
                        ],
                        "example": "general_availability",
                        "type": "string"
                    }
                },
                "title": "Provider Filter",
                "type": "object"
            },
            "ProviderFilterResponse": {
                "description": "Configuration options to constrain which providers should be available\nduring the `provider_selection` action.\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                "properties": {
                    "countries": {
                        "description": "Only providers from the specified countries will be returned.",
                        "example": [
                            "GB"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/CountryCode"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "customer_segments": {
                        "description": "The customer segments catered to by a provider that should be returned.",
                        "example": [
                            "retail"
                        ],
                        "items": {
                            "enum": [
                                "retail",
                                "business",
                                "corporate"
                            ],
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "excludes": {
                        "description": "Options to exclude providers included by the filters",
                        "properties": {
                            "provider_ids": {
                                "description": "IDs of providers to explicitly exclude from those returned.",
                                "example": [
                                    "ob-exclude-this-bank"
                                ],
                                "items": {
                                    "type": "string"
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "type": "object"
                    },
                    "provider_ids": {
                        "description": "IDs of providers to include in those returned.",
                        "example": [
                            "mock-payments-gb-redirect"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "release_channel": {
                        "description": "The lowest stability release stage of a provider that should be returned.",
                        "enum": [
                            "general_availability",
                            "public_beta",
                            "private_beta"
                        ],
                        "example": "general_availability",
                        "type": "string"
                    }
                },
                "title": "Provider Filter",
                "type": "object"
            },
            "ProviderId": {
                "description": "Unique ID for the Provider",
                "example": "ob-bank-name",
                "type": "string"
            },
            "ProviderReleaseChannel": {
                "enum": [
                    "general_availability",
                    "public_beta",
                    "private_beta",
                    "alpha"
                ],
                "type": "string"
            },
            "ProviderReturnParametersMandate": {
                "description": "The mandate associated to the parameters submitted.",
                "properties": {
                    "mandate_id": {
                        "description": "ID of the mandate",
                        "example": "0cd1b0f7-71bc-4d24-b209-95259dadcc20",
                        "type": "string"
                    },
                    "type": {
                        "description": "The resource type.",
                        "enum": [
                            "mandate"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "mandate_id"
                ],
                "title": "Mandate",
                "type": "object"
            },
            "ProviderReturnParametersPayment": {
                "description": "The Payment associated to the parameters submitted.",
                "properties": {
                    "payment_id": {
                        "description": "ID of the payment",
                        "example": "0cd1b0f7-71bc-4d24-b209-95259dadcc20",
                        "type": "string"
                    },
                    "type": {
                        "description": "The resource type.",
                        "enum": [
                            "payment"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "payment_id"
                ],
                "title": "Payment",
                "type": "object"
            },
            "ProviderReturnParametersResource": {
                "description": "The resource associated to the parameters submitted.",
                "discriminator": {
                    "mapping": {
                        "mandate": "#/components/schemas/ProviderReturnParametersMandate",
                        "payment": "#/components/schemas/ProviderReturnParametersPayment"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ProviderReturnParametersPayment"
                    },
                    {
                        "$ref": "#/components/schemas/ProviderReturnParametersMandate"
                    }
                ],
                "type": "object"
            },
            "ProviderReturnParametersResponse": {
                "properties": {
                    "resource": {
                        "$ref": "#/components/schemas/ProviderReturnParametersResource"
                    }
                },
                "required": [
                    "resource"
                ],
                "title": "Resource",
                "type": "object"
            },
            "ProviderSelectionPreselected": {
                "description": "Preselected provider. Indicates that the provider for this payment is preselected.",
                "properties": {
                    "data_access_token": {
                        "description": "If the provider only allows a single active consent across both AIS (data) and PIS (payments) services, in order to prevent invalidating an existing AIS consent, you can pass the data access token in this field, and we will preserve the data consent when requesting authorisation for the payment. \npattern: `^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$`\n",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                        "maxLength": 10000,
                        "pattern": "^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$",
                        "type": "string"
                    },
                    "provider_id": {
                        "description": "The provider Id the PSU will use for this payment.",
                        "example": "eg-provider",
                        "type": "string"
                    },
                    "remitter": {
                        "$ref": "#/components/schemas/ProviderSelectionPreselectedRemitter"
                    },
                    "scheme_selection": {
                        "$ref": "#/components/schemas/ProviderSelectionPreselectedSchemeSelection"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "preselected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "provider_id",
                    "scheme_selection"
                ],
                "title": "Preselected",
                "type": "object"
            },
            "ProviderSelectionPreselectedRemitter": {
                "description": "Remitter",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder. This field will be required if the preselected provider requires it, otherwise it will be optional.\npattern: `^[^\\(\\)]{1,80}$`\n",
                        "example": "Mike Smith",
                        "maxLength": 80,
                        "pattern": "^[^\\(\\)]{1,80}$",
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/PaymentAccountIdentifier"
                    }
                },
                "required": [
                    "account_identifier"
                ],
                "title": "Remitter account details",
                "type": "object"
            },
            "ProviderSelectionPreselectedResponse": {
                "description": "Preselected provider. Indicates that the provider for this payment is preselected.",
                "properties": {
                    "provider_id": {
                        "description": "The provider Id the PSU will use for this payment.",
                        "example": "eg-provider",
                        "type": "string"
                    },
                    "remitter": {
                        "$ref": "#/components/schemas/RemitterResponse"
                    },
                    "scheme_id": {
                        "description": "The id of the scheme to make the payment over.",
                        "example": "payment_scheme",
                        "type": "string"
                    },
                    "scheme_selection": {
                        "$ref": "#/components/schemas/ProviderSelectionPreselectedSchemeSelection"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "preselected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "provider_id"
                ],
                "title": "Preselected",
                "type": "object"
            },
            "ProviderSelectionPreselectedSchemeSelection": {
                "description": "Scheme Selection",
                "discriminator": {
                    "mapping": {
                        "instant_only": "#/components/schemas/SchemeSelectionInstantOnly",
                        "instant_preferred": "#/components/schemas/SchemeSelectionInstantPreferred",
                        "preselected": "#/components/schemas/SchemeSelectionPreselected",
                        "user_selected": "#/components/schemas/SchemeSelectionUserSelected"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SchemeSelectionInstantOnly"
                    },
                    {
                        "$ref": "#/components/schemas/SchemeSelectionInstantPreferred"
                    },
                    {
                        "$ref": "#/components/schemas/SchemeSelectionPreselected"
                    },
                    {
                        "$ref": "#/components/schemas/SchemeSelectionUserSelected"
                    }
                ],
                "title": "Scheme Selection",
                "type": "object"
            },
            "ProviderSelectionUserSelected": {
                "description": "Indicates that the provider is to be selected from a collection",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/ProviderFilter"
                    },
                    "scheme_selection": {
                        "$ref": "#/components/schemas/ProviderSelectionUserSelectedSchemeSelection"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "user_selected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "User selected",
                "type": "object"
            },
            "ProviderSelectionUserSelectedResponse": {
                "description": "Indicates that the user selects the provider that they want to pay with from a list.",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/ProviderFilterResponse"
                    },
                    "provider_id": {
                        "description": "The provider ID that the end user uses for this payment. Populated when provider selection has been submitted.",
                        "example": "eg-provider",
                        "type": "string"
                    },
                    "scheme_id": {
                        "description": "The id of the scheme to make the payment over. If you fetch information about a payment using a GET request, you always receive a response that includes a `scheme_id` if a payment has reached the `authorized` status or later.",
                        "example": "payment_scheme",
                        "type": "string"
                    },
                    "scheme_selection": {
                        "$ref": "#/components/schemas/ProviderSelectionUserSelectedSchemeSelection"
                    },
                    "type": {
                        "description": "The type of provider.",
                        "enum": [
                            "user_selected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "User selected",
                "type": "object"
            },
            "ProviderSelectionUserSelectedSchemeSelection": {
                "description": "Scheme Selection",
                "discriminator": {
                    "mapping": {
                        "instant_only": "#/components/schemas/SchemeSelectionInstantOnly",
                        "instant_preferred": "#/components/schemas/SchemeSelectionInstantPreferred",
                        "user_selected": "#/components/schemas/SchemeSelectionUserSelected"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SchemeSelectionInstantOnly"
                    },
                    {
                        "$ref": "#/components/schemas/SchemeSelectionInstantPreferred"
                    },
                    {
                        "$ref": "#/components/schemas/SchemeSelectionUserSelected"
                    }
                ],
                "title": "Scheme Selection",
                "type": "object"
            },
            "ProviderStatus": {
                "enum": [
                    "healthy",
                    "unhealthy"
                ],
                "type": "string"
            },
            "RelatedProducts": {
                "description": "Optional field for adding related products, at least one product should be set.\nNot available when creating recurring payments.\n",
                "example": {
                    "signup_plus": {}
                },
                "properties": {
                    "signup_plus": {
                        "description": "Signup+ product.\n",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Remitter": {
                "description": "Remitter",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder. \npattern: `^[^\\(\\)]{1,80}$`\n",
                        "example": "Mike Smith",
                        "maxLength": 80,
                        "pattern": "^[^\\(\\)]{1,80}$",
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/PaymentAccountIdentifier"
                    }
                },
                "required": [
                    "account_holder_name",
                    "account_identifier"
                ],
                "title": "Remitter account details",
                "type": "object"
            },
            "RemitterResponse": {
                "description": "Remitter\n\n_**Note:** This field is required when OAuth2 token is used._\n",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder.",
                        "example": [
                            "Mike Smith"
                        ],
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/PaymentAccountIdentifierResponse"
                    }
                },
                "title": "Remitter account details",
                "type": "object"
            },
            "Retry": {
                "description": "> 🚧 This is an opt-in feature.\n> \n> Please Contact us to enable this feature.\n\nOptional field to enable Retry for this payment.\n\nRetry is performed as frequently as possible based on the nature of the error in order to maximise conversion.\nRead more about [retry here](doc:create-a-payment-on-a-mandate#optional-enable-retries-for-failed-payments).\n",
                "discriminator": {
                    "mapping": {
                        "smart": "#/components/schemas/RetrySmart",
                        "standard": "#/components/schemas/RetryStandard"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RetryStandard"
                    },
                    {
                        "$ref": "#/components/schemas/RetrySmart"
                    }
                ],
                "title": "Retry",
                "type": "object"
            },
            "RetryOption": {
                "enum": [
                    "Restart"
                ],
                "example": "Restart",
                "type": "string"
            },
            "RetrySmart": {
                "properties": {
                    "ensure_minimum_balance_in_minor": {
                        "description": "The payment is attempted only if the remaining balance in the account is at least this amount.\n\nThis should be 'cent' value. eg. 100 = 1GBP.\n\nPayment will only be attempted if the available balance (including any overdrafts) is at least `ensure_minimum_balance_in_minor` + `amount_in_minor`.\n",
                        "minimum": 1,
                        "type": "number"
                    },
                    "for": {
                        "default": "24h",
                        "description": "How long to retry this payment for (between `30m` - `90d`).\n\nThis should be the number followed by a unit (e.g `m`, `h` or `d` for minute, hour or day respectively).\n",
                        "example": "1h",
                        "type": "string"
                    },
                    "type": {
                        "description": "Smart retry feature increases payment conversion by automatically retrying failed payments based on various criteria.\n\nThis feature must be enabled for clients, otherwise the request fails with the 403 Forbidden status code.\n",
                        "enum": [
                            "smart"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Smart",
                "type": "object"
            },
            "RetryStandard": {
                "properties": {
                    "for": {
                        "default": "30m",
                        "description": "How long to retry this payment for (between `30m` - `6h`).\n\nThis should be the number followed by a unit (e.g `m`, `h` or `d` for minute, hour or day respectively).\n",
                        "example": "30m",
                        "type": "string"
                    },
                    "type": {
                        "description": "Standard retry feature increases payment conversion by automatically retrying payments that failed due to a provider error.\n\nThis feature must be enabled for clients, otherwise the request will fail with a 403 Forbidden status code.\n",
                        "enum": [
                            "standard"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Standard",
                "type": "object"
            },
            "ReturnFor": {
                "discriminator": {
                    "mapping": {
                        "identified": "#/components/schemas/ReturnForIdentified",
                        "unknown": "#/components/schemas/ReturnForUnknown"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ReturnForIdentified"
                    },
                    {
                        "$ref": "#/components/schemas/ReturnForUnknown"
                    }
                ],
                "title": "Return for",
                "type": "object"
            },
            "ReturnForIdentified": {
                "properties": {
                    "returned_id": {
                        "description": "Unique ID for the outbound transaction that returned",
                        "example": "0cd1b0f7-71bc-4d24-b209-95259dadcc20",
                        "type": "string"
                    },
                    "type": {
                        "description": "This external payment returned an outbound transaction.\n",
                        "enum": [
                            "identified"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "returned_id"
                ],
                "title": "Identified",
                "type": "object"
            },
            "ReturnForUnknown": {
                "properties": {
                    "type": {
                        "description": "This external payment returned an unknown outbound transaction.\n",
                        "enum": [
                            "unknown"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Unknown",
                "type": "object"
            },
            "ReversalReason": {
                "description": "The reason for the payment reversal.\n",
                "enum": [
                    "corrected",
                    "failed",
                    "disputed"
                ],
                "example": "corrected",
                "type": "string"
            },
            "ReversedAt": {
                "description": "Date and time the payment was reversed.",
                "example": "2023-06-13T15:00:00.000Z",
                "format": "datetime",
                "type": "string"
            },
            "RevocationSource": {
                "description": "Source for the revocation",
                "enum": [
                    "client",
                    "provider"
                ],
                "type": "string"
            },
            "RiskAssessment": {
                "description": "An optional field for configuring risk assessment and the `payment_creditable` webhook. [Learn how to enable this field](/docs/payment-risk-and-credit-notifications#multiple-payment_creditable-behaviours-with-the-segment-parameter).\n",
                "properties": {
                    "segment": {
                        "description": "The risk segment of this payment. Please contact us before sending this field.\npattern: `^[^\\(\\)]+$`\n",
                        "example": "Flights",
                        "pattern": "^[^\\(\\)]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Scheme": {
                "properties": {
                    "fee": {
                        "properties": {
                            "amount_in_minor": {
                                "description": "The fee amount that applies to this payment, expressed in the minor unit of the currency.",
                                "example": 1,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "currency": {
                                "description": "The currency of the fee.",
                                "example": "EUR",
                                "type": "string"
                            }
                        },
                        "required": [
                            "amount_in_minor",
                            "currency"
                        ],
                        "type": "object"
                    },
                    "id": {
                        "$ref": "#/components/schemas/SchemeId"
                    },
                    "recommended": {
                        "description": "Whether the scheme has been recommended for use for this particular payment.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "recommended"
                ],
                "title": "Scheme",
                "type": "object"
            },
            "SchemeId": {
                "description": "The unique identifier for the scheme.",
                "example": "faster_payments_service",
                "type": "string"
            },
            "SchemeSelectionInstantOnly": {
                "description": "Only allow providers that support instant payments.",
                "properties": {
                    "allow_remitter_fee": {
                        "default": false,
                        "description": "Whether to allow providers that might charge the remitter a transaction fee. If `false`, only providers supporting schemes that are free will be available to select in the provider selection action.\nUnless explicitly set, will default to `false`.\n",
                        "type": "boolean"
                    },
                    "instant_override_provider_ids": {
                        "description": "An array of provider ids. If the user selects one of the providers specified in this list, the payment always goes through an instant scheme. This ignores any settings you specify for allow_remitter_fee.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "non_instant_override_provider_ids": {
                        "description": "An array of provider ids. If the user selects one of the providers specified in this list, the payment always goes through a non instant scheme. This ignores any settings you specify for allow_remitter_fee.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of scheme selection.\nOnly allow providers that support instant payments.\n",
                        "enum": [
                            "instant_only"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Instant only",
                "type": "object"
            },
            "SchemeSelectionInstantPreferred": {
                "description": "Prefer providers that allow instant payments, but allow defaulting back to non-instant payments if unavailable.\n",
                "properties": {
                    "allow_remitter_fee": {
                        "default": false,
                        "description": "Whether to allow providers that might charge the remitter a transaction fee. If `false`, only providers supporting schemes that are free will be available to select in the provider selection action.\nUnless explicitly set, will default to `false`.\n",
                        "type": "boolean"
                    },
                    "instant_override_provider_ids": {
                        "description": "An array of provider ids. If the user selects one of the providers specified in this list, the payment always goes through an instant scheme. This ignores any settings you specify for allow_remitter_fee.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "non_instant_override_provider_ids": {
                        "description": "An array of provider ids. If the user selects one of the providers specified in this list, the payment always goes through a non instant scheme. This ignores any settings you specify for allow_remitter_fee.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of scheme selection.\nPrefer providers that allow instant payments, but allow defaulting back to non-instant payments if unavailable.\n",
                        "enum": [
                            "instant_preferred"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Instant preferred",
                "type": "object"
            },
            "SchemeSelectionPreselected": {
                "description": "Indicates that the scheme for this payment is preselected.",
                "properties": {
                    "scheme_id": {
                        "description": "The id of the scheme to make the payment over.\n",
                        "example": "faster_payments_service",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of scheme selection.",
                        "enum": [
                            "preselected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "scheme_id"
                ],
                "title": "Preselected",
                "type": "object"
            },
            "SchemeSelectionUserSelected": {
                "description": "Indicates that the scheme is to be selected from a collection.\nNote: This scheme selection method is only supported by some versions of TrueLayer's mobile SDKs. Only use this option when you're sure that the end user has a version of your app on their device that supports scheme selection, or they won't be able to complete the payment. If you integrate with TrueLayer APIs directly, you must show the user a UI for scheme selection.\n",
                "properties": {
                    "type": {
                        "description": "The type of scheme selection.",
                        "enum": [
                            "user_selected"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "User selected",
                "type": "object"
            },
            "SearchPaymentsProviders": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/PaymentsProvidersProvider"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "SearchPaymentsProvidersAuthorizationFlow": {
                "properties": {
                    "configuration": {
                        "description": "Options for the authorization flow configuration of the customized UI.\nThis should be the same object you use in the start authorization flow request body.\n",
                        "properties": {
                            "consent": {
                                "description": "Can the UI capture the user's consent?\n\nThis field declares whether the UI supports explicitly capturing and reporting the end user's consent for initiating the payment.\nIf it is omitted, the providers available may be restricted if explicit consent is required.\n",
                                "properties": {
                                    "requirements": {
                                        "$ref": "#/components/schemas/ConsentSupported"
                                    }
                                },
                                "type": "object"
                            },
                            "form": {
                                "description": "Can the UI render form inputs for the end user to interact with?\n\nSome providers require additional inputs, such as the remitter name and account details, to be provided before or during payment authorization.\nTo facilitate this, the API may return a `form` action as part of the authorization flow, prompting the UI to collect the required inputs.\n\nThis field declares whether the UI supports the `form` action.\nIf it is omitted, only providers that do not require additional inputs will be returned. \nIf the provider has been preselected and requires additional inputs, this field is considered mandatory.\n",
                                "properties": {
                                    "input_types": {
                                        "description": "The types of input that the UI is able to render",
                                        "example": [
                                            "text"
                                        ],
                                        "items": {
                                            "$ref": "#/components/schemas/AdditionalInputType"
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "required": [
                                    "input_types"
                                ],
                                "type": "object"
                            },
                            "provider_selection": {
                                "description": "Can your UI render a provider selection screen?\n\nIn payments where you set provider_selection as user_selected, your UI must be able to render a screen where the user can select their payments provider. This parameter is required for payments with user_selected provider selection. For preselected provider selection, it's optional.\n\nUse the provider_selection.filter parameter at payment creation to determine the list of providers you can choose to display in your UI.\n",
                                "properties": {
                                    "icon": {
                                        "$ref": "#/components/schemas/Icon"
                                    }
                                },
                                "type": "object"
                            },
                            "redirect": {
                                "description": "Can the UI redirect the end user to a third-party page?\n\nFor most providers, payment authorization is achieved by redirecting the user to their chosen provider's page, where they can sign in with their credentials and approve the payment.\nThis field declares whether the UI is able to perform such a redirect.\n",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "configuration"
                ],
                "title": "Direct Integration",
                "type": "object"
            },
            "SearchPaymentsProvidersRequest": {
                "properties": {
                    "authorization_flow": {
                        "$ref": "#/components/schemas/SearchPaymentsProvidersAuthorizationFlow"
                    },
                    "capabilities": {
                        "$ref": "#/components/schemas/SearchProviderCapabilities"
                    },
                    "countries": {
                        "description": "Only providers from the specified countries will be returned.",
                        "example": [
                            "GB"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/CountryCode"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "currencies": {
                        "description": "Only schemes that support at least one of the specified currencies will be returned.",
                        "items": {
                            "$ref": "#/components/schemas/MerchantAccountCurrencyCode"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "customer_segments": {
                        "description": "Only providers that cater to at least one of the specified customer segments will be returned.",
                        "example": [
                            "retail"
                        ],
                        "items": {
                            "enum": [
                                "retail",
                                "business",
                                "corporate"
                            ],
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "release_channel": {
                        "default": "general_availability",
                        "description": "Only capabilities that are at least on the specified release channel will be returned.\n\nNote that many European providers are in `public_beta` or `private_beta`.\n",
                        "enum": [
                            "general_availability",
                            "public_beta",
                            "private_beta"
                        ],
                        "example": "general_availability",
                        "type": "string"
                    }
                },
                "required": [
                    "authorization_flow"
                ],
                "title": "Search payment providers",
                "type": "object"
            },
            "SearchProviderCapabilities": {
                "description": "Options for capabilities of the providers.",
                "properties": {
                    "mandates": {
                        "description": "Only providers with `mandates` capabilities will be returned.",
                        "properties": {
                            "vrp_commercial": {
                                "description": "Only providers with `commercial` capability will be returned.",
                                "type": "object"
                            },
                            "vrp_sweeping": {
                                "description": "Only providers with `sweeping` capability will be returned.",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "payments": {
                        "description": "Only providers with `payments` capabilities will be returned.",
                        "properties": {
                            "bank_transfer": {
                                "description": "Only providers with `bank transfer` capability will be returned.",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "SelectAdditionalInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AdditionalInputCommon"
                    },
                    {
                        "properties": {
                            "options": {
                                "description": "Exhaustive list of values to select from.\n",
                                "items": {
                                    "properties": {
                                        "display_text": {
                                            "$ref": "#/components/schemas/DisplayText",
                                            "description": "The value to show to the PSU in the UI select dropdown."
                                        },
                                        "id": {
                                            "description": "The identifier of the option, this is the value to be submitted back to the API.",
                                            "example": "branch-a",
                                            "type": "string"
                                        },
                                        "search_aliases": {
                                            "description": "Alternative search terms for this option.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "display_text"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "type": {
                                "enum": [
                                    "select"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "options"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Select"
            },
            "SettledPaymentSource": {
                "properties": {
                    "account_holder_name": {
                        "type": "string"
                    },
                    "account_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "id": {
                        "example": "e2b41c9d-176k-67aa-b2da-fe1a2b97253c",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "account_holder_name",
                    "account_identifiers"
                ],
                "title": "Settled Payment source",
                "type": "object"
            },
            "SettlementStalledAt": {
                "description": "The date and time at which TrueLayer determined that the payment's settlement was stalled based on the client's chosen delay or the default one.\n",
                "example": "2023-06-13T15:00:00.000Z",
                "format": "datetime",
                "type": "string"
            },
            "StartMandateAuthorizationFlow": {
                "example": {
                    "provider_selection": {},
                    "redirect": {
                        "return_uri": "https://my-site.com/mandate-return"
                    }
                },
                "properties": {
                    "consent": {
                        "description": "Can the UI capture the user's consent?\n\nThis field declares whether the UI supports the `consent` action, which is used to explicitly capture the end user's consent for initiating the payment.\nIf it is omitted, the flow will continue without a `consent` action.\n",
                        "type": "object"
                    },
                    "provider_selection": {
                        "description": "Can the UI render a provider selection screen?\n",
                        "type": "object"
                    },
                    "redirect": {
                        "description": "Can the UI redirect the end user to a third-party page?\n\nConfiguration options are available to constrain if TrueLayer's Hosted\nPayment Page should be leveraged.\n",
                        "properties": {
                            "return_uri": {
                                "description": "During the authorization flow the end user might be redirected\nto another page (e.g. bank website, TrueLayer's Hosted Payment Page).\nThis URL determines where they will be redirected back once they completed\nthe flow on the third-party's website.\n\n`return_uri` must be one of the allowed `return_uri`s registered\nin TrueLayer's Console.\n",
                                "format": "url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "return_uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "provider_selection",
                    "redirect"
                ],
                "type": "object"
            },
            "StartMandateAuthorizationFlowResponse": {
                "discriminator": {
                    "mapping": {
                        "authorizing": "#/components/schemas/MandateAuthorizationFlowAuthorizing",
                        "failed": "#/components/schemas/MandateAuthorizationFlowAuthorizationFailed"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MandateAuthorizationFlowAuthorizing"
                    },
                    {
                        "$ref": "#/components/schemas/MandateAuthorizationFlowAuthorizationFailed"
                    }
                ]
            },
            "StartPaymentAuthorizationFlow": {
                "description": "This object contains a declaration of the client UI's capabilities. The API will adjust the flow depending on this declaration and filter out unsupported providers.\n",
                "example": {
                    "consent": {},
                    "form": {
                        "input_types": [
                            "text"
                        ]
                    },
                    "provider_selection": {},
                    "redirect": {
                        "return_uri": "https://my-site.com/payment-return"
                    },
                    "scheme_selection": {},
                    "user_account_selection": {}
                },
                "properties": {
                    "consent": {
                        "description": "Can your UI capture the user's consent?\n\nThis parameter states whether your UI can explicitly capture and report the end user's consent for initiating the payment.\n\nIf you omit this, the API may restrict the available providers if explicit consent is required.\n",
                        "properties": {
                            "action_type": {
                                "description": "How you will capture consent as part of the authorisation flow:\n- `explicit` (default): The authorisation flow returns an explicit `consent` action for you to respond to at an appropriate moment in the flow.\n- `adjacent`: You provide the consent information alongside other actions in the flow. This enables the UI to combine capturing consent alongside with other actions, if you indicate consent is gathered when you respond to those actions. Note this is currently only supported on `form` actions.\n",
                                "enum": [
                                    "explicit",
                                    "adjacent"
                                ],
                                "type": "string"
                            },
                            "requirements": {
                                "$ref": "#/components/schemas/ConsentSupported"
                            }
                        },
                        "type": "object"
                    },
                    "form": {
                        "description": "Can your UI render form inputs for the user to interact with?\n\nSome providers require additional inputs, such as the remitter name and account details, to be provided before or during payment authorization. To facilitate this, the API may return a `form` action as part of the authorization flow, which means your UI must be able to collect the required inputs.\n\nThis parameter states whether your UI supports the `form` action. If you omit this parameter, the API returns only providers that don't require additional inputs. \n\nIf the provider has been preselected and requires additional inputs, this field is required.\n",
                        "properties": {
                            "input_types": {
                                "description": "The types of input that your UI can render a form to collect.",
                                "example": [
                                    "text"
                                ],
                                "items": {
                                    "$ref": "#/components/schemas/AdditionalInputType"
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "required": [
                            "input_types"
                        ],
                        "type": "object"
                    },
                    "provider_selection": {
                        "description": "Can your UI render a provider selection screen?\n\nIn payments where you set provider_selection as user_selected, your UI must be able to render a screen where the user can select their payments provider. This parameter is required for payments with user_selected provider selection. For preselected provider selection, it's optional.\n\nUse the provider_selection.filter parameter at payment creation to determine the list of providers you can choose to display in your UI.\n",
                        "properties": {
                            "icon": {
                                "$ref": "#/components/schemas/Icon"
                            }
                        },
                        "type": "object"
                    },
                    "redirect": {
                        "description": "Can your UI redirect the user to a third-party page?\n\nFor most providers, the user authorises the payment after they're redirected to their chosen provider's page. There, they can sign in with their credentials and approve the payment. This parameter states whether your UI can handle such a redirect.\n",
                        "properties": {
                            "direct_return_uri": {
                                "description": "Only applicable if you're regulated and have a direct return URI registered with UK providers.\n\nIf you're regulated, you can specify a `direct_return_uri` to attempt the authorization flow via a direct redirect from the provider authorization page to your page without going via TrueLayer.\n\nWe recommend that your `return_uri` is a URI that can handle a non-direct return scenario. This ensures that if the `direct_return_uri` isn't registered with the user's chosen provider, the payment can still be authorized through a Truelayer domain.\n",
                                "format": "url",
                                "type": "string"
                            },
                            "return_uri": {
                                "description": "During the flow, the end user authorises the payment on a third-party site, such as a bank. The return_uri you set is where the user is redirected to after they complete authorisation on the third-party site.\n\nYou must register the `return_uri` in your [settings in Console](/docs/app-settings#allowed-redirect-uris).\n",
                                "format": "url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "return_uri"
                        ],
                        "type": "object"
                    },
                    "scheme_selection": {
                        "description": "Can your UI render a scheme selection screen?\n\nFor payments where you set `scheme_selection` as `user_selected`, your UI must be able to render a screen where the user can select their payments scheme.\n\nThis field is required for payments with `user_selected` scheme selection. For other scheme selection types, it's optional.\n",
                        "type": "object"
                    },
                    "user_account_selection": {
                        "description": "Can your UI render a user account selection screen?\n\nIf the user has previously consented to saving their bank account details with TrueLayer, they can choose from their saved accounts to speed up following payments.\n\nThis field states whether your UI can render a selection screen for these saved accounts. If you omit this, the user isn't presented with this option.\n",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "StartPayoutAuthorizationFlow": {
                "description": "An object representing the request to start a authorization flow for a specific payout\n",
                "example": {
                    "redirect": {
                        "return_uri": "https://my-site.com/payout-return"
                    }
                },
                "properties": {
                    "redirect": {
                        "description": "Can the UI redirect the end user to a third-party page?\n\nFor most providers, payment authorization is achieved by redirecting the user to their chosen provider's page, where they can sign in with their credentials and approve the payment.\nThis field declares whether the UI is able to perform such a redirect.\n",
                        "properties": {
                            "return_uri": {
                                "description": "During the authorization flow the end user might be redirected\nto another page (e.g. bank website, TrueLayer's Hosted Payment Page).\nThis URL determines where they will be redirected back once they completed\nthe flow on the third-party's website.\n\n`return_uri` must be one of the allowed `return_uri`s registered\nin TrueLayer's Console.\n",
                                "format": "url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "return_uri"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "redirect"
                ],
                "type": "object"
            },
            "StartPayoutAuthorizationFlowResponse": {
                "discriminator": {
                    "mapping": {
                        "completed": "#/components/schemas/PayoutAuthorizationFlowCompleted",
                        "started": "#/components/schemas/PayoutAuthorizationFlowStarted"
                    },
                    "propertyName": "status"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutAuthorizationFlowStarted"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutAuthorizationFlowCompleted"
                    }
                ]
            },
            "SubmitConsent": {
                "description": "Indicate consent was captured",
                "properties": {
                    "captured": {
                        "$ref": "#/components/schemas/ConsentCaptured"
                    }
                },
                "title": "Submit consent",
                "type": "object"
            },
            "SubmitForm": {
                "properties": {
                    "adjacent": {
                        "$ref": "#/components/schemas/AdjacentActionsSubmission"
                    },
                    "inputs": {
                        "additionalProperties": {
                            "description": "The value of the input identified by the key, as entered by the end user.",
                            "type": "string",
                            "x-additionalPropertiesName": "input_id"
                        },
                        "description": "A dictionary of input values, where the key matches one returned previously in the form action and the value represents the associated value provided by the end user.",
                        "example": {
                            "branch-code": "BRNC-789",
                            "branch-id": "branch-abc-1"
                        }
                    }
                },
                "required": [
                    "inputs"
                ],
                "type": "object"
            },
            "SubmitUserAccountSelection": {
                "discriminator": {
                    "mapping": {
                        "delete": "#/components/schemas/SubmitUserAccountSelectionDelete",
                        "existing": "#/components/schemas/SubmitUserAccountSelectionExisting",
                        "new": "#/components/schemas/SubmitUserAccountSelectionNew"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SubmitUserAccountSelectionNew"
                    },
                    {
                        "$ref": "#/components/schemas/SubmitUserAccountSelectionExisting"
                    },
                    {
                        "$ref": "#/components/schemas/SubmitUserAccountSelectionDelete"
                    }
                ],
                "title": "Submit User Account Selection",
                "type": "object"
            },
            "SubmitUserAccountSelectionDelete": {
                "properties": {
                    "type": {
                        "enum": [
                            "delete"
                        ],
                        "type": "string"
                    },
                    "user_account_id": {
                        "description": "The identifier of the saved account details that have been chosen to be removed.",
                        "example": "25bf2298-9b79-43ab-8896-331b9c44c27f",
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "user_account_id"
                ],
                "title": "Delete",
                "type": "object"
            },
            "SubmitUserAccountSelectionExisting": {
                "properties": {
                    "type": {
                        "enum": [
                            "existing"
                        ],
                        "type": "string"
                    },
                    "user_account_id": {
                        "description": "The identifier of the saved account details that have been chosen for re-use.",
                        "example": "25bf2298-9b79-43ab-8896-331b9c44c27f",
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "user_account_id"
                ],
                "title": "Existing",
                "type": "object"
            },
            "SubmitUserAccountSelectionNew": {
                "properties": {
                    "type": {
                        "enum": [
                            "new"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "New",
                "type": "object"
            },
            "SweepingFrequency": {
                "description": "How often the available balance will be checked for sweeping.",
                "enum": [
                    "daily",
                    "weekly",
                    "fortnightly"
                ],
                "type": "string"
            },
            "SweepingSettingsConfigured": {
                "properties": {
                    "currency": {
                        "$ref": "#/components/schemas/MerchantAccountCurrencyCode"
                    },
                    "destination": {
                        "discriminator": {
                            "mapping": {
                                "iban": "#/components/schemas/AccountIdentifierIban"
                            },
                            "propertyName": "type"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AccountIdentifierIban"
                            }
                        ]
                    },
                    "frequency": {
                        "$ref": "#/components/schemas/SweepingFrequency"
                    },
                    "max_amount_in_minor": {
                        "description": "A 'cent' value representing the max desired amount,\nabove which funds will be automatically withdrawn.\neg 100 == 1GBP\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "max_amount_in_minor",
                    "currency",
                    "frequency",
                    "destination"
                ],
                "type": "object"
            },
            "SweepingSettingsRequested": {
                "properties": {
                    "frequency": {
                        "$ref": "#/components/schemas/SweepingFrequency",
                        "description": "How often the available balance will be checked for sweeping,\ndefaults to `daily`.\n"
                    },
                    "max_amount_in_minor": {
                        "description": "A 'cent' value representing the max desired amount,\nabove which funds will be automatically withdrawn.\neg 100 == 1GBP\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "max_amount_in_minor"
                ],
                "type": "object"
            },
            "TextAdditionalInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TextAdditionalInputCommon"
                    },
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "text"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Text"
            },
            "TextAdditionalInputCommon": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AdditionalInputCommon"
                    },
                    {
                        "properties": {
                            "format": {
                                "description": "The type of text input that this represents.",
                                "enum": [
                                    "any",
                                    "numerical",
                                    "alphabetical",
                                    "alphanumerical",
                                    "email",
                                    "sort_code",
                                    "account_number",
                                    "iban"
                                ],
                                "type": "string"
                            },
                            "max_length": {
                                "description": "The maximum length (inclusive) of the text input value.",
                                "example": 40,
                                "type": "integer"
                            },
                            "min_length": {
                                "description": "The minimum length (inclusive) of the text input value.",
                                "example": 1,
                                "type": "integer"
                            },
                            "regexes": {
                                "description": "A collection of regexes to validate the input against.",
                                "items": {
                                    "properties": {
                                        "message": {
                                            "$ref": "#/components/schemas/DisplayText",
                                            "description": "A validation message to show if the text input does not match the corresponding regex."
                                        },
                                        "regex": {
                                            "description": "A regular expression for defining the accepted format of the text input.",
                                            "example": "^[\\w\\d ]$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "regex",
                                        "message"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "sensitive": {
                                "description": "Whether or not the input contains sensitive information (e.g. a password). This can be used to render a field in the UI that masks input.",
                                "example": true,
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "format",
                            "sensitive",
                            "min_length",
                            "max_length"
                        ],
                        "type": "object"
                    }
                ]
            },
            "TextWithImageAdditionalInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TextAdditionalInputCommon"
                    },
                    {
                        "properties": {
                            "image": {
                                "$ref": "#/components/schemas/Image"
                            },
                            "type": {
                                "enum": [
                                    "text_with_image"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type",
                            "image"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Text With Image"
            },
            "Transaction": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/TransactionMerchantAccountPayment"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionExternalPayment"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPayoutPending"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPayoutExecuted"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionRefund"
                    }
                ]
            },
            "TransactionCommon": {
                "properties": {
                    "amount_in_minor": {
                        "minimum": 1,
                        "type": "integer"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/MerchantAccountCurrencyCode"
                    },
                    "id": {
                        "$ref": "#/components/schemas/TransactionId"
                    }
                },
                "required": [
                    "id",
                    "currency",
                    "amount_in_minor"
                ],
                "type": "object"
            },
            "TransactionExternalPayment": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "external_payment"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPayinCommon"
                    },
                    {
                        "properties": {
                            "remitter": {
                                "properties": {
                                    "account_holder_name": {
                                        "description": "The name of the external account holder.",
                                        "type": "string"
                                    },
                                    "account_identifiers": {
                                        "items": {
                                            "$ref": "#/components/schemas/AccountIdentifier"
                                        },
                                        "type": "array"
                                    },
                                    "reference": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "account_holder_name",
                                    "account_identifiers",
                                    "reference"
                                ],
                                "type": "object"
                            },
                            "return_for": {
                                "$ref": "#/components/schemas/ReturnFor"
                            }
                        },
                        "required": [
                            "remitter"
                        ],
                        "type": "object"
                    }
                ],
                "description": "Payment into the merchant account _not_ initiated by a TrueLayer Payment",
                "title": "External Payment"
            },
            "TransactionId": {
                "description": "Unique ID for the Transaction",
                "type": "string"
            },
            "TransactionMerchantAccountPayment": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "merchant_account_payment"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPayinCommon"
                    },
                    {
                        "properties": {
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/SettledPaymentSource",
                                "type": "object"
                            }
                        },
                        "required": [
                            "payment_source",
                            "payment_id"
                        ],
                        "type": "object"
                    }
                ],
                "description": "Payment into the merchant account initiated by a TrueLayer Payment",
                "title": "Merchant Account Payment"
            },
            "TransactionPayinCommon": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TransactionCommon"
                    },
                    {
                        "properties": {
                            "settled_at": {
                                "description": "The date and time the transaction was settled",
                                "format": "datetime",
                                "type": "string"
                            },
                            "status": {
                                "enum": [
                                    "settled"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "settled_at"
                        ],
                        "type": "object"
                    }
                ]
            },
            "TransactionPayoutContextCode": {
                "enum": [
                    "withdrawal",
                    "service_payment",
                    "internal"
                ],
                "type": "string"
            },
            "TransactionPayoutDestination": {
                "discriminator": {
                    "mapping": {
                        "business_account": "#/components/schemas/PayoutDestinationBusinessAccount",
                        "external_account": "#/components/schemas/PayoutDestinationExternalAccount",
                        "payment_source": "#/components/schemas/PayoutDestinationPaymentSource",
                        "user_determined": "#/components/schemas/TransactionPayoutDestinationUserDetermined"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PayoutDestinationExternalAccount"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutDestinationPaymentSource"
                    },
                    {
                        "$ref": "#/components/schemas/PayoutDestinationBusinessAccount"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPayoutDestinationUserDetermined"
                    }
                ]
            },
            "TransactionPayoutDestinationUserDetermined": {
                "description": "User determined beneficiary details",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the external account holder.\n",
                        "type": "string"
                    },
                    "account_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "reference": {
                        "description": "The reference for the payout, which displays in the beneficiary's bank statement.\n\nFor SEPA payments, the maximum length is **140 characters**. The format must respect the requirements specified [here](https://www.europeanpaymentscouncil.eu/document-library/guidance-documents/sepa-requirements-extended-character-set-unicode-subset-best).\n\nFor FPS payments, the maximum length is **18 characters**. The format must respect this regex: `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;{@\\r\\n]*$`\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"user_determined\"",
                        "enum": [
                            "user_determined"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "reference"
                ],
                "title": "User Determined",
                "type": "object"
            },
            "TransactionPayoutExecuted": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "payout"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionCommon"
                    },
                    {
                        "properties": {
                            "beneficiary": {
                                "$ref": "#/components/schemas/TransactionPayoutDestination"
                            },
                            "context_code": {
                                "$ref": "#/components/schemas/TransactionPayoutContextCode"
                            },
                            "created_at": {
                                "description": "The date and time the transaction was created",
                                "format": "datetime",
                                "type": "string"
                            },
                            "executed_at": {
                                "description": "The date and time the transaction was executed",
                                "format": "datetime",
                                "type": "string"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payout_id": {
                                "$ref": "#/components/schemas/PayoutId"
                            },
                            "returned_by": {
                                "description": "Unique ID for the external payment that returned this payout",
                                "example": "0cd1b0f7-71bc-4d24-b209-95259dadcc20",
                                "type": "string"
                            },
                            "scheme_id": {
                                "$ref": "#/components/schemas/PaymentScheme",
                                "description": "The id of the scheme used to execute the payout"
                            },
                            "status": {
                                "enum": [
                                    "executed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "created_at",
                            "executed_at",
                            "beneficiary",
                            "context_code",
                            "payout_id"
                        ],
                        "type": "object"
                    }
                ],
                "description": "Payment out of the merchant account",
                "title": "Executed Payout"
            },
            "TransactionPayoutPending": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "payout"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionCommon"
                    },
                    {
                        "properties": {
                            "beneficiary": {
                                "$ref": "#/components/schemas/TransactionPayoutDestination"
                            },
                            "context_code": {
                                "$ref": "#/components/schemas/TransactionPayoutContextCode"
                            },
                            "created_at": {
                                "description": "The date and time the transaction was created",
                                "format": "datetime",
                                "type": "string"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payout_id": {
                                "$ref": "#/components/schemas/PayoutId"
                            },
                            "status": {
                                "enum": [
                                    "pending"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "created_at",
                            "beneficiary",
                            "context_code",
                            "payout_id"
                        ],
                        "type": "object"
                    }
                ],
                "description": "Payment out of the merchant account, pending settlement.",
                "title": "Pending Payout"
            },
            "TransactionRefund": {
                "allOf": [
                    {
                        "properties": {
                            "type": {
                                "enum": [
                                    "refund"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "type"
                        ],
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionCommon"
                    },
                    {
                        "properties": {
                            "beneficiary": {
                                "$ref": "#/components/schemas/PayoutDestinationPaymentSource"
                            },
                            "context_code": {
                                "$ref": "#/components/schemas/TransactionPayoutContextCode"
                            },
                            "created_at": {
                                "description": "The date and time the transaction was created",
                                "format": "datetime",
                                "type": "string"
                            },
                            "executed_at": {
                                "description": "The date and time the transaction was executed, provided in status \"executed\"",
                                "format": "datetime",
                                "type": "string"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "refund_id": {
                                "$ref": "#/components/schemas/PaymentRefundId"
                            },
                            "returned_by": {
                                "description": "Unique ID for the external payment that returned this refund",
                                "example": "0cd1b0f7-71bc-4d24-b209-95259dadcc20",
                                "type": "string"
                            },
                            "scheme_id": {
                                "$ref": "#/components/schemas/PaymentScheme",
                                "description": "The id of the scheme used to execute the payout"
                            },
                            "status": {
                                "enum": [
                                    "pending",
                                    "executed"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status",
                            "created_at",
                            "beneficiary",
                            "context_code",
                            "refund_id",
                            "payment_id"
                        ],
                        "type": "object"
                    }
                ],
                "description": "Payment refund out of the merchant account",
                "title": "Refund"
            },
            "UltimateCounterpartyBusinessClient": {
                "description": "The business details of the ultimate counterparty.",
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/Address",
                        "description": "The address of the business.\n\nThis is required if `registration_number` is not provided.\n"
                    },
                    "commercial_name": {
                        "description": "The commercial name of the business.\npattern: `^.{1,100}$`\n",
                        "maxLength": 100,
                        "pattern": "^.{1,100}$",
                        "type": "string"
                    },
                    "mcc": {
                        "description": "The merchant category code of the business.\npattern: `^[0-9]{4}$`\n",
                        "example": "1234",
                        "maxLength": 4,
                        "pattern": "^[0-9]{4}$",
                        "type": "string"
                    },
                    "registration_number": {
                        "description": "The registration number of the business.\n\nThis is required if `address` is not provided.\npattern: `^.{1,35}$`\n",
                        "maxLength": 35,
                        "pattern": "^.{1,35}$",
                        "type": "string"
                    },
                    "trading_name": {
                        "description": "The trading name of the business.\npattern: `^.{1,70}$`\n",
                        "maxLength": 70,
                        "pattern": "^.{1,70}$",
                        "type": "string"
                    },
                    "type": {
                        "description": "The ultimate counterparty is a registered business.",
                        "enum": [
                            "business_client"
                        ],
                        "type": "string"
                    },
                    "url": {
                        "description": "The website of the business. This must be a valid URL.",
                        "example": "https://truelayer.com",
                        "maxLength": 100,
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "trading_name"
                ],
                "title": "Business Client",
                "type": "object"
            },
            "UltimateCounterpartyBusinessDivision": {
                "description": "The business details of the ultimate counterparty.",
                "properties": {
                    "id": {
                        "description": "The identifier of the business division.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the business division.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The ultimate counterparty is a division of the main business.",
                        "enum": [
                            "business_division"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id",
                    "name"
                ],
                "title": "Business Division",
                "type": "object"
            },
            "UserAccountDetails": {
                "properties": {
                    "id": {
                        "description": "The identifier of the saved user account details.",
                        "example": "25bf2298-9b79-43ab-8896-331b9c44c27f",
                        "type": "string"
                    },
                    "last_used_at": {
                        "description": "The date and time of when this account was used.",
                        "example": "2022-12-01T15:12:35.123Z",
                        "format": "datetime",
                        "type": "string"
                    },
                    "masked_account_identifier": {
                        "description": "A masked representation of the saved account identifier.",
                        "example": "******12",
                        "type": "string"
                    },
                    "provider": {
                        "$ref": "#/components/schemas/Provider"
                    }
                },
                "required": [
                    "id",
                    "provider",
                    "masked_account_identifier",
                    "last_used_at"
                ],
                "type": "object"
            },
            "UserId": {
                "description": "Unique ID for the User",
                "example": "f9b48c9d-176b-46dd-b2da-fe1a2b77350c",
                "type": "string"
            },
            "UserPaymentSources": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/SettledPaymentSource"
                        },
                        "minItems": 0,
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "items"
                ],
                "title": "UserPaymentSources",
                "type": "object"
            },
            "Verification": {
                "discriminator": {
                    "mapping": {
                        "automated": "#/components/schemas/AutomatedVerification"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AutomatedVerification"
                    }
                ]
            },
            "VRPConstraints": {
                "description": "Sets the limits for the payments that can be created by the mandate.\n\nIf a payment is attempted that doesn't fit within these constraints it will fail.\n\nThese constraints are considered only for VRP mandates (not direct debit).\n",
                "properties": {
                    "maximum_individual_amount": {
                        "description": "A 'cent' value representing the maximum amount that can be specified in a payment instruction",
                        "maximum": 100000000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "periodic_limits": {
                        "description": "The limits for the payments that can be created by the mandate within a specified time period.\n\nAt least one periodic limit must be provided upon mandate creation.\n",
                        "properties": {
                            "day": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodicLimit"
                                    },
                                    {
                                        "description": "Limit for payments made within a day"
                                    }
                                ]
                            },
                            "fortnight": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodicLimit"
                                    },
                                    {
                                        "description": "Limit for payments made within a fortnight\n\nOnly supports `period_alignment` of `consent`.\n"
                                    }
                                ]
                            },
                            "half_year": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodicLimit"
                                    },
                                    {
                                        "description": "Limit for payments made within 6 months"
                                    }
                                ]
                            },
                            "month": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodicLimit"
                                    },
                                    {
                                        "description": "Limit for payments made within a month"
                                    }
                                ]
                            },
                            "week": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodicLimit"
                                    },
                                    {
                                        "description": "Limit for payments made within a week"
                                    }
                                ]
                            },
                            "year": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/VRPPeriodicLimit"
                                    },
                                    {
                                        "description": "Limit for payments made within a year"
                                    }
                                ]
                            }
                        },
                        "title": "Periodic Limits",
                        "type": "object"
                    },
                    "valid_from": {
                        "description": "Start date time for which the consent remains valid using format `YYYY-MM-DDTHH:mm:ss.sssZ`\n",
                        "example": "2022-01-01T00:00:00.000Z",
                        "format": "datetime",
                        "type": "string"
                    },
                    "valid_to": {
                        "description": "End date time for which the consent remains valid using format `YYYY-MM-DDTHH:mm:ss.sssZ`\n",
                        "example": "2022-12-31T23:59:59.999Z",
                        "format": "datetime",
                        "type": "string"
                    }
                },
                "required": [
                    "maximum_individual_amount",
                    "periodic_limits"
                ],
                "title": "Constraints"
            },
            "VRPPaymentDestination": {
                "discriminator": {
                    "mapping": {
                        "external_account": "#/components/schemas/MandateDestinationExternalAccount",
                        "merchant_account": "#/components/schemas/MandateDestinationMerchantAccount"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MandateDestinationMerchantAccount"
                    },
                    {
                        "$ref": "#/components/schemas/MandateDestinationExternalAccount"
                    }
                ]
            },
            "VRPPaymentRemitter": {
                "description": "The routing information for the remitter bank account.",
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the remitter account holder.\n",
                        "type": "string"
                    },
                    "account_identifier": {
                        "$ref": "#/components/schemas/PaymentAccountIdentifier"
                    }
                },
                "required": [
                    "account_holder_name",
                    "account_identifier"
                ],
                "title": "Remitter Account",
                "type": "object"
            },
            "VRPPeriodicLimit": {
                "properties": {
                    "maximum_amount": {
                        "description": "A 'cent' value representing the maximum cumulative amount that all successful payments can claim in the period.\n\n`maximum_amount` must be greater or equal to `maximum_individual_amount` specified on the `constraints` object if `maximum_individual_amount` has been specified.\n",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "period_alignment": {
                        "description": "Specifies whether the period starts on the date of consent creation or lines up with a calendar.\n\nIf the `period_alignment` is `calendar`, the limit is pro-rated in the first period to the remaining number of days.\n",
                        "enum": [
                            "consent",
                            "calendar"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "period_alignment",
                    "maximum_amount"
                ],
                "title": "Periodic Limit",
                "type": "object"
            },
            "VRPPeriodState": {
                "properties": {
                    "current_amount": {
                        "description": "A 'cent' value representing the current cumulative amount that all successful payments have claimed in the period.\n",
                        "type": "integer"
                    },
                    "end_date": {
                        "description": "The end date for the current period, and start of the next period",
                        "example": "2021-02-06",
                        "format": "date",
                        "type": "string"
                    },
                    "maximum_available_amount": {
                        "description": "A 'cent' value representing the maximum cumulative amount that all successful payments can claim in the period.\n\nThis might be less than the `maximum_amount` requested due to proration on calendar aligned periods.\n",
                        "type": "integer"
                    },
                    "period_alignment": {
                        "description": "Specifies whether the period starts on the date of consent creation or lines up with a calendar.\n\nIf the `period_alignment` is `calendar`, the limit is pro-rated in the first period to the remaining number of days.\n",
                        "enum": [
                            "consent",
                            "calendar"
                        ],
                        "type": "string"
                    },
                    "start_date": {
                        "description": "The start date for the current period",
                        "example": "2021-01-30",
                        "format": "date",
                        "type": "string"
                    }
                },
                "required": [
                    "period_alignment",
                    "maximum_available_amount",
                    "current_amount",
                    "start_date",
                    "end_date"
                ],
                "title": "Period State",
                "type": "object"
            },
            "WebhookBalanceNotification": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "available_balance_in_minor": {
                                "$ref": "#/components/schemas/AvailableBalance"
                            },
                            "current_balance_in_minor": {
                                "$ref": "#/components/schemas/CurrentBalance"
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "merchant_account_id": {
                                "$ref": "#/components/schemas/MerchantAccountId"
                            },
                            "status": {
                                "description": "Whether the balance is approaching the threshold, below the threshold, or has recovered.",
                                "enum": [
                                    "approaching_threshold",
                                    "below_threshold",
                                    "recovered"
                                ],
                                "type": "string"
                            },
                            "threshold_in_minor": {
                                "description": "The balance threshold, expressed in the smallest denomination of the account's currency.\n",
                                "type": "integer"
                            },
                            "type": {
                                "enum": [
                                    "balance_notification"
                                ]
                            }
                        },
                        "required": [
                            "merchant_account_id",
                            "current_balance_in_minor",
                            "available_balance_in_minor",
                            "status"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Balance Notification"
            },
            "WebhookCommon": {
                "properties": {
                    "event_id": {
                        "description": "Unique ID of the event.\n",
                        "example": "b8d4dda0-ff2c-4d77-a6da-4615e4bad941",
                        "type": "string"
                    },
                    "event_version": {
                        "description": "The version of the event schema.\n",
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "event_version",
                    "event_id"
                ],
                "type": "object"
            },
            "WebhookExternalPaymentReceived": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "amount_in_minor": {
                                "minimum": 1,
                                "type": "integer"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/MerchantAccountCurrencyCode"
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "merchant_account_id": {
                                "$ref": "#/components/schemas/MerchantAccountId"
                            },
                            "remitter": {
                                "properties": {
                                    "account_holder_name": {
                                        "description": "The name of the external account holder.\n",
                                        "type": "string"
                                    },
                                    "account_identifiers": {
                                        "items": {
                                            "$ref": "#/components/schemas/AccountIdentifier"
                                        },
                                        "type": "array"
                                    },
                                    "reference": {
                                        "description": "The reference for the external payment.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "account_holder_name",
                                    "account_identifiers"
                                ],
                                "type": "object"
                            },
                            "settled_at": {
                                "description": "Date and time the transaction settled",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "transaction_id": {
                                "$ref": "#/components/schemas/TransactionId"
                            },
                            "type": {
                                "enum": [
                                    "external_payment_received"
                                ]
                            }
                        },
                        "required": [
                            "transaction_id",
                            "settled_at",
                            "currency",
                            "amount_in_minor",
                            "remitter",
                            "merchant_account_id"
                        ],
                        "type": "object"
                    }
                ],
                "title": "External Payment"
            },
            "WebhookMandateAuthorized": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "authorized_at": {
                                "description": "Date and time the mandate became authorized",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "mandate_id": {
                                "$ref": "#/components/schemas/MandateId"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "statement_reference": {
                                "description": "Statement reference for the mandate",
                                "type": "string"
                            },
                            "type": {
                                "enum": [
                                    "mandate_authorized"
                                ]
                            }
                        },
                        "required": [
                            "mandate_id",
                            "authorized_at",
                            "statement_reference"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Mandate Authorized"
            },
            "WebhookMandateFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "failed_at": {
                                "description": "Date and time the mandate failed",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/MandateFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/MandateFailureStage"
                            },
                            "mandate_id": {
                                "$ref": "#/components/schemas/MandateId"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "type": {
                                "enum": [
                                    "mandate_failed"
                                ]
                            }
                        },
                        "required": [
                            "mandate_id",
                            "failure_reason",
                            "failure_stage",
                            "failed_at"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Mandate Failed"
            },
            "WebhookMandateInitialPaymentCreated": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "mandate_id": {
                                "$ref": "#/components/schemas/MandateId"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment": {
                                "$ref": "#/components/schemas/MandateInitialPayment"
                            },
                            "type": {
                                "enum": [
                                    "mandate_initial_payment_created"
                                ]
                            }
                        },
                        "required": [
                            "mandate_id",
                            "payment"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Mandate Initial Payment Created"
            },
            "WebhookMandateRemitterChanged": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "account_holder_name": {
                                "description": "The name associated to the new remitter account.",
                                "type": "string"
                            },
                            "account_identifier": {
                                "$ref": "#/components/schemas/PaymentAccountIdentifier",
                                "description": "The account id of the new remitter account."
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "mandate_id": {
                                "$ref": "#/components/schemas/MandateId"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "remitter_changed_at": {
                                "description": "Date and time the remitter details of the mandate were changed.",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "type": {
                                "enum": [
                                    "mandate_remitter_changed"
                                ]
                            }
                        },
                        "required": [
                            "mandate_id",
                            "remitter_changed_at",
                            "account_holder_name",
                            "account_identifier"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Mandate Remitter Changed"
            },
            "WebhookMandateRevoked": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "mandate_id": {
                                "$ref": "#/components/schemas/MandateId"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "revocation_reason": {
                                "description": "The reason why the mandate was revoked. This is currently only available for direct debit mandates.",
                                "type": "string"
                            },
                            "revocation_source": {
                                "$ref": "#/components/schemas/RevocationSource"
                            },
                            "revoked_at": {
                                "description": "Date and time the mandate became revoked",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "type": {
                                "enum": [
                                    "mandate_revoked"
                                ]
                            }
                        },
                        "required": [
                            "mandate_id",
                            "revoked_at",
                            "revocation_source"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Mandate Revoked"
            },
            "WebhookPaymentAuthorized": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "authorized_at": {
                                "description": "Date and time the payment was authorized",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "payment_method": {
                                "$ref": "#/components/schemas/PaymentMethodWebhook"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/PaymentSource"
                            },
                            "type": {
                                "enum": [
                                    "payment_authorized"
                                ]
                            }
                        },
                        "required": [
                            "payment_id",
                            "payment_method",
                            "authorized_at"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Authorized"
            },
            "WebhookPaymentCreditable": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "creditable_at": {
                                "$ref": "#/components/schemas/CreditableAt"
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "type": {
                                "enum": [
                                    "payment_creditable"
                                ]
                            }
                        },
                        "required": [
                            "payment_id",
                            "creditable_at"
                        ],
                        "type": "object"
                    }
                ],
                "description": "Sent when the payment is ready to be credited to the user, and the services the user has paid for\nbe granted. Either the payment has settled, or any settlement risk has been accepted.\n\nThis webhook is optional, by default it is enabled and it will be sent on payment settlement. [Learn more about the configuration options](/docs/payment-risk-and-credit-notifications), and contact us if you would like this webhook to be disabled or to have a different behavior.\n",
                "title": "Payment creditable"
            },
            "WebhookPaymentDisputed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "disputed_at": {
                                "$ref": "#/components/schemas/DisputedAt"
                            },
                            "disputed_reason": {
                                "$ref": "#/components/schemas/DisputedReason"
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "type": {
                                "enum": [
                                    "payment_disputed"
                                ]
                            }
                        },
                        "required": [
                            "payment_id",
                            "disputed_at"
                        ],
                        "type": "object"
                    }
                ],
                "description": "Sent when a indemnity claim has been made against a payment. This currently only applies to payments made via direct debit mandates.\n",
                "title": "Payment disputed"
            },
            "WebhookPaymentExecuted": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "executed_at": {
                                "description": "Date and time the payment executed",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "payment_method": {
                                "$ref": "#/components/schemas/PaymentMethodWebhook"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/PaymentSource"
                            },
                            "type": {
                                "enum": [
                                    "payment_executed"
                                ]
                            }
                        },
                        "required": [
                            "payment_id",
                            "payment_method",
                            "executed_at"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Executed"
            },
            "WebhookPaymentFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "failed_at": {
                                "description": "Date and time the payment failed",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/PaymentFailureReason"
                            },
                            "failure_stage": {
                                "$ref": "#/components/schemas/PaymentFailureStage"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "payment_method": {
                                "$ref": "#/components/schemas/PaymentMethodWebhook"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/PaymentSource"
                            },
                            "type": {
                                "enum": [
                                    "payment_failed"
                                ]
                            }
                        },
                        "required": [
                            "payment_id",
                            "payment_method",
                            "failed_at",
                            "failure_stage",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Failed"
            },
            "WebhookPaymentLinkDisabled": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "disabled_at": {
                                "description": "Date and time the payment link was disabled",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "disabled_reason": {
                                "enum": [
                                    "expired",
                                    "cancelled",
                                    "fulfilled"
                                ]
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "payment_link_id": {
                                "$ref": "#/components/schemas/PaymentLinkId"
                            },
                            "type": {
                                "enum": [
                                    "payment_link_disabled"
                                ]
                            }
                        },
                        "required": [
                            "payment_link_id",
                            "disabled_reason",
                            "disabled_at"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Payment Link Disabled"
            },
            "WebhookPaymentLinkPaymentCreated": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "payment": {
                                "properties": {
                                    "created_at": {
                                        "description": "Date and time the payment got created from the payment link",
                                        "example": "2021-12-25T15:00:00.000Z",
                                        "format": "datetime",
                                        "type": "string"
                                    },
                                    "id": {
                                        "$ref": "#/components/schemas/PaymentId"
                                    }
                                },
                                "required": [
                                    "id",
                                    "created_at"
                                ],
                                "type": "object"
                            },
                            "payment_link_id": {
                                "$ref": "#/components/schemas/PaymentLinkId"
                            },
                            "type": {
                                "enum": [
                                    "payment_link_payment_created"
                                ]
                            }
                        },
                        "required": [
                            "payment_link_id",
                            "payment"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Payment Link Payment Created"
            },
            "WebhookPaymentReversed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "reversal_reason": {
                                "$ref": "#/components/schemas/ReversalReason"
                            },
                            "reversed_at": {
                                "$ref": "#/components/schemas/ReversedAt"
                            },
                            "type": {
                                "enum": [
                                    "payment_reversed"
                                ]
                            }
                        },
                        "required": [
                            "payment_id",
                            "reversed_at",
                            "reversal_reason"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Payment Reversed"
            },
            "WebhookPaymentSettled": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "payment_method": {
                                "$ref": "#/components/schemas/PaymentMethodWebhook"
                            },
                            "payment_source": {
                                "$ref": "#/components/schemas/SettledPaymentSource"
                            },
                            "settled_at": {
                                "description": "Date and time the payment settled",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "type": {
                                "enum": [
                                    "payment_settled"
                                ]
                            },
                            "user_id": {
                                "$ref": "#/components/schemas/UserId"
                            }
                        },
                        "required": [
                            "payment_id",
                            "payment_method",
                            "settled_at",
                            "payment_source",
                            "user_id"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Settled"
            },
            "WebhookPaymentSettlementStalled": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "settlement_stalled_at": {
                                "$ref": "#/components/schemas/SettlementStalledAt"
                            },
                            "type": {
                                "enum": [
                                    "payment_settlement_stalled"
                                ]
                            }
                        },
                        "required": [
                            "payment_id",
                            "settlement_stalled_at"
                        ],
                        "type": "object"
                    }
                ],
                "description": "Sent when the payment doesn't reach settled status after a certain amount of time.\n\nThis webhook is optional, and is disabled by default. Contact us if you would like this webhook to\nbe enabled.\n",
                "title": "Settlement Stalled"
            },
            "WebhookPayoutBeneficiaryBusinessAccount": {
                "properties": {
                    "type": {
                        "description": "Type \"business_account\"",
                        "enum": [
                            "business_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Business account",
                "type": "object"
            },
            "WebhookPayoutBeneficiaryExternalAccount": {
                "properties": {
                    "type": {
                        "description": "Type \"external_account\"",
                        "enum": [
                            "external_account"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "External account",
                "type": "object"
            },
            "WebhookPayoutBeneficiaryPaymentSource": {
                "properties": {
                    "payment_source_id": {
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"payment_source\"",
                        "enum": [
                            "payment_source"
                        ],
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "Payment source",
                "type": "object"
            },
            "WebhookPayoutExecuted": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "beneficiary": {
                                "$ref": "#/components/schemas/WebhookPayoutExecutedBeneficiary"
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "executed_at": {
                                "description": "Date and time the payout was executed",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payout_id": {
                                "$ref": "#/components/schemas/PayoutId"
                            },
                            "scheme_id": {
                                "$ref": "#/components/schemas/SchemeId"
                            },
                            "type": {
                                "enum": [
                                    "payout_executed"
                                ]
                            }
                        },
                        "required": [
                            "payout_id",
                            "executed_at",
                            "beneficiary",
                            "scheme_id"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Executed"
            },
            "WebhookPayoutExecutedBeneficiary": {
                "discriminator": {
                    "mapping": {
                        "business_account": "#/components/schemas/WebhookPayoutBeneficiaryBusinessAccount",
                        "external_account": "#/components/schemas/WebhookPayoutBeneficiaryExternalAccount",
                        "payment_source": "#/components/schemas/WebhookPayoutBeneficiaryPaymentSource",
                        "user_determined": "#/components/schemas/WebhookPayoutExecutedBeneficiaryUserDetermined"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/WebhookPayoutBeneficiaryPaymentSource"
                    },
                    {
                        "$ref": "#/components/schemas/WebhookPayoutBeneficiaryBusinessAccount"
                    },
                    {
                        "$ref": "#/components/schemas/WebhookPayoutBeneficiaryExternalAccount"
                    },
                    {
                        "$ref": "#/components/schemas/WebhookPayoutExecutedBeneficiaryUserDetermined"
                    }
                ],
                "type": "object"
            },
            "WebhookPayoutExecutedBeneficiaryUserDetermined": {
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the account holder.\n",
                        "type": "string"
                    },
                    "account_identifiers": {
                        "description": "Account routing information associated to the beneficiary of the payout.\n",
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "provider_id": {
                        "description": "The id of the banking provider associated to the account identifiers present in this object.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"user_determined\"",
                        "enum": [
                            "user_determined"
                        ],
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/PaymentUser"
                    }
                },
                "required": [
                    "type",
                    "user",
                    "provider_id",
                    "account_holder_name",
                    "account_identifiers"
                ],
                "title": "User determined",
                "type": "object"
            },
            "WebhookPayoutFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "beneficiary": {
                                "$ref": "#/components/schemas/WebhookPayoutFailedBeneficiary"
                            },
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "failed_at": {
                                "description": "Date and time the payout failed",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/OutboundPaymentFailureReason"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payout_id": {
                                "$ref": "#/components/schemas/PayoutId"
                            },
                            "type": {
                                "enum": [
                                    "payout_failed"
                                ]
                            }
                        },
                        "required": [
                            "payout_id",
                            "failed_at",
                            "failure_reason",
                            "beneficiary"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Failed"
            },
            "WebhookPayoutFailedBeneficiary": {
                "discriminator": {
                    "mapping": {
                        "business_account": "#/components/schemas/WebhookPayoutBeneficiaryBusinessAccount",
                        "external_account": "#/components/schemas/WebhookPayoutBeneficiaryExternalAccount",
                        "payment_source": "#/components/schemas/WebhookPayoutBeneficiaryPaymentSource",
                        "user_determined": "#/components/schemas/WebhookPayoutFailedBeneficiaryUserDetermined"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/WebhookPayoutBeneficiaryPaymentSource"
                    },
                    {
                        "$ref": "#/components/schemas/WebhookPayoutBeneficiaryBusinessAccount"
                    },
                    {
                        "$ref": "#/components/schemas/WebhookPayoutBeneficiaryExternalAccount"
                    },
                    {
                        "$ref": "#/components/schemas/WebhookPayoutFailedBeneficiaryUserDetermined"
                    }
                ],
                "type": "object"
            },
            "WebhookPayoutFailedBeneficiaryUserDetermined": {
                "properties": {
                    "account_holder_name": {
                        "description": "The name of the account holder.\n\nNot available if the payout failed during authorization or verification.\n",
                        "type": "string"
                    },
                    "account_identifiers": {
                        "description": "Account routing information associated to the beneficiary of the payout.\n\nNot available if the payout failed during authorization or verification.\n",
                        "items": {
                            "$ref": "#/components/schemas/AccountIdentifier"
                        },
                        "type": "array"
                    },
                    "provider_id": {
                        "description": "The id of the banking provider associated to the account identifiers present in this object.\n\nNot available if the payout failed during authorization or verification.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type \"user_determined\"",
                        "enum": [
                            "user_determined"
                        ],
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/PaymentUser"
                    }
                },
                "required": [
                    "type",
                    "user"
                ],
                "title": "User determined",
                "type": "object"
            },
            "WebhookRefundExecuted": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "executed_at": {
                                "description": "Date and time the refund executed",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "refund_id": {
                                "$ref": "#/components/schemas/PaymentRefundId"
                            },
                            "scheme_id": {
                                "$ref": "#/components/schemas/SchemeId"
                            },
                            "type": {
                                "enum": [
                                    "refund_executed"
                                ]
                            }
                        },
                        "required": [
                            "refund_id",
                            "payment_id",
                            "executed_at"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Executed"
            },
            "WebhookRefundFailed": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/WebhookCommon"
                    },
                    {
                        "properties": {
                            "event_version": {
                                "enum": [
                                    1
                                ]
                            },
                            "failed_at": {
                                "description": "Date and time the refund failed",
                                "example": "2021-12-25T15:00:00.000Z",
                                "format": "datetime",
                                "type": "string"
                            },
                            "failure_reason": {
                                "$ref": "#/components/schemas/OutboundPaymentFailureReason"
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            "payment_id": {
                                "$ref": "#/components/schemas/PaymentId"
                            },
                            "refund_id": {
                                "$ref": "#/components/schemas/PaymentRefundId"
                            },
                            "type": {
                                "enum": [
                                    "refund_failed"
                                ]
                            }
                        },
                        "required": [
                            "refund_id",
                            "payment_id",
                            "failed_at",
                            "failure_reason"
                        ],
                        "type": "object"
                    }
                ],
                "title": "Failed"
            }
        },
        "securitySchemes": {
            "MandateToken": {
                "description": "A secret returned from the create mandate endpoint for use with our authorization endpoints.\nScoped to a single mandate.\n",
                "scheme": "bearer",
                "type": "http"
            },
            "OAuth2": {
                "flows": {
                    "clientCredentials": {
                        "scopes": {
                            "payments": "for accessing all the endpoints of Payments API v3"
                        },
                        "tokenUrl": "https://auth.truelayer.com/connect/token"
                    }
                },
                "type": "oauth2"
            },
            "PaymentToken": {
                "description": "A secret returned from one of our create endpoints for use with our authorization endpoints.\nScoped to a single resource.\n",
                "scheme": "bearer",
                "type": "http"
            }
        }
    },
    "info": {
        "description": "References for Payments API v3\n",
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "title": "Payments API v3",
        "version": "1"
    },
    "openapi": "3.1.0",
    "paths": {
        "/v3/mandates": {
            "get": {
                "description": "List all the mandates associated to the client used.\nThis API must be called using a backend bearer token.\n",
                "operationId": "list-mandate",
                "parameters": [
                    {
                        "description": "ID of the user",
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    },
                    {
                        "in": "query",
                        "name": "cursor",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/Cursor"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListMandates"
                                }
                            }
                        },
                        "description": "Mandates list"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    }
                ],
                "summary": "List mandates",
                "tags": [
                    "Mandates"
                ]
            },
            "post": {
                "description": "Create a new mandate\n\nThis API must be called using a backend bearer token.\n",
                "operationId": "create-mandate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMandate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/MandateCreated"
                                }
                            }
                        },
                        "description": "Mandate Created",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                }
                            }
                        },
                        "description": "Idempotency-Key Concurrency Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "429": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsRateLimitExceeded"
                                }
                            }
                        },
                        "description": "Rate Limit Exceeded"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    }
                ],
                "summary": "Create mandate",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "/v3/mandates/{id}": {
            "get": {
                "description": "Returns a mandate with the stated ID.\n\nThis endpoint can be called either by the regular `backend token` or the `mandate token` for that mandate.\n",
                "operationId": "get-mandate",
                "parameters": [
                    {
                        "description": "ID of the Mandate",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMandate"
                                }
                            }
                        },
                        "description": "Mandate"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Mandate Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    },
                    {
                        "MandateToken": []
                    }
                ],
                "summary": "Get mandate",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "/v3/mandates/{id}/authorization-flow": {
            "post": {
                "description": "Start the authorization flow for a mandate.\n\nThis API can be called:\n- using the `mandate_token` associated with the Mandate you are trying to fetch; or\n- using a backend bearer token.\n",
                "operationId": "start-mandate-authorization-flow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "description": "ID of the Mandate",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MandateId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/StartMandateAuthorizationFlow"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/StartMandateAuthorizationFlowResponse"
                                }
                            }
                        },
                        "description": "Mandate Authorization Flow",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Mandate Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    },
                    {
                        "MandateToken": []
                    }
                ],
                "summary": "Start authorization flow",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "/v3/mandates/{id}/authorization-flow/actions/consent": {
            "post": {
                "description": "Submit the consent given by the user\n\nThis API can be called:\n- using the `mandate_token` associated with the mandate you are trying to authorize;\n- using a backend bearer token.\n",
                "operationId": "submit-consent-mandate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "description": "ID of the mandate",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MandateId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitConsent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/MandateProviderSelectionAction"
                                }
                            }
                        },
                        "description": "Mandate Provider Selection Action",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Mandate Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "502": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsProviderError"
                                }
                            }
                        },
                        "description": "Provider Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Submit consent",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "/v3/mandates/{id}/authorization-flow/actions/provider-selection": {
            "post": {
                "description": "Submit the provider details selected by the PSU\n\nThis API can be called:\n- using the `mandate_token` associated with the mandate you are trying to authorize;\n- using a backend bearer token.\n",
                "operationId": "submit-mandate-provider-selection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "description": "ID of the Mandate",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MandateId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PerformActionProviderSelection"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "example": {
                                    "authorization_flow": {
                                        "actions": {
                                            "next": {
                                                "type": "redirect",
                                                "uri": "https://api.sandbox.natwest.com/authorize?client_id=6vVMdYbg3YzblC5SVaGLW2gjEw4yrCvMti4GoBxjt4w%3D&request=eyJhbGciOiJQUzI1NiIsImtpZCI6Ing2UU1xbjJ6V1BaRFRLWUtWNEJiTXhQQjBhayJ9.eyJhdWQiOiJodHRwczovL2FwaS5zYW5kYm94Lm5hdHdlc3QuY29tIiwibmJmIjoxNjk5ODY4NjM2LCJpc3MiOiI2dlZNZFliZzNZemJsQzVTVmFHTFcyZ2pFdzR5ckN2TXRpNEdvQnhqdDR3PSIsImV4cCI6MTY5OTg2OTI2NiwicmVzcG9uc2VfdHlwZSI6ImNvZGUgaWRfdG9rZW4iLCJjbGllbnRfaWQiOiI2dlZNZFliZzNZemJsQzVTVmFHTFcyZ2pFdzR5ckN2TXRpNEdvQnhqdDR3PSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vcGF5LnRydWVsYXllci1zYW5kYm94LmNvbS9wcm92aWRlci1yZXR1cm4iLCJzY29wZSI6Im9wZW5pZCBwYXltZW50cyIsInN0YXRlIjoibWFuZGF0ZS00YzIyOTFmMzlmYzA0NThhYjdlYTVjNTI1OGYwMzEzZiIsIm5vbmNlIjoiODE1NTM1NWUtNTRiNC00YjRmLWEyOWEtN2NhZTgxOTI3OWE2IiwibWF4X2FnZSI6ODY0MDAsImNsYWltcyI6eyJ1c2VyaW5mbyI6eyJvcGVuYmFua2luZ19pbnRlbnRfaWQiOnsidmFsdWUiOiJWUlAtMDA5OTQ5ZDktZDA2My00Yzc0LWI5NGUtZjM3MzIzYTQ5ZTBiIiwiZXNzZW50aWFsIjp0cnVlfX0sImlkX3Rva2VuIjp7Im9wZW5iYW5raW5nX2ludGVudF9pZCI6eyJ2YWx1ZSI6IlZSUC0wMDk5NDlkOS1kMDYzLTRjNzQtYjk0ZS1mMzczMjNhNDllMGIiLCJlc3NlbnRpYWwiOnRydWV9LCJhY3IiOnsiZXNzZW50aWFsIjp0cnVlLCJ2YWx1ZXMiOlsidXJuOm9wZW5iYW5raW5nOnBzZDI6c2NhIiwidXJuOm9wZW5iYW5raW5nOnBzZDI6Y2EiXX19fSwiYWNyX3ZhbHVlcyI6InVybjpvcGVuYmFua2luZzpwc2QyOnNjYSB1cm46b3BlbmJhbmtpbmc6cHNkMjpjYSIsImp0aSI6IjliYjFmNDYzLWYifQ.XZTfzRa9sW4Hsbx57GXslLzmaMRHa6RGs_MuNqZiGHtX2_xrfnuO2jftJDfqygMWonqYHY4l3cH3vlERZJNvMHW91ioaro2F8uXTiRoKBN7wnW7YDjfEFZBdLOnS7IvzSDumxAfW0hotuz5gsbKcimF8Um7wNBAKI5V_tvb_Lzi_0FSjUpYzbplOy_nmej6t16pyw0cYwlhuUGQ7VELh7nw2Z8SNp5mA8D-LLS2RNKXwjOczn5CV5P2Q5lN0LQ3VAgy7sCTg70MZQ7Kr8pmKDKqBXwmnuZq-GHgGetY0vgu6e1kydXFygJDjPSJljvtSMpvxYqKgoc45eV2m2c8M4A&state=mandate-4c2291f39fc0458ab7ea5c5258f0313f&nonce=8155355e-54b4-4b4f-a29a-7cae819279a6&scope=openid%20payments&response_type=code%20id_token&redirect_uri=https%3A%2F%2Fpay.truelayer-sandbox.com%2Fprovider-return"
                                            }
                                        }
                                    },
                                    "status": "authorizing"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/MandateProviderSelectionAction"
                                }
                            }
                        },
                        "description": "Mandate Provider Selection Action",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Mandate Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "502": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsProviderError"
                                }
                            }
                        },
                        "description": "Provider Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    },
                    {
                        "MandateToken": []
                    }
                ],
                "summary": "Submit provider selection",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "/v3/mandates/{id}/constraints": {
            "get": {
                "description": "Retrieve the constriants defined on the mandate, as well as\nthe current utilisation of those constraints within the periods.\n",
                "operationId": "get-constraints",
                "parameters": [
                    {
                        "description": "ID of the Mandate",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MandateId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetConstraints"
                                }
                            }
                        },
                        "description": "Constraints State"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Mandate Not Found"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    }
                ],
                "summary": "Get mandate constraints",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "/v3/mandates/{id}/funds": {
            "get": {
                "description": "Confirm that the PSU has the given funds. \n\nThis API can be called:\n  - using the `mandate_token` associated with the mandate;\n  - using a backend bearer token.\n",
                "operationId": "confirm-mandate-funds",
                "parameters": [
                    {
                        "description": "ID of the Mandate",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MandateId"
                        }
                    },
                    {
                        "description": "A 'cent' value representing the amount. eg 100 == 1GBP.",
                        "in": "query",
                        "name": "amount_in_minor",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "currency",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CurrencyCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfirmationOfFunds"
                                }
                            }
                        },
                        "description": "Confirmation of funds"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Mandate Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    }
                ],
                "summary": "Confirm funds",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "/v3/mandates/{id}/revoke": {
            "post": {
                "description": "Revoke a mandate\n\nThis API must be called using a backend bearer token.\n",
                "operationId": "revoke-mandate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    },
                    {
                        "description": "ID of the Mandate",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Revocation Successful",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                }
                            }
                        },
                        "description": "BadRequest",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Mandate Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                }
                            }
                        },
                        "description": "Idempotency-Key Concurrency Conflict"
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "mandates"
                        ]
                    }
                ],
                "summary": "Revoke mandate",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "/v3/merchant-accounts": {
            "get": {
                "description": "List all your TrueLayer's merchant accounts.\nThere might be more than one account per currency.\n",
                "operationId": "list-operating-accounts",
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListMerchantAccounts"
                                }
                            }
                        },
                        "description": "Merchant accounts."
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "List merchant accounts",
                "tags": [
                    "Merchant accounts"
                ]
            }
        },
        "/v3/merchant-accounts/{id}": {
            "get": {
                "description": "Get the details of a single merchant account.\n",
                "operationId": "get-operating-account",
                "parameters": [
                    {
                        "description": "ID of the merchant account to be returned",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MerchantAccountId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/MerchantAccount"
                                }
                            }
                        },
                        "description": "Merchant account."
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Account Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Get merchant account",
                "tags": [
                    "Merchant accounts"
                ]
            }
        },
        "/v3/merchant-accounts/{id}/payment-sources": {
            "get": {
                "description": "Get the payment sources from which the merchant account has received payment\n",
                "operationId": "get-merchant-account-payment-sources",
                "parameters": [
                    {
                        "description": "ID of the merchant account into which payments were made",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MerchantAccountId"
                        }
                    },
                    {
                        "description": "ID of the user",
                        "in": "query",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPaymentSources"
                                }
                            }
                        },
                        "description": "User external account payment sources."
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Account Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Get payment sources",
                "tags": [
                    "Merchant accounts"
                ]
            }
        },
        "/v3/merchant-accounts/{id}/sweeping": {
            "delete": {
                "description": "Disable automatic sweeping for a merchant account.\n",
                "operationId": "merchant-account-disable-sweeping",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    },
                    {
                        "description": "ID of the merchant account to fetch the settings for",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MerchantAccountId"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Automatic sweeping disabled"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Account Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Disable sweeping",
                "tags": [
                    "Merchant accounts"
                ]
            },
            "get": {
                "description": "Get the automatic sweeping settings for a merchant account.\n",
                "operationId": "merchant-account-get-sweeping",
                "parameters": [
                    {
                        "description": "ID of the merchant account to fetch the settings for",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MerchantAccountId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/SweepingSettingsConfigured"
                                }
                            }
                        },
                        "description": "Automatic sweeping settings"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Account Not Found or Automatic sweeping not enabled"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Get sweeping settings",
                "tags": [
                    "Merchant accounts"
                ]
            },
            "post": {
                "description": "Set the automatic sweeping settings for a merchant account.\n\nAt regular intervals, any available balance in excess of the configured `max_amount_in_minor` is withdrawn to a pre-configured IBAN.\n",
                "operationId": "merchant-account-setup-sweeping",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    },
                    {
                        "description": "ID of the merchant account to fetch the settings for",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MerchantAccountId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SweepingSettingsRequested"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Automatic sweeping enabled"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Account Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Set up or update sweeping",
                "tags": [
                    "Merchant accounts"
                ]
            }
        },
        "/v3/merchant-accounts/{id}/transactions": {
            "get": {
                "description": "Get the transactions of a single merchant account.\n> 🚧\n> If the pagination object is missing, add a header `tl-enable-pagination: true` in the request to enable pagination (for more details click [here](https://docs.truelayer.com/docs/get-your-merchant-account-transactions-or-payment-sources#pagination-for-the-transactions-endpoint))\n",
                "operationId": "merchant-account-get-transactions",
                "parameters": [
                    {
                        "description": "ID of the merchant account to return the transactions for.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MerchantAccountId"
                        }
                    },
                    {
                        "description": "Timestamp for the start of the range to query (inclusive). Uses the ISO-8601 format of YYYY-MM-DDTHH:MM:SS±HHMM.",
                        "in": "query",
                        "name": "from",
                        "required": true,
                        "schema": {
                            "format": "datetime",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Timestamp for the end of the range to query (exclusive). Uses the ISO-8601 format of YYYY-MM-DDTHH:MM:SS±HHMM.",
                        "in": "query",
                        "name": "to",
                        "required": true,
                        "schema": {
                            "format": "datetime",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Cursor used for pagination purposes, returned as `next_cursor` in the response payload of the inital request. Not required to access the first page of items.",
                        "in": "query",
                        "name": "cursor",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Filters transactions by payments or payouts. If omitted, both payments and payouts are returned.",
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "enum": [
                                "payment",
                                "payout"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactions"
                                }
                            }
                        },
                        "description": "Transactions"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Account Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Get transactions",
                "tags": [
                    "Merchant accounts"
                ]
            }
        },
        "/v3/payment-links": {
            "post": {
                "description": "Create a new payment link\n\nThis API must be called using a backend bearer token.\n",
                "operationId": "create-payment-link",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePaymentLink"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatedPaymentLink"
                                }
                            }
                        },
                        "description": "Payment link"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                }
                            }
                        },
                        "description": "Idempotency-Key Concurrency Conflict"
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse"
                    },
                    "429": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsRateLimitExceeded"
                                }
                            }
                        },
                        "description": "Rate Limit Exceeded"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments",
                            "payment_links:create"
                        ]
                    }
                ],
                "summary": "Create payment link",
                "tags": [
                    "Payment links"
                ]
            }
        },
        "/v3/payment-links/{id}": {
            "get": {
                "description": "Retrieves payment link details.\n\nThis API must be called using a backend bearer token.\n",
                "operationId": "get-payment-link",
                "parameters": [
                    {
                        "description": "ID of the payment link",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentLinkId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPaymentLink"
                                }
                            }
                        },
                        "description": "Payment Link"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Link Not Found"
                    },
                    "429": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsRateLimitExceeded"
                                }
                            }
                        },
                        "description": "Rate Limit Exceeded"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments",
                            "payment_links"
                        ]
                    }
                ],
                "summary": "Get payment link",
                "tags": [
                    "Payment links"
                ]
            }
        },
        "/v3/payment-links/{id}/payments": {
            "get": {
                "description": "List all the payments associated with the payment link.\nThis API must be called using a backend bearer token.\n",
                "operationId": "get-payment-link-payments",
                "parameters": [
                    {
                        "description": "ID of the payment link",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentLinkId"
                        }
                    },
                    {
                        "in": "query",
                        "name": "cursor",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/Cursor"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPaymentLinkPayments"
                                }
                            }
                        },
                        "description": "Payments list"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Link Not Found"
                    },
                    "429": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsRateLimitExceeded"
                                }
                            }
                        },
                        "description": "Rate Limit Exceeded"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Get payments",
                "tags": [
                    "Payment links"
                ]
            }
        },
        "/v3/payments": {
            "post": {
                "description": "Create a new payment \n\nThis API must be called using a backend bearer token.\n",
                "operationId": "create-payment",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    },
                    {
                        "$ref": "#/components/parameters/PsuIpAddressHeader",
                        "description": "Used to collect and record end-user IP address.\nThe first IP address in the [list](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) will be used as the end-user IP address.\nThis header is only considered if the authorization_flow object in the request body is specified.\n"
                    },
                    {
                        "$ref": "#/components/parameters/DeviceUserAgentHeader",
                        "description": "Used to improve end-user's authentication experience based on device type.\nIf omitted, the `User-Agent` header will be used instead.\nThis header is only considered if the authorization_flow object in the request body is specified.\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePayment"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatedPayment"
                                }
                            }
                        },
                        "description": "Payment",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                }
                            }
                        },
                        "description": "Idempotency-Key Concurrency Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "429": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsRateLimitExceeded"
                                }
                            }
                        },
                        "description": "Rate Limit Exceeded"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Create payment",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments-provider-return": {
            "post": {
                "description": "Submit direct return query and fragment parameters returned from the provider.\n",
                "operationId": "submit-payments-provider-return-parameters",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeaderNoAuth"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "properties": {
                                    "fragment": {
                                        "description": "Submit the fragment parameters attached to the GET request received by\nthe third-party when redirected back to the `redirect.direct_return_uri`\nset in the start authorization flow action.\n",
                                        "example": "key1=val1&key2=val2",
                                        "type": "string"
                                    },
                                    "query": {
                                        "description": "Submit the query parameters attached to the GET request received by\nthe third-party when redirected back to your `redirect.direct_return_uri`\nset in the start authorization flow action.\n",
                                        "example": "key1=val1&key2=val2",
                                        "type": "string"
                                    }
                                },
                                "title": "Submit provider return parameters for direct Return",
                                "type": "object"
                            }
                        }
                    },
                    "description": "Either `query` or `fragment` need to be present.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderReturnParametersResponse"
                                }
                            }
                        },
                        "description": "Resource",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/ProviderReturnParametersResource"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Parameters",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Resource Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                }
                            }
                        },
                        "description": "Idempotency-Key Concurrency Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "502": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsProviderError"
                                        },
                                        {
                                            "properties": {
                                                "resource": {
                                                    "$ref": "#/components/schemas/ProviderReturnParametersResource"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Provider Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [],
                "summary": "Submit payments return parameters",
                "tags": [
                    "General"
                ]
            }
        },
        "/v3/payments-providers/{id}": {
            "get": {
                "description": "Returns payments provider details.\n\nThis API can be called without the need for authentication.\n",
                "operationId": "get-payment-provider",
                "parameters": [
                    {
                        "description": "ID of the payment provider.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ProviderId"
                        }
                    },
                    {
                        "description": "ID of the client.",
                        "in": "query",
                        "name": "client_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Configuration for the type of icon. Available options are:\n- `default`: Default icon with no background (SVG).\n- `extended`: Extended to a square with an appropriate background colour (SVG).\n- `extended_small`: Extended icon with 192x192 px size (JPEG).\n- `extended_medium`: Extended icon with 432x432 px size (JPEG).\n- `extended_large`: Extended icon jpeg with 864x864 px size (JPEG).\n",
                        "in": "query",
                        "name": "icon_type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentsProvider"
                                }
                            }
                        },
                        "description": "Payment provider"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Provider Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    },
                    {
                        "MandateToken": []
                    }
                ],
                "summary": "Get payments provider",
                "tags": [
                    "Payments providers"
                ]
            }
        },
        "/v3/payments-providers/search": {
            "post": {
                "description": "Returns a list of payments providers.\n",
                "operationId": "search-payment-providers",
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchPaymentsProvidersRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchPaymentsProviders"
                                }
                            }
                        },
                        "description": "Payment providers"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "429": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsRateLimitExceeded"
                                }
                            }
                        },
                        "description": "Rate Limit Exceeded"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Search Payments providers",
                "tags": [
                    "Payments providers"
                ]
            }
        },
        "/v3/payments/{id}": {
            "get": {
                "description": "Returns payment details.\n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to fetch;\n- using a backend bearer token.\n\n_**Note:** Some fields are required when OAuth2 token is used._\n",
                "operationId": "get-payment",
                "parameters": [
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPayment"
                                }
                            }
                        },
                        "description": "Payment"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Get payment",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/actions/cancel": {
            "post": {
                "description": "Cancel a payment \n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to fetch;\n- using a backend bearer token.\n",
                "operationId": "cancel-payment",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    },
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Cancel payment",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/actions/save-user-account": {
            "post": {
                "description": "Save the account details associated with a payment for subsequent re-use. This endpoint can be called for closed-loop payments.\n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to fetch;\n- using a backend bearer token.\n",
                "operationId": "save-user-account-payment",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    },
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Save payment account",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/authorization-flow": {
            "post": {
                "description": "Start the authorization flow for a payment.\n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to fetch;\n- using a backend bearer token.\n",
                "operationId": "start-payment-authorization-flow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "$ref": "#/components/parameters/PsuIpAddressHeader"
                    },
                    {
                        "$ref": "#/components/parameters/DeviceUserAgentHeader"
                    },
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/StartPaymentAuthorizationFlow"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/PerformPaymentAction"
                                }
                            }
                        },
                        "description": "Payment",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Start authorization flow",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/authorization-flow/actions/consent": {
            "post": {
                "description": "Submit the consent given by the user\n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to authorize;\n- using a backend bearer token.\n",
                "operationId": "submit-consent",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitConsent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/PerformPaymentAction",
                                    "example": {
                                        "authorization_flow": {
                                            "actions": {
                                                "next": {
                                                    "type": "redirect",
                                                    "uri": "https://pay-mock-connect.truelayer-sandbox.com/login/02ae1d6d-f1fa-4f1e-bd59-966f66ea7407#token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwMmFlMWQ2ZC1mMWZhLTRmMWUtYmQ1OS05NjZmNjZlYTc0MDciLCJzY29wZSI6InBheS1tb2NrLWNvbm5lY3QtYXBpIiwibmJmIjoxNjk5MzU4ODQ4LCJleHAiOjE2OTkzNjI0NDgsImlzcyI6Imh0dHBzOi8vcGF5LW1vY2stY29ubmVjdC50cnVlbGF5ZXItc2FuZGJveC5jb20iLCJhdWQiOiJodHRwczovL3BheS1tb2NrLWNvbm5lY3QudHJ1ZWxheWVyLXNhbmRib3guY29tIn0.6T_s1zSZnE2O0iTsln-3hkFK_mfmn3qLCiHyAXSAZPs"
                                                }
                                            }
                                        },
                                        "status": "authorizing"
                                    }
                                }
                            }
                        },
                        "description": "Payment",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Submit consent",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/authorization-flow/actions/form": {
            "post": {
                "description": "Submit form details filled by the PSU.\n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to authorize;\n- using a backend bearer token.\n",
                "operationId": "submit-form",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "example": {
                                    "authorization_flow": {
                                        "actions": {
                                            "next": {
                                                "inputs": [
                                                    {
                                                        "display_text": {
                                                            "default": "Select SCA method:",
                                                            "key": "embedded-step.embedded-auth-flow-sca-select.display-label"
                                                        },
                                                        "id": "embedded-auth-flow-sca-select",
                                                        "mandatory": true,
                                                        "options": [
                                                            {
                                                                "display_text": {
                                                                    "default": "SMS",
                                                                    "key": "embedded-auth-flow-sca-select.Sms"
                                                                },
                                                                "id": "Sms",
                                                                "search_aliases": [
                                                                    "text",
                                                                    "mobile",
                                                                    "kurznachricht",
                                                                    "kurzmitteilung"
                                                                ]
                                                            },
                                                            {
                                                                "display_text": {
                                                                    "default": "PhotoTAN",
                                                                    "key": "embedded-auth-flow-sca-select.PhotoTan"
                                                                },
                                                                "id": "PhotoTan",
                                                                "search_aliases": [
                                                                    "app",
                                                                    "code",
                                                                    "qr",
                                                                    "scan"
                                                                ]
                                                            }
                                                        ],
                                                        "type": "select"
                                                    }
                                                ],
                                                "type": "form"
                                            }
                                        }
                                    },
                                    "status": "authorizing"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/PerformPaymentAction"
                                }
                            }
                        },
                        "description": "Payment",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "502": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsProviderError"
                                }
                            }
                        },
                        "description": "Provider Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Submit form",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/authorization-flow/actions/provider-selection": {
            "post": {
                "description": "Submit the provider details selected by the PSU\n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to authorize;\n- using a backend bearer token.\n",
                "operationId": "submit-provider-selection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PerformActionProviderSelection"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "example": {
                                    "authorization_flow": {
                                        "actions": {
                                            "next": {
                                                "schemes": [
                                                    {
                                                        "id": "faster_payments_service",
                                                        "recommended": true
                                                    }
                                                ],
                                                "type": "scheme_selection"
                                            }
                                        }
                                    },
                                    "status": "authorizing"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/PerformPaymentAction"
                                }
                            }
                        },
                        "description": "Payment",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Submit provider selection",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/authorization-flow/actions/scheme-selection": {
            "post": {
                "description": "Submit the scheme details selected by the PSU\n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to authorize;\n- using a backend bearer token.\n",
                "operationId": "submit-scheme-selection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PerformActionSchemeSelection"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/PerformPaymentAction"
                                }
                            }
                        },
                        "description": "Payment",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-parameters": "#/components/schemas/ProblemDetailsInvalidParameters",
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Submit scheme selection",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/authorization-flow/actions/user-account-selection": {
            "post": {
                "description": "Submit the user account selection option given by the user\n\nThis API can be called:\n- using the `resource_token` associated with the payment you are trying to authorize;\n- using a backend bearer token.\n",
                "operationId": "submit-user-account-selection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeaderConditional"
                    },
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitUserAccountSelection"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/PerformPaymentAction"
                                }
                            }
                        },
                        "description": "Payment",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#invalid-state": "#/components/schemas/ProblemDetailsInvalidState"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsInvalidState"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Invalid Request",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment Not Found",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "PaymentToken": []
                    }
                ],
                "summary": "Submit user account selection",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{id}/refunds": {
            "get": {
                "description": "Returns all refunds of a payment.",
                "operationId": "get-payment-refunds",
                "parameters": [
                    {
                        "description": "ID of the merchant account payment",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPaymentRefunds"
                                }
                            }
                        },
                        "description": "Refunds of the payment"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment ID Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "OAuth2": [
                            "payments:refund"
                        ]
                    }
                ],
                "summary": "Get payment refunds",
                "tags": [
                    "Payments"
                ]
            },
            "post": {
                "description": "Refund a merchant account payment.\n",
                "operationId": "create-payment-refund",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    },
                    {
                        "description": "The payment ID for the payment to be fully or partially refunded.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePaymentRefund"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRefundCreated"
                                }
                            }
                        },
                        "description": "Refund",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payment ID Not Found"
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                }
                            }
                        },
                        "description": "Idempotency-Key Concurrency Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "OAuth2": [
                            "payments:refund"
                        ]
                    }
                ],
                "summary": "Create payment refund",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payments/{payment_id}/refunds/{refund_id}": {
            "get": {
                "description": "Returns refund details.\n",
                "operationId": "get-payment-refund",
                "parameters": [
                    {
                        "description": "ID of the payment",
                        "in": "path",
                        "name": "payment_id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PaymentId"
                        }
                    },
                    {
                        "description": "ID of the refund",
                        "in": "path",
                        "name": "refund_id",
                        "required": true,
                        "schema": {
                            "description": "Unique ID for the refund",
                            "example": "43d12d0f-d775-410f-aaff-482200c17017",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRefund"
                                }
                            }
                        },
                        "description": "Refund"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Refund Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "OAuth2": [
                            "payments:refund"
                        ]
                    }
                ],
                "summary": "Get payment refund",
                "tags": [
                    "Payments"
                ]
            }
        },
        "/v3/payouts": {
            "post": {
                "description": "Pay out from one of your merchant accounts.\n",
                "operationId": "create-payout",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/SignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "examples": {
                                "External account": {
                                    "value": {
                                        "amount_in_minor": 100,
                                        "beneficiary": {
                                            "account_holder_name": "John Doe",
                                            "account_identifier": {
                                                "account_number": "12345678",
                                                "sort_code": "123456",
                                                "type": "sort_code_account_number"
                                            },
                                            "reference": "a-reference",
                                            "type": "external_account"
                                        },
                                        "currency": "GBP",
                                        "merchant_account_id": "ae094a73-d874-4241-a65f-6dcda7ac07b1"
                                    }
                                },
                                "Verified payouts | Account holder name check": {
                                    "value": {
                                        "amount_in_minor": 100,
                                        "beneficiary": {
                                            "provider_selection": {
                                                "filter": {
                                                    "countries": [
                                                        "GB"
                                                    ]
                                                },
                                                "type": "user_selected"
                                            },
                                            "reference": "a-reference",
                                            "type": "user_determined",
                                            "user": {
                                                "email": "john.doe@truelayer.com",
                                                "name": "John Doe"
                                            },
                                            "verification": {
                                                "verify_name": true
                                            }
                                        },
                                        "currency": "GBP",
                                        "merchant_account_id": "ae094a73-d874-4241-a65f-6dcda7ac07b1"
                                    }
                                },
                                "Verified payouts | Transaction detection with preselected provider": {
                                    "value": {
                                        "amount_in_minor": 100,
                                        "beneficiary": {
                                            "provider_selection": {
                                                "provider_id": "ob-barclays",
                                                "type": "preselected"
                                            },
                                            "reference": "a-reference",
                                            "type": "user_determined",
                                            "user": {
                                                "name": "John Doe",
                                                "phone": "+447700900000"
                                            },
                                            "verification": {
                                                "transaction_search_criteria": {
                                                    "amount_in_minor": 2000,
                                                    "created_at": "2024-05-07",
                                                    "currency": "GBP",
                                                    "tokens": [
                                                        "18db38",
                                                        "Betropolis LTD",
                                                        "LC Betropolis"
                                                    ]
                                                },
                                                "verify_name": true
                                            }
                                        },
                                        "currency": "GBP",
                                        "merchant_account_id": "ae094a73-d874-4241-a65f-6dcda7ac07b1"
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/CreatePayout"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatePayout-2"
                                }
                            }
                        },
                        "description": "Payout",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "examples": {
                                    "invalid_scope": {
                                        "summary": "Invalid Scope",
                                        "value": {
                                            "detail": "Authorization: The JWT was not able to be validated: InvalidAudience.",
                                            "status": 401,
                                            "title": "Unauthenticated",
                                            "trace_id": "96ce50247f87f540bb2d86771b3728b8",
                                            "type": "https://docs.truelayer.com/docs/payments-api-errors#unauthenticated"
                                        }
                                    },
                                    "missing_token": {
                                        "summary": "Missing Token",
                                        "value": {
                                            "detail": "A Bearer token must be provided in the Authorization header.",
                                            "status": 401,
                                            "title": "Unauthenticated",
                                            "trace_id": "96ce50247f87f540bb2d86771b3728b8",
                                            "type": "https://docs.truelayer.com/docs/payments-api-errors#unauthenticated"
                                        }
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                }
                            }
                        },
                        "description": "Idempotency-Key Concurrency Conflict",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "429": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsRateLimitExceeded"
                                }
                            }
                        },
                        "description": "Rate Limit Exceeded",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error",
                        "headers": {
                            "Tl-Should-Retry": {
                                "description": "Whether retrying with the same idempotency key could return a different result. If you receive a value of true, you should retry your request to get the true result of the operation.",
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    },
                    {
                        "OAuth2": [
                            "payments:payout:business_account"
                        ]
                    }
                ],
                "summary": "Create payout",
                "tags": [
                    "Payouts"
                ]
            }
        },
        "/v3/payouts/{id}": {
            "get": {
                "description": "Returns payout details.\n",
                "operationId": "get-payout",
                "parameters": [
                    {
                        "description": "ID of the payout",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PayoutId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payout"
                                }
                            }
                        },
                        "description": "Payout"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Payout Not Found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Get payout",
                "tags": [
                    "Payouts"
                ]
            }
        },
        "/v3/payouts/{id}/authorization-flow": {
            "get": {
                "description": "Get the authorization flow for a payout.\n\nThis API can be called using the `resource_token` associated with the payout you are trying to fetch.\n",
                "operationId": "get-payout-authorization-flow",
                "parameters": [
                    {
                        "description": "ID of the payout",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PayoutId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPayoutAuthorizationFlowResponse"
                                }
                            }
                        },
                        "description": "Perform payout authorization action"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsNotFound"
                                }
                            }
                        },
                        "description": "Authorization flow not found"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Get authorization flow",
                "tags": [
                    "Payouts"
                ]
            },
            "post": {
                "description": "Start the authorization flow for a payout.\n\nThis API can be called using the `resource_token` associated with the payout you are trying to fetch.\n",
                "operationId": "start-payout-authorization-flow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/OptionalIdempotencyKeyHeader"
                    },
                    {
                        "$ref": "#/components/parameters/PsuIpAddressHeader",
                        "description": "Used to collect and record end-user IP address.\nThe first IP address in the [list](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) will be used as the end-user IP address.\n"
                    },
                    {
                        "$ref": "#/components/parameters/DeviceUserAgentHeader",
                        "description": "Used to improve end-user's authentication experience based on device type.\nIf omitted, the `User-Agent` header will be used instead.\n"
                    },
                    {
                        "description": "ID of the payout",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PayoutId"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json; charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/StartPayoutAuthorizationFlow"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/StartPayoutAuthorizationFlowResponse"
                                }
                            }
                        },
                        "description": "Perform payout authorization action"
                    },
                    "400": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsInvalidParameters"
                                }
                            }
                        },
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnauthenticated"
                                }
                            }
                        },
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsForbidden"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "409": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "discriminator": {
                                        "mapping": {
                                            "https://docs.truelayer.com/docs/error-types#concurrency-conflict": "#/components/schemas/ProblemDetailsConcurrencyConflict",
                                            "https://docs.truelayer.com/docs/error-types#idempotency-key-concurrency-conflict": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        "propertyName": "type"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyConcurrencyConflict"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ProblemDetailsConcurrencyConflict"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsIdempotencyKeyReuse"
                                }
                            }
                        },
                        "description": "Idempotency-Key Reuse"
                    },
                    "500": {
                        "content": {
                            "application/problem+json; charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetailsUnknownError"
                                }
                            }
                        },
                        "description": "Unknown Error"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "payments"
                        ]
                    }
                ],
                "summary": "Start authorization flow",
                "tags": [
                    "Payouts"
                ]
            }
        }
    },
    "servers": [
        {
            "description": "Sandbox server",
            "url": "https://api.truelayer-sandbox.com"
        },
        {
            "description": "Production server",
            "url": "https://api.truelayer.com"
        }
    ],
    "tags": [
        {
            "description": "Payments endpoints to create and manage payments resources. You can use this resource to create payments to\na GBP or a EUR account (limited to available countries), or your merchant account managed by TrueLayer.\n",
            "name": "Payments"
        },
        {
            "description": "Payment Links endpoints to create and manage payment links resources. You can use this resource to create payment links to\nshare with the PSUs so they can make payments into your merchant account managed by TrueLayer.\n",
            "name": "Payment links"
        },
        {
            "description": "Endpoints to retrieve payments providers.\n",
            "name": "Payments providers"
        },
        {
            "description": "Payouts endpoints facilitate money movement from your TrueLayer managed merchant account to\npayment sources, or arbitrary external accounts\n",
            "name": "Payouts"
        },
        {
            "description": "Endpoints to interact with your TrueLayer managed merchant account\n",
            "name": "Merchant accounts"
        },
        {
            "description": "# Payment Mandates\n\nMandates are a payment source.\n\nA Payment Mandate is a single consent, given by a PSU, to authorise repeated payments on a schedule\nor ad-hoc basis. Depending on the use case, the PSU may not be required to authorise payments against\nan existing mandate.\n\nThe consent given for a mandate will always include the same debtor (or remitter) account. Depending on\nthe type of Mandate, the creditor (or beneficiary) account may or may not always be the same.\n\n## VRP (Sweeping/Commercial)\n\nVariable Recurring Payments (VRP) are an Open Banking specification allowing a PSU to\nauthorize repeated payments from their bank account to another account they own.\n\nThe PSU only needs to give this consent once. Payments against this consent can then be\ninitiated by a PSP to move funds between accounts with no further input from the PSU.\n\nWhen establishing this consent, the PSU will agree to certain parameters that will enforce\nlimits such as how long the consent will be valid for and what maximum value of transfer will be\nallowed over the consent lifetime. Other limits can be set for timeframes within this lifetime.\n\nA new VRP Mandate is created by calling `POST /v3/mandates`, using a bearer token.\n\nOpenBanking VRP Mandates require the end user to go through an authorization flow -\nthe status of the newly created mandate will therefore be `authorization_required`.\nThe mandate resource will contain a `mandate_token` that can be safely shared with the UI,\nwhere the authorization flow will be taking place.\n\nThe UI can use the `mandate_token` to kick off the **authorization journey**.\nAuthorizing an OpenBanking mandate usually requires multiple **actions**:\n  - collect information from the end user (e.g. select a banking institution);\n  - redirect to a bank's website or mobile app;\n  - etc.\n\nThe UI must specify, using `POST /v3/mandates/authorization_flow`, which **actions** it supports.\nConfiguration parameters can be specified for each action type - e.g. what `return_uri` to\nuse for a `redirect` step, if \"direct return\" is enabled (regulated merchant), etc.\n\nAfter the call to `POST /v3/mandates/authorization_flow`, the mandate status will transition to `authorizing`.\nThe UI must now inspect the `authorization_flow.actions.next` field in the mandate resource and submit the required\ninformation via `POST /v3/mandates/authorization_flow/actions`.\n\nThe mandate might then transition into `authorized`, or stay in `authorizing` with a different next action.\n\nShould the PSU and/or Provider decide to reject the authorization, the mandate status will\ntransition to `revoked`.\n\nPayments can only be made against a mandate once it has transitioned to `authorized`. Those payments\nwill then need to fall within the boundaries set by the consent parameters.\n\nShould the PSU and/or Provider decide to reject the authorization, the mandate status will\ntransition to `revoked`.\n",
            "name": "Mandates"
        }
    ],
    "webhooks": {
        "mandates": {
            "post": {
                "description": "Sent to the webhook URI you registered in Console when a mandate becomes authorized, fails, or is revoked.",
                "operationId": "webhook-mandates",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/WebhookSignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "discriminator": {
                                    "mapping": {
                                        "mandate_authorized": "#/components/schemas/WebhookMandateAuthorized",
                                        "mandate_failed": "#/components/schemas/WebhookMandateFailed",
                                        "mandate_initial_payment_created": "#/components/schemas/WebhookMandateInitialPaymentCreated",
                                        "mandate_remitter_changed": "#/components/schemas/WebhookMandateRemitterChanged",
                                        "mandate_revoked": "#/components/schemas/WebhookMandateRevoked"
                                    },
                                    "propertyName": "type"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookMandateAuthorized"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookMandateFailed"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookMandateRevoked"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookMandateRemitterChanged"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookMandateInitialPaymentCreated"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Webhook Handled"
                    }
                },
                "security": [],
                "summary": "Mandate webhooks",
                "tags": [
                    "Mandates"
                ]
            }
        },
        "merchant_accounts": {
            "post": {
                "description": "Sent to the webhook URI you registered in Console when you receive a payment not initiated through TrueLayer to your merchant account.",
                "operationId": "webhook-merchant-accounts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/WebhookSignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "discriminator": {
                                    "mapping": {
                                        "balance_notification": "#/components/schemas/WebhookBalanceNotification",
                                        "external_payment_received": "#/components/schemas/WebhookExternalPaymentReceived"
                                    },
                                    "propertyName": "type"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookExternalPaymentReceived"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookBalanceNotification"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Webhook Handled"
                    }
                },
                "security": [],
                "summary": "Merchant account webhooks",
                "tags": [
                    "Merchant accounts"
                ]
            }
        },
        "payment_links": {
            "post": {
                "description": "Sent to the webhook URI you registered in Console when a payment is created from a payment link and when a payment link expires.",
                "operationId": "webhook-payment-links",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/WebhookSignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "discriminator": {
                                    "mapping": {
                                        "payment_link_disabled": "#/components/schemas/WebhookPaymentLinkDisabled",
                                        "payment_link_payment_created": "#/components/schemas/WebhookPaymentLinkPaymentCreated"
                                    },
                                    "propertyName": "type"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentLinkPaymentCreated"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentLinkDisabled"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Webhook Handled"
                    }
                },
                "security": [],
                "summary": "Payment link webhooks",
                "tags": [
                    "Payment links"
                ]
            }
        },
        "payments": {
            "post": {
                "description": "Sent to the webhook URI you registered in Console when:\n- a payment is authorised.\n- a payment is executed.\n- a payment fails.\n- a payment settles.\n- a payment is creditable, according to criteria you specified.\n- a payment that has been executed has not settled within a duration you specified.\n- an indemnity claim is made against a payment.\n- a payment is reversed.\n",
                "operationId": "webhook-payments",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/WebhookSignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "discriminator": {
                                    "mapping": {
                                        "payment_authorized": "#/components/schemas/WebhookPaymentAuthorized",
                                        "payment_creditable": "#/components/schemas/WebhookPaymentCreditable",
                                        "payment_disputed": "#/components/schemas/WebhookPaymentDisputed",
                                        "payment_executed": "#/components/schemas/WebhookPaymentExecuted",
                                        "payment_failed": "#/components/schemas/WebhookPaymentFailed",
                                        "payment_reversed": "#/components/schemas/WebhookPaymentReversed",
                                        "payment_settled": "#/components/schemas/WebhookPaymentSettled",
                                        "payment_settlement_stalled": "#/components/schemas/WebhookPaymentSettlementStalled"
                                    },
                                    "propertyName": "type"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentAuthorized"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentExecuted"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentFailed"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentSettled"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentCreditable"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentSettlementStalled"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentDisputed"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPaymentReversed"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Webhook Handled"
                    }
                },
                "security": [],
                "summary": "Payment webhooks",
                "tags": [
                    "Payments"
                ]
            }
        },
        "payouts": {
            "post": {
                "description": "Sent to the webhook URI you registered in Console when a payout succeeds or fails.",
                "operationId": "webhook-payouts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/WebhookSignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "discriminator": {
                                    "mapping": {
                                        "payout_executed": "#/components/schemas/WebhookPayoutExecuted",
                                        "payout_failed": "#/components/schemas/WebhookPayoutFailed"
                                    },
                                    "propertyName": "type"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookPayoutExecuted"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookPayoutFailed"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Webhook Handled"
                    }
                },
                "security": [],
                "summary": "Payout webhooks",
                "tags": [
                    "Payouts"
                ]
            }
        },
        "refunds": {
            "post": {
                "description": "Sent to the webhook URI you registered in Console when a refund succeeds or fails.",
                "operationId": "webhook-refunds",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/WebhookSignatureHeader"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "discriminator": {
                                    "mapping": {
                                        "refund_executed": "#/components/schemas/WebhookRefundExecuted",
                                        "refund_failed": "#/components/schemas/WebhookRefundFailed"
                                    },
                                    "propertyName": "type"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/WebhookRefundExecuted"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WebhookRefundFailed"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Webhook Handled"
                    }
                },
                "security": [],
                "summary": "Refund webhooks",
                "tags": [
                    "Payments"
                ]
            }
        }
    },
    "x-readme": {
        "explorer-enabled": false,
        "proxy-enabled": true
    }
}